/*
 * Copyright (c) 2021 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "assembly-parser.h"

// Autogenerated file -- DO NOT EDIT!

namespace panda::pandasm {

int64_t Parser::MnemonicToBuiltinId() {
    const auto token = context_.GiveToken();

    --context_;
    const auto ins = context_.GiveToken();
    ++context_;

% PandaBuiltins::builtins.each_with_index do |builtin, i|
%
    <%= i != 0 ? "else " : "" %>if (token == "<%= builtin.mnemonic%>" && ins == "<%= builtin.insn%>") {
        return static_cast<int64_t>(<%= builtin.id%>);
    }
%
% end

    return -1;
}

bool Parser::ParseOperandBuiltinMnemonic() {
    if (context_.err.err != Error::ErrorType::ERR_NONE) {
        return false;
    }

    if (*context_ != Token::Type::ID) {
        context_.err = GetError("Expected Mnemonic", Error::ErrorType::ERR_BAD_OPERAND);
        return false;
    }

    auto builtin_id = MnemonicToBuiltinId();
    if (builtin_id != -1) {
        curr_ins_->imms.insert(curr_ins_->imms.begin(), builtin_id);
    } else {
        context_.err = GetError("The non-public extension of ISA does not contain such a builtin", Error::ErrorType::ERR_BAD_MNEMONIC_NAME);
        return false;
    }

    ++context_;

    return true;
}

} // namespace panda::pandasm