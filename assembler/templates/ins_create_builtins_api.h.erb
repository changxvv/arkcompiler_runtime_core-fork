/*
 * Copyright (c) 2021 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!

namespace panda::pandasm {

% PandaBuiltins::builtins.each do |builtin|
% i_mnemo = builtin.insn.tr('.', '_').upcase
% b_mnemo = builtin.mnemonic.tr('.', '_').upcase
% sig     = []
% args    = ['BUILTIN_ID']
%
% # NB! This logic below is very simplistic. May need proper
% # work with formats in builtinsapi.rb some day.
% format_list = builtin.format.split("_");
% format_list.each_index do |i|
%   next if i == 0
%   if format_list[i] == "v4" then
%     sig  << "uint16_t v" + i.to_s
%     args << "v" + i.to_s
%   elsif format_list[i] == "v8" then
%     sig  << "uint16_t v" + i.to_s
%     args << "v" + i.to_s
%   elsif format_list[i] == "id16"
%     sig  << "std::string& id" + i.to_s
%     args << "id" + i.to_s
%   elsif format_list[i] == "id32"
%     sig  << "std::string& id" + i.to_s
%     args << "id" + i.to_s

%   elsif format_list[i] == "imm8"
%     sig  << "uint8_t imm" + i.to_s
%     args << "imm" + i.to_s
%   elsif format_list[i] == "imm16"
%     sig  << "uint16_t imm" + i.to_s
%     args << "imm" + i.to_s
%   end
% end
inline Ins Create_BUILTIN_<%= b_mnemo %>(<%= sig.join(', ') %>)
{
    constexpr uint8_t BUILTIN_ID = <%= builtin.id %>;
    return panda::pandasm::Create_<%= i_mnemo %>(<%= args.join(', ') %>);
}

% end

} // namespace panda::pandasm
