---
cases:
  - defs: |-
      function foo() {}
      function foo(): void {}

  - defs: |-
      function foo(): void throws {}
      function foo(): void {}

  - defs: |-
      function foo(): int {
        return 0;
      }
      native function foo(): void;

  - defs: |-
      function foo(): int {
        return 0;
      }
      function foo(): short {
        return 0 as short;
      }

  - defs: |-
      function foo(... a: byte): void {}
      native function foo(... b: byte): long;

  - defs: |-
      function foo<T, U>(a: T, b: U): T {
        return a;
      }
      function foo<V, T>(a: V, b: T): V {
        return a;
      }

  - defs: |-
      function foo<T, U>(a: T, b: U): T {
        return a;
      }
      function foo<V, T>(a: V, b: T): int {
        return 1;
      }

  - defs: |-
      function foo<T>(a: T) throws {
        throw ArithmeticException;
      }
      function foo<T>(a: T) {
        return;
      }

  - defs: |-
      function bar<T>(a: T) throws {
        throw ArithmeticException;
      }
      function foo<V>(a: (a: V) throws) rethrows {}
      function foo<T>(a: (a: T) throws) rethrows {}

  - defs: |-
      interface I {}
      interface J {}
      class A implements I, J {}

      function foo(a: I): int {
          return 1;
      }
      function foo(a: J): int {
          return 2;
      }
    use: |-
      let i: int = foo(new A());

  - defs: |-
      class A {}
      class B {}

      function foo(a: A|null): int {
          return 1;
      }
      function foo(a: B|null): int {
          return 2;
      }
    use: |-
      let i: int = foo(null);

  - defs: |-
      function foo(a: int, ...p: int[]): int {
          return 1;
      }
      function foo(...p: int[]): int {
          return 2;
      }
    use: |-
      let i: int = foo(1)

  - defs: |-
      function foo(a: Object, ...p: Object[]): int {
          return 1;
      }
      function foo(...p: Object[]): int {
          return 2;
      }
    use: |-
      let i: int = foo(new Object[1])

  - defs: |-
      function foo(...p: int[]): int {
          return 1;
      }
      function foo(...p: boolean[]): int {
          return 2;
      }
    use: |-
      let i: int = foo(1, true)

  - defs: |-
      function foo(...p: int[]): int {
          return 1;
      }
      function foo(...p: boolean[]): int {
          return 2;
      }
    use: |-
      let i: int = foo()

  - defs: |-
      function foo(...p: int[]): int {
          return 1;
      }
      function foo(...p: long[]): int {
          return 2;
      }
    use: |-
      let i: int = foo()

  - defs: |-
      function foo(...p: float[]): int {
          return 1;
      }
      function foo(...p: double[]): int {
          return 2;
      }
    use: |-
      let i: int = foo()
