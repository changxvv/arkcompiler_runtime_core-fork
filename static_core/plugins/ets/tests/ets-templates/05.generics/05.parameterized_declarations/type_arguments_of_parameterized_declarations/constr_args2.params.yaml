---
cases:
  # classes
  - use: |-
      let v: A<X> = new <X> A<X>(new X(), new X())

  - use: |-
      let v: A<Int> = new <X|null> A<Int>(new Int(), new X())

  - use: |-
      let v: A<Int|null> = new <X|null> A<Int|null>(null, null)

  - use: |-
      let v: A<X> = new <X|null> A<X>(new X(), new X())
    bound: ' extends X|null'

  - use: |-
      let v: A<Object> = new <X|null> A<Object>(new X(), null)
    bound: ' extends Object|null'

  # interfaces
  - use: |-
      let v: A<I> = new<I>A<I>(new X(), new X())

  - use: |-
      let v: A<I|null> = new <I|null> A<I|null>(null, new Y())

  - use: |-
      let v: A<Y> = new <I|null> A<Y>(new Y(), new Y())
    bound: ' extends I|null'

  # arrays
  - use: |-
      let v: A<int[]> = new <X[]> A<int[]>(new int[1], new X[0])

  - use: |-
      let v: A<int[]|null> = new <X[]|null> A<int[]|null>(null, new X[0])

# aliases
  - use: |-
      let v: A<B> = new <B> A<B>([Color.Red], [Color.Blue])
    decl: type B = Color[]

  - use: |-
      let v: A<B> = new <B> A<B>(null, new X[1][0])
    decl: type B = X[][]|null

  - use: |-
      let v: A<Y> = new <B> A<Y>(new Y(), new Y[0])
    bound: ' extends X[]'
    decl: type B = Y[]

  - use: |-
      let v: A<C|null> = new <B|null> A<C|null>(new Color[0], new Y[0])
    bound: ' extends X[]|null'
    decl: |-
        type B = X[]
        type C = Color[]
