---
cases:
  # type argument is class
  - use: |-
      let v: J<X> = new A<X>(new X())

  - use: |-
      let v: J<X> = new A<X>(new X())
    bound: ' extends X'

  - use: |-
      let v: J<X> = new A<X>(new X())
    bound: ' extends X|null'

  - use: |-
      let v: J<X|null> = new A<X|null>(new X())
    bound: ' extends X|null'

  - use: |-
      let v: J<X|null> = new A<X|null>(null)
    bound: ' extends X|null'

  - use: |-
      let v: J<X|null> = new A<X|null>(null)

  - use: |-
      let v: J<J<X>> = new A<J<X>>(new A<X>(new X()))

  # type argument is interface
  - use: |-
      let v: J<I> = new A<I>(new X())

  - use: |-
      let v: J<I|null> = new A<I|null>(new X())
    bound: ' extends I|null'

  - use: |-
      let v: J<J<I>> = new A<J<I>>(new A<I>(new X()))
    bound: ' extends Object'

  # type argument is array of classes, interfaces, enums
  - use: |-
      let v: J<X[]> = new A<X[]>(new X[0])

  - use: |-
      let v: J<X[]|null> = new A<X[]|null>(null)

  - use: |-
      let v: J<J<X>[]> = new A<J<X>[]>(new J<X>[0])

  - use: |-
      let v: J<J<X[]>[]> = new A<J<X[]>[]>(new J<X[]>[0])

  - use: |-
      let v: J<I[]> = new A<I[]>(new I[0])
    bound: ' extends Object[]'

  - use: |-
      let v: J<J<I>[]> = new A<J<I>[]>(new J<I>[0])

  - use: |-
      let v: J<J<I[]>[]> = new A<J<I[]>[]>(new J<I[]>[0])

  - use: |-
      let v: J<J<I[]|null>[]> = new A<J<I[]|null>[]>(new J<I[]|null>[0])

  - use: |-
      let v: J<Color[]> = new A<Color[]>(new Color[0])
    bound: ' extends Color[]|null'

  - use: |-
      let v: J<J<Color[]>[]> = new A<J<Color[]>[]>(new J<Color[]>[0])

  # type argument is alias
  - use: |-
      let v: J<B> = new A<B>(new X())
    decl: |-
      type B = X
    bound: ' extends X|null'

  - use: |-
      let v: J<B> = new A<B>(null)
    decl: |-
      type B = X|null

  - use: |-
      let v: J<B> = new A<B>(new A<X>(new X()))
    decl: |-
      type B = J<X>
    bound: ' extends Object'

  - use: |-
      let v: J<B> = new A<B>(new A<X|null>(null))
    decl: |-
      type B = J<X|null>

  - use: |-
      let v: J<B> = new A<B>(new X[0])
    decl: |-
      type B = X[]

  - use: |-
      let v: J<B> = new A<B>(new J<X>[0])
    decl: |-
      type B = J<X>[]

  - use: |-
      let v: J<B> = new A<B>(new J<X[]>[0])
    decl: |-
      type B = J<X[]>[]

  - use: |-
      let v: J<J<B>[]> = new A<J<B>[]>(new J<B>[0])
    decl: |-
      type B = X[]
