---
cases:
  # classes
  - use: |-
      let v: A = new <X> A(new X())

  - use: |-
      let v: A = new <X|null> A(new X())

  - use: |-
      let v: A = new <X|null> A(null)

  - use: |-
      let v: A = new <X> A(new X())
    bound: ' extends X'

  - use: |-
      let v: A = new <X|null> A(new X())
    bound: ' extends X|null'

  - use: |-
      let v: A = new <X|null> A(null)
    bound: ' extends Object|null'

  # interfaces
  - use: |-
      let v: A = new <I> A(new X())

  - use: |-
      let v: A = new <I|null> A(new Y())

  - use: |-
      let v: A = new <I|null> A(null)

  - use: |-
      let v: A = new <I> A(new X())
    bound: ' extends I'

  - use: |-
      let v: A = new <I|null> A(new Y())
    bound: ' extends I|null'

  - use: |-
      let v: A = new <I|null> A(null)
    bound: ' extends Object|null'

  # arrays
  - use: |-
      let v: A = new <X[]> A(new X[0])

  - use: |-
      let v: A = new <X[]|null> A(new X[0])

  - use: |-
      let v: A = new <X[]|null> A(null)

  - use: |-
      let v: A = new <X[]> A(new X[0])
    bound: ' extends X[]'

  - use: |-
      let v: A = new <X[]|null> A(new X[0])
    bound: ' extends X[]|null'

  - use: |-
      let v: A = new <X[]|null> A(null)
    bound: ' extends Object|null'

  - use: |-
      let v: A = new <X[]> A(new X[0])
    bound: ' extends Object[]'

  - use: |-
      let v: A = new <X[]|null> A(new X[0])
    bound: ' extends Object[]|null'

# aliases
  - use: |-
      let v: A = new <B> A(new Color[0])
    decl: type B = Color[]

  - use: |-
      let v: A = new <B> A(new X[0][])
    decl: type B = X[][]|null

  - use: |-
      let v: A = new <B|null> A(null)
    decl: type B = I[]|null

  - use: |-
      let v: A = new <B> A(new Y[0])
    bound: ' extends X[]'
    decl: type B = Y[]

  - use: |-
      let v: A = new <B|null> A(new Y[0])
    bound: ' extends X[]|null'
    decl: type B = X[]
