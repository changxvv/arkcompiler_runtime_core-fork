---
cases:
  # type argument is class
  - use: |-
      let v = new X()
      if (a.meth <Y> (new X(), v) !== v) {  // Y is not X
          return 1;
      }

  - use: |-
      let v: X|null = null
      if (a.meth <X> (new X(), v) !== v) {  // null is not allowed
          return 1;
      }
    bound: ' extends X'

  - use: |-
      if (a.meth <X|null> (new X(), null) !== null) {  // null is out of bound
          return 1;
      }
    bound: ' extends I'

  - use: |-
      if (a.meth <null|X> (new X(), null) !== null) {  // syntax error
          return 1;
      }
    bound: ' extends Object|null'

  # type argument is interface
  - use: |-
      let v = new Y()
      if (a.meth <I> (v, v) !== v) {  // Y is not I
          return 1;
      }

  - use: |-
      let v = new Object()
      if (a.meth <I|null> (new X(), v) !== v) {  // Object is not I
          return 1;
      }
    bound: ' extends Object|null'

  # type argument is array of classes, interfaces, enums
  - use: |-
      let v = new X[0]
      if (a.meth <X> (new X(), v) !== v) {  // X[] is not X
          return 1;
      }
    bound: ' extends Object[]'

  - use: |-
      let v: I[] = new I[0]
      if (a.meth <Y[]> (new X(), v) !== v) {  // Y[] is not I[]
          return 1;
      }

  - use: |-
      let v: Color[] = [Color.Red]
      if (a.meth <Color[][]> (new X(), v) !== v) {  // Color[][] is not Color[]
          return 1;
      }
    bound: ' extends Object'

  # type argument is alias
  - use: |-
      let v = new X()
      if (a.meth <B> (new X(), v) !== v) {  // Y is not X
          return 1
      }
    decl: |-
      type B = Y

  - use: |-
      let v: X|null = null
      if (a.meth <B> (new X(), v) !== v) {  // X|null is not Y|null
          return 1;
      }
    decl: |-
      type B = Y|null
    bound: ' extends Object|null'

  - use: |-
      let v: I[] = [new X()]
      if (a.meth <B> (v, v) !== v) {  // I[] is not X
          return 1;
      }
    decl: |-
      type B = I[]

  - use: |-
      let v = new X[0]
      if (a.meth <B> (new X(), v) !== v) {  // X[] is not X[][]
          return 1;
      }
    decl: |-
      type B = X[][]|null
