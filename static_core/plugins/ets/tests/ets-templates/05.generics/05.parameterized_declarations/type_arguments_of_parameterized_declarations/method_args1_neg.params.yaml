---
cases:
  # type argument is class
  - use: |-
      let v = new X()
      if (a.meth<X>(v, null) !== v) { // null is not allowed here
          return 1
      }

  - use: |-
      let v = new X()
      if (a.meth<Y<X>>(v, new X()) !== v) { // X is not Y<X>
          return 1
      }
    bound: ' extends X'

  - use: |-
      if (a.meth<null|X>(null, new X()) !== null) {  // null|X - syntax error
          return 1
      }

  - use: |-
      let v = new X()
      if (a.meth<X>(v, new X()) !== v) {  // null|X - syntax error in bound
          return 1
      }
    bound: ' extends null|X'

  - use: |-
      if (a.meth<Y<X>|null>(null, new Y<X>()) !== null) { // null is not in Object bound
          return 1
      }
    bound: ' extends Object'

  # type argument is interface
  - use: |-
      let v: I = new X()
      if (a.meth<J>(v, v) !== v) {  // J is not I
          return 1
      }

  - use: |-
      if (a.meth<I|null>(null, null) !== null) {  // null out of bound
          return 1
      }
    bound: ' extends X'

  - use: |-
      let v: J|null = null
      if (a.meth<J|null>(v, new Y<Long>()) !== v) {  // Y<Long> is not J|null
          return 1
      }
    bound: ' extends Object|null'

  # type argument is array of classes, interfaces, enums
  - use: |-
      let v = new I[0]
      if (a.meth<X[]>(v, new X[0]) !== v) {  // I[] is not X[]
          return 1
      }

  - use: |-
      let v: I[]|null = new I[0]
      if (a.meth<I[]>(v, v) !== v) {  // I[]|null is not I[]
          return 1
      }

  - use: |-
      let v: Object[]|null = new Color[0]
      if (a.meth<Color[]>(v, [Color.Blue]) !== v) {  // Object[]|null is not Color[]
          return 1
      }
    bound: ' extends Object[]|null'

  # type argument is alias
  - use: |-
      let v = new X()
      if (a.meth<B>(v, new Y<J>()) !== v) {  // X is superclass for Y<J>
          return 1
      }
    decl: |-
      type B = Y<J>

  - use: |-
      let v: I = new X()
      if (a.meth<B>(v, v) !== v) {  // J is not I
          return 1
      }
    decl: |-
      type B = J

  - use: |-
      let v = new X[0]
      if (a.meth<B|null>(v, v) !== v) {  // B|null is out of bound
          return 1
      }
    decl: |-
      type B = X[]
    bound: ' extends Object[]'

  # not a reference type
  - use: |-
      let v = Color.Red
      let q = Color.Blue
      if (a.meth<Color>(q, v) != v) {
          return 1;
      }
