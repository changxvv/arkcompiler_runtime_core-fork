---
cases:
  - defs: |-
      class Ex extends Exception {}
    use: |-
      let p: Object = new Ex();
      try {
          if (t1 != t2) throw p as Exception;
          return 1;
      } catch (e: Ex) {
          // ok, expected
          return 0;
      } catch (e) {
          assert false : "Unexpected catch clause";
      }
      return 1;

  - defs: |-
      interface Ie {}
      class Ex extends Exception implements Ie {}
    use: |-
      let p: Ie = new Ex();
      try {
          if (t1 != t2) throw p as Exception;
          return 1;
      } catch (e: Ex) {
          // ok, expected
          return 0;
      } catch (e) {
          assert false : "Unexpected catch clause";
      }
      return 1;

  - defs: |-
      class Ex extends Exception {}
    use: |-
      try {
          if (t1 != t2) throw new Ex();
          return 1;
      } catch (e) {
          // ok, expected
          return 0;
      }

  - defs: |-
      class Ex extends Exception {}
    use: |-
      try {
          if (t1 != t2) throw new Ex();
          return 1;
      } catch (e: NullPointerError) {
          return 1;
      } catch (e: Ex) {
          // ok, expected
          return 0;
      } catch (e) {
          return 1;
      }

  - defs: |-
      class Ex extends Exception {}
    use: |-
      let v = 0;
      try {
          try {
              if (t1 != t2) throw new Ex();
              return 1;
          } catch (e: NullPointerError) {
              return 1;
          } catch (e: Exception) {
              // ok, expected
              v++;
              throw e;
          }
      } catch (e: NullPointerError) {
          return 1;
      } catch (e: Ex) {
          // ok, expected
          v++;
      } catch (e) {
          return 1;
      }
      if (v == 2) {
          return 0;
      }
      return 1;

  - defs: |-
      class Ex extends Exception {}
      let e: Ex = new Ex();
      function foo(): void throws {
          try {
              bar();
          } catch (f: Exception) {
              throw f;
          } catch (f: Error) {
              return;
          }
      }
      function bar(): void throws {
          try {
              throw e;
          } catch (p: Ex) {
              throw p;
          } catch (p) {
              return;
          }
      }
    use: |-
      try {
          foo();
          return 1;
      } catch (e: Error) {
          return 1;
      } catch (e: Ex) {
          // ok, expected
          return 0;
      } catch (e) {
          return 1;
      }
