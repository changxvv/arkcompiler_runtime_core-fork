---
cases:
  # Ex catch goes twice
  - defs: |-
      class Ex extends Exception {}
      class Fx extends Error {}

    use: |-
      try {
          if (1 != 2) throw new Ex();
          return 0;
      } catch (e1: Ex) {
          return 0;
      } catch (f: Fx) {
          return 0;
      } catch (e2: Ex) {
          return 0;
      } catch (e) {
          return 0;
      }
      return 0;

  # default catch is not the last
  - defs: |-
      class Ex extends Exception {}
      class Fx extends Error {}

    use: |-
      try {
          if (1 != 2) throw new Ex();
          return 0;
      } catch (e: Ex) {
          return 0;
      } catch (e) {
          return 0;
      } catch (f: Fx) {
          return 0;
      }
      return 0;

  # Ex is not an exception nor error
  - defs: |-
      class Ex {}
      class Fx extends Error {}

    use: |-
      try {
          if (1 != 2) throw new Fx();
          return 0;
      } catch (e: Ex) {
          return 0;
      } catch (f: Fx) {
          return 0;
      }
      return 0;

  # main is not a throwing function but try doesn't have default catch clause
  - defs: |-
      class Ex extends Exception {}
      class Fx extends Exception {}

    use: |-
      try {
          if (1 != 2) throw new Fx();
          return 0;
      } catch (e: Ex) {
          return 0;
      }
      return 0;

  # parameterized class is not allowed
  - defs: |-
      class Ex<T> extends Exception {}

    use: |-
      let exc: Ex<Long> = new Ex<Long>();
      try {
          if (1 != 2) throw exc;
          return 0;
      } catch (e: Ex<Long>) {
          return 0;
      } catch (e) {
          return 0;
      }
      return 0;
