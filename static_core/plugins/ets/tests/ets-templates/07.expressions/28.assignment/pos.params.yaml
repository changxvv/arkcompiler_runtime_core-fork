---
cases:
  - expr: |-
      let x = 1
      let y = 2
      x = x = x = x = x = x = y * 2
      if (x != 4) {
          return 1
      }
  - expr: |-
      let x = 1
      let y = 2
      x = y = x = y = x = y = x + y
      if (x != 3 || y != 3) {
          return 1
      }
  - expr: |-
      let x: int[] = [5, 5]
      let y = 2
      x[--y] = x[--y] = y
      if (y != 0 || x[0] != 0 || x[1] != 0) {
          return 1
      }
  - expr: |-
      let s: String = "a"
      if ((s += s += s += "b") != "aaab") {
          return 1
      }
  - defs: |-
      class A {
          public fld: int[] = [5, 5]
      }
    expr: |-
      let a: A = new A()
      let y = 2
      a.fld[--y] = a.fld[--y] = y
      if (y !=0 || a.fld[0] != 0 || a.fld[1] != 0) {
          return 1
      }
