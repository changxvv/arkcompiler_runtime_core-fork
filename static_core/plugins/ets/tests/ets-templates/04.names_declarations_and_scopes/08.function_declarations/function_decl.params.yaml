--- # List of valid function declarations
function_decls:
    # no params, void return type
    - decl: |-
        function foo(): void {}
      call: |-
        foo();

    - decl: |-
        function foo() {}
      call: |-
        foo();

    # no params, return value type
    - decl: |-
        function foo(): int { return 0; }
      call: |-
        let i = foo();
        assert i == 0;

    # no params, return value type array
    - decl: |-
        function foo(): int[] { return new int[1]; }
      call: |-
        let arr: int[] = foo();
        assert arr instanceof int[] && arr.length == 1;

    # no params, return function
    - decl: |-
        function bar() {}
        function foo(): () => void {
            return bar;
        }
      call: |-
        let f: () => void = foo();
        assert f instanceof (() => void);

    # no params, return function array
    - decl: |-
        type BarType = () => void
        function bar() {}
        function foo(): BarType[] {
            let arr: BarType[] = new BarType[1]
            arr[0] = bar
            return arr;
        }
      call: |-
        let f: BarType[] = foo();
        assert f instanceof BarType[] && f.length == 1;


    # no params, return reference type
    - decl: |-
        function foo(): Long { return new Long(); }
      call: |-
        let f: Long = foo();
        assert f instanceof Long;

    - decl: |-
        function foo(): Object|null { return null; }
      call: |-
        let f: Object|null = foo();
        assert f == null;

    # no params, return reference type array
    - decl: |-
        function foo(): Long[] { return new Long[0]; }
      call: |-
        let f: Long[] = foo();
        assert f instanceof Long[] && f.length == 0;

    - decl: |-
        function foo(): (Object|null)[] {
            let arr: (Object|null)[] = new (Object|null)[0]
            return arr;
        }
      call: |-
        let f: (Object|null)[] = foo();
        assert f instanceof (Object|null)[] && f.length == 0;

    # no params, return enum
    - decl: |-
        enum Color { Red, Green, Blue }
        function foo(): Color { return Color.Red; }
      call: |-
        let e: Color  = foo();
        assert e == Color.Red;

    # no params, return enum array
    - decl: |-
        enum Color { Red, Green, Blue }
        function foo(): Color[] {
            let arr: Color[] = new Color[1]
            arr[0] = Color.Red
            return arr;
        }
      call: |-
        let arr: Color[] = foo();
        assert arr instanceof Color[] && arr.length == 1 && arr[0] == Color.Red;
