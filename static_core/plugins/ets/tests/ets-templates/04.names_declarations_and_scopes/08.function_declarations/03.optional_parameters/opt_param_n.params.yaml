---
cases:
    - decl: |-
          function foo(p?: int) {}  // CTE, primitive
      call: foo(1)

    - decl: |-
          type XYZ=number
          function foo(p?: XYZ) {}  // CTE, primitive with alias
      call: foo(1.55)

    - decl: |-
          function foo(i: int, j: long, k?: boolean) {}  // CTE, multiple primitive args
      call: foo(1, 2, false)

    - decl: |-
          enum Color {Red, Green, Blue}
          function foo(c?: Color) {}  // CTE, enums are not references
      call: foo(Color.Blue)

    - decl: |-
          enum Color {Red, Green, Blue}
          type XYZ=Color
          function foo(c?: XYZ) {} // CTE, enums are not references
      call: foo(Color.Blue)

    - decl: |-
          function foo(p?: Object, q: Object) {}  // CTE, default before required
      call: foo(new Object(), new Object())

    - decl: |-
          function foo(p: string = 'abc', q: string) {}  // CTE, default before required
      call: foo('def', 'ghi')

    - decl: |-
          function foo(e: string = 'abc') {
              e = null;    // CTE, cannot assign null to string type
          }
      call: foo()

    - decl: |-
          function foo(e: string = 'abc') {}
      call: 'foo(null)  // CTE, cannot set null for string type'

    - decl: |-
          function foo(e?: string = 'abc') {} // CTE, ambiguity
      call: foo()

    - decl: |-
          function foo(e?: string) {}
      call: 'foo(null)  // CTE, cannot set null to string type'
