---
cases:
  - decl: 'const INT = 1 + 2 + 3 * 4;  // inferred int'
    assert: new Int(INT).unboxed() == 15

  - decl: 'let DOUBLE = 3.0 / 2.0;  // inferred double'
    assert: new Double(DOUBLE).unboxed() == 1.5

  - decl: 'const arr = new long[1];  // inferred array of longs'
    assert: new Long(arr[0]).unboxed() == 0 as long

  - decl: 'let arr = new Object[1];  // inferred array of Objects'
    use: ' arr[0] = new Object();'
    assert: arr[0] instanceof Object

  - decl: 'let arr = new (Error|null)[1];  // inferred array of Error|null'
    assert: arr[0] == null

  - decl: 'const obj = new Object[1];  // inferred array of Objects'
    use: 'obj[0] = new Long(Long.MAX_VALUE);'
    assert: obj instanceof Object[] && obj[0] instanceof Long && obj[0].unboxed() == Long.MAX_VALUE

  - decl: 'let arr = new byte[1][2][3];  // inferred three-dimensional array of bytes'
    assert: arr instanceof byte[][][] and byte[0][0][0] == 0

  - decl: |-
      enum Color { Red, Green, Blue }
      let c = Color.Red;  // inferred enum type
      let d: Color = c;
    assert: c == d

  - decl: |-
      class A {}
      class B extends A {}
      let a = new A();  // inferred type A
      const b = new B();  // inferred type B
    use: a = b;
    assert: a instanceof A && b instanceof B && a === b
