import { E } from "std/math";

{%- for number, param in item.param_list.items() %}
const TEST_DATA_{{.number|upper}} : {{.item.param_init_data_types[number]}} = {{.item.param_list[number]}};
{%- endfor %}
const TEST_DATA_EXPECTED : {{.item.expected_data_type}} = {{.item.expected_test_data}};

function main(): int {
  let exp_idx : int = 0
{%- if item.max_attempt is defined %}
  let max_test : int = {{.item.max_attempt}}
{%- else %}
{% if item.param_list | length > 0 %}
   let max_step : int = TEST_DATA_{{.item.param_list.keys()|first|upper}}.length;
{% else %}
  let max_step : int = TEST_DATA_EXPECTED.length;
{%- endif %}
{%- endif %}
  let max_test : int = TEST_DATA_EXPECTED.length;
  let passed_counter : int = 0;
  for (let i = 0; i < max_step; i++) {
{%- for number, param in item.param_list.items() %}
{%- if item.param_nature[number] == "object" %}
    let {{.number}} : {{.item.param_types[number]}} = new {{.item.param_types[number]}}(TEST_DATA_{{.number|upper}}[i]);
{% else %}
    let {{.number}} : {{.item.param_types[number]}} = TEST_DATA_{{.number|upper}}[i];
{%- endif %}
{%- endfor %}
    let actual : {{.item.method_return_type}} = {{.item.object_type}}.{{.item.method_name}}({{.item.param_list.keys()|list|join(', ')}});
  {%- for number, param in item.param_list.items() %}
//      console.print("{{.number}} = " + {{.number}} + ";");
  {%- endfor %}
//      console.print("ACTUAL:" + actual + ";");
//      console.print("EXPECTED:" + TEST_DATA_EXPECTED[exp_idx] + ";");
   if ({{.item.verify_test_result_function}}(actual, TEST_DATA_EXPECTED[exp_idx])) {
      console.print("PASSED");
      passed_counter++;
   } else {
      console.print("FAILED")
   }
  console.println();
  exp_idx++;
  }
  assert passed_counter  == max_test;
  return 0;

}

