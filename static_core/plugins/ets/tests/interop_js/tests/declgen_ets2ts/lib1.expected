/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const exports: any;

import { Lib2Class, Lib2Class2, DoubleAlias } from ".//lib2";

function _$init$_(): void { return {} as any; };
(_$init$_ as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', '_$init$_');
export {_$init$_};
exports._$init$_ = _$init$_;
_$init$_();

function SumDouble(a: number, b: number): number { return {} as any; };
(SumDouble as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'SumDouble');
export {SumDouble};
exports.SumDouble = SumDouble;


function SumBoxedDouble(a: number, b: number): number { return {} as any; };
(SumBoxedDouble as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'SumBoxedDouble');
export {SumBoxedDouble};
exports.SumBoxedDouble = SumBoxedDouble;


function SumString(a: string, b: string): string { return {} as any; };
(SumString as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'SumString');
export {SumString};
exports.SumString = SumString;


function Identity<T>(x: T): T { return {} as any; };
(Identity as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'Identity');
export {Identity};
exports.Identity = Identity;


function ForEach<T extends Object>(a: T[], cb: (p1: T, p2: number) => void): void { return {} as any; };
(ForEach as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'ForEach');
export {ForEach};
exports.ForEach = ForEach;


function ReplaceFirst(arr: Simple[], e: Simple): Simple[] { return {} as any; };
(ReplaceFirst as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'ReplaceFirst');
export {ReplaceFirst};
exports.ReplaceFirst = ReplaceFirst;


function AsyncIdentity(param: number): Promise<number> { return {} as any; };
(AsyncIdentity as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'AsyncIdentity');
export {AsyncIdentity};
exports.AsyncIdentity = AsyncIdentity;


function AsyncIdentity$asyncimpl(param: number): any { return {} as any; };
(AsyncIdentity$asyncimpl as any) = (globalThis as any).Panda.getFunction('LETSGLOBAL;', 'AsyncIdentity$asyncimpl');
export {AsyncIdentity$asyncimpl};
exports.AsyncIdentity$asyncimpl = AsyncIdentity$asyncimpl;


class Fields {
    public readonlyBoolean_: boolean = {} as any;
    public static staticFloat_: number = {} as any;
    public double_: number = {} as any;
    public doubleAlias_: number = {} as any;
    public int_: number = {} as any;
    public string_: string = {} as any;
    public nullableString_: string | null = {} as any;
    public object_: Object = {} as any;
    public rangeError_: RangeError = {} as any;
    public uint8Array_: Uint8Array = {} as any;
    public uint16Array_: Uint16Array = {} as any;
    public uint32Array_: Uint32Array = {} as any;
    constructor() {};
};
(Fields as any) = (globalThis as any).Panda.getClass('LFields;');
export {Fields};
exports.Fields = Fields;

class Methods {
    public IsTrue(a: boolean): boolean { return {} as any; };
    public SumString(a: string, b: string): string { return {} as any; };
    public static StaticSumDouble(a: number, b: number): number { return {} as any; };
    public SumIntArray(a: number[]): number { return {} as any; };
    public OptionalString(a?: string | null): string | null { return {} as any; };
    public SumIntVariadic(a: number, ...b: number[]): number { return {} as any; };
    constructor() {};
};
(Methods as any) = (globalThis as any).Panda.getClass('LMethods;');
export {Methods};
exports.Methods = Methods;

export enum ETSEnum {
    Val0 = 0,
    Val1 = 1,
    Val2 = 2,
}

export interface I0 {
    I0Method(a: string): string;
}

export interface I1 {
    I1Method(a: number): number;
}

class Base {
    public a: number = {} as any;
    public constructor(a: number) {};
};
(Base as any) = (globalThis as any).Panda.getClass('LBase;');
export {Base};
exports.Base = Base;

class Derived extends Base implements I0, I1 {
    public I0Method(a: string): string { return {} as any; };
    public I1Method(a: number): number { return {} as any; };
    public b: number = {} as any;
    public constructor(a: number, b: number){ super(...{} as (ConstructorParameters<typeof Base>)); };
};
(Derived as any) = (globalThis as any).Panda.getClass('LDerived;');
export {Derived};
exports.Derived = Derived;

export interface Interface0 {
    a(): void;
    b(): void;
    d(): void;
}

class Simple {
    public constructor(x: number) {};
    public val: number = {} as any;
};
(Simple as any) = (globalThis as any).Panda.getClass('LSimple;');
export {Simple};
exports.Simple = Simple;

class External {
    public constructor() {};
    public o1: Simple = {} as any;
    public o2: Lib2Class = {} as any;
    public o3: Lib2Class2 = {} as any;
};
(External as any) = (globalThis as any).Panda.getClass('LExternal;');
export {External};
exports.External = External;

class GenericClass<T extends Object> {
    public identity(x: T): T { return {} as any; };
    constructor() {};
};
(GenericClass as any) = (globalThis as any).Panda.getClass('LGenericClass;');
export {GenericClass};
exports.GenericClass = GenericClass;

export interface IGeneric0<T> {
    I0Method(a: T): T;
}

export interface IGeneric1<T> {
    I1Method(a: T): T;
}

class BaseGeneric<T, U> {
    public c: T = {} as any;
    public d: U = {} as any;
    public constructor(c: T, d: U) {};
};
(BaseGeneric as any) = (globalThis as any).Panda.getClass('LBaseGeneric;');
export {BaseGeneric};
exports.BaseGeneric = BaseGeneric;

class DynObjWrapper {
    public dynObj_: any = {} as any;
    constructor() {};
};
(DynObjWrapper as any) = (globalThis as any).Panda.getClass('LDynObjWrapper;');
export {DynObjWrapper};
exports.DynObjWrapper = DynObjWrapper;

class PromiseWrapper {
    public promise_: Promise<string> = {} as any;
    constructor() {};
    public static lambda$invoke$0: any;
};
(PromiseWrapper as any) = (globalThis as any).Panda.getClass('LPromiseWrapper;');
export {PromiseWrapper};
exports.PromiseWrapper = PromiseWrapper;

