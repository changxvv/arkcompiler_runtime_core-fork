/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file. DO NOT EDIT

package escompat;

class Int8ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int
    private idx: int = 0

    constructor(parent: Int8Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Int8ArrayIterator implements IterableIterator<Number> {
    private parent: Int8Array
    private idx: int = 0

    constructor(parent: Int8Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.length as int) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent[this.idx++]))
    }
}

/**
 * JS Int8Array API-compatible class
 */
export final class Int8Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 1

    /**
     * Creates an empty Int8Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Int8Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLength = arr.length * Int8Array.BYTES_PER_ELEMENT as int
        this.length = arr.length
        this.buffer = new ArrayBuffer(this.byteLength as int)
        this.byteOffset = 0
        for (let i: int = 0; i < this.length as int; ++i) {
            this.setUnsafe(i, arr.$_get(i).byteValue())
        }
    }

    /**
     * Creates an Int8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type byte in newly created Int8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        let intLength: int
        if (length != undefined) {
            intLength = length.intValue()
            if (intLength > intByteLength / Int8Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Int8Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Int8Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Int8Array.BYTES_PER_ELEMENT as int
        }
        this.byteLength = intByteLength
        this.byteOffset = intByteOffset
        this.length = intLength
        this.buffer = buf
    }

    /**
     * Creates an Int8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type byte in newly created Int8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Int8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type byte in newly created Int8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Int8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type byte in newly created Int8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Int8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type byte in newly created Int8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Int8Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Int8Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLength = (buf as ArrayBuffer).getByteLength()
            if (this.byteLength % Int8Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 1 as Int8Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Int8Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLength = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLength % Int8Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 1 as Int8Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Int8Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLength = arr.length as int * Int8Array.BYTES_PER_ELEMENT as int
            this.length = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLength as int)
            this.byteOffset = 0
            for (let i: int = 0; i < this.length as int; ++i) {
                this.setUnsafe(i, arr.$_get(i).byteValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an Int8Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.length = length
        this.byteLength = length * Int8Array.BYTES_PER_ELEMENT as int
        this.byteOffset = 0
        this.buffer = new ArrayBuffer(this.byteLength as int)
    }

    /**
     * Creates an Int8Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Int8Array.
     *
     * @param other data initializer
     */
    public constructor(other: Int8Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLength = other.byteLength
        this.length = other.length
        this.byteOffset = 0
    }

    internal zeroIfInfinity(val: number): number {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as number
        }
        return val as number
    }

    internal zeroIfInfinity(val: byte): byte {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as byte
        }
        return val
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v as byte)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val as byte)
        this.setUnsafe(index, v as byte)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: byte): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: byte): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: int): number {
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        return this.getUnsafe(index) as number
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index;
        } else {
            k = this.length as int + index
        }
        if (k < 0 || k >= this.length as int) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Int8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Int8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Int8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Int8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Int8Array {
        let toPos = normalizeIndex(target, this.length as int)
        let fromPos = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        let count: int = finalPos - fromPos
        if (count > (this.length as int - toPos)) {
            count = this.length as int - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Int8Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Int8Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Int8Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Int8Array {
        return this.copyWithin(target, 0, this.length as int)
    }

    /**
     * Returns an iterator for all entries
     */
    /* public */ internal entries(): IterableIterator<Entry<Int, Byte>> {
        throw new Error("not implemented")
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: number, start?: number, end?: number): Int8Array {
        return this.fill(value as byte, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: number, start: int, end?: number): Int8Array {
        return this.fill(value as byte, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: number, start: int, end: number): Int8Array {
        return this.fill(value as byte, start as int, end as int)
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: number, start: number, end: int): Int8Array {
        return this.fill(value as byte, start as int, end as int)
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: number, start: int, end: int): Int8Array {
        return this.fill(value as byte, start as int, end as int)
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: byte, start?: number, end?: number): Int8Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: byte, start: int, end?: number): Int8Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: byte, start: int, end: number): Int8Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: byte, start: number, end: int): Int8Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Int8Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int8Array
     */
    public fill(value: byte, start: int, end: int): Int8Array {
        const k = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(byte[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos, val)
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(byte[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: int, val: byte): void {
        this.$_set(insertPos, val)
    }

    /**
     * Copies all elements of arr to the current Int8Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos: number): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos as int + i, v as byte)
        }
    }

    /**
     * Copies all elements of arr to the current Int8Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: byte[], insertPos: int): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current Int8Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0 as number)
    }

    /**
     * Copies all elements of arr to the current Int8Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: byte[]): void {
        this.set(arr, 0 as int)
    }

    /**
     * Creates an Int8Array from array-like argument
     *
     * @param o array-like object to initialize Int8Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Int8Array
     */
    public from(o: Object, mapFn: (e: Object) => byte): Int8Array {
        let newF: (e: Object, index: number) => byte =
            (e: Object, index: number): byte => { return mapFn(e) }
        return this.from(o, newF)
    }

    /**
     * Creates an Int8Array from array-like argument
     *
     * @param o array-like object to initialize Int8Array
     *
     * @returns new Int8Array
     */
    public from(o: Object): Int8Array {
        throw new Error("Int8Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Int8Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Int8Array, false otherwise
     */
    public includes(e: number, fromIndex?: Number): boolean {
        if (fromIndex == undefined) {
            return this.includes(e as byte, 0 as int)
        }
        return this.includes(e as byte, fromIndex.intValue())
    }

    /**
     * Checks if specified argument is in Int8Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Int8Array, false otherwise
     */
    public includes(e: byte, fromIndex: int): boolean {
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return false;
            }
            if (tmp.byteValue() == e) {
                return true
            }
        }
        return false
    }

    /**
     * Checks if specified argument is in Int8Array
     *
     * @param e search element
     *
     * @returns true if e is in Int8Array, false otherwise
     */
    public includes(e: byte): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.indexOf(e as byte, 0)
        }
        return this.indexOf(e as byte, fromIndex.intValue())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: byte, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            return -1
        }
        if (fromIndex < 0) {
            fromIndex += this.length as int
            // See TypedArray.indexOf JS docs
            if (fromIndex < 0) {
                fromIndex = 0
            }
        }
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.byteValue() == e) {
                return i
            }
        }
        return -1
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: byte): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.length as int - 1; ++i) {
            res.append(this.getUnsafe(i) as number)
            res.append(s)
        }
        if (this.length as int > 0) {
            res.append(this.getUnsafe(this.length as int - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Int8Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Int8ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.lastIndexOf(val as byte, 0 as int)
        }
        return this.lastIndexOf(val as byte, fromIndex.intValue()) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: byte, fromIndex: number): number {
        return this.lastIndexOf(val, fromIndex as int) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: byte, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            fromIndex = this.length as int - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.length as int + fromIndex
        }

        for (let i = fromIndex; i >= 0; --i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.byteValue() == val) {
                return i
            }
        }
        return -1
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: byte): int {
        return this.lastIndexOf(val, this.length as int - 1)
    }

    /**
    * Creates a new Int8Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Int8Array from data
    */
    public of(data: Object[]): Int8Array {
        throw new Error("Int8Array.of: not implemented")
    }

    /**
     * Creates a new Int8Array using reversed data from the current one
     *
     * @returns a new Int8Array using reversed data from the current one
     */
    public reverse(): Int8Array {
        for (let i: int = 0; i < this.length as int / 2 as int; i++) {
            const tmp = this.getUnsafe(this.length as int - 1 - i)
            this.setUnsafe(this.length as int - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Int8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Int8Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a slice of current Int8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Int8Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Int8Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Int8Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Int8Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Int8Array.BYTES_PER_ELEMENT as int, relEnd * Int8Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Int8Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Int8Array.BYTES_PER_ELEMENT as int, relEnd * Int8Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Int8Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Int8Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin, this.length)
     */
    public slice(begin: number): Int8Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Int8Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Int8Array with elements of current Int8Array[begin, this.length)
     */
    public slice(begin: int): Int8Array {
        return this.slice(begin, this.length as int)
    }

    /**
     * Creates a Int8Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int8Array with the same underlying ArrayBufferLike
     */
    public subarray(begin?: number, end?: number): Int8Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a Int8Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int8Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: number): Int8Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int8Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int8Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: int): Int8Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int8Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int8Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: number): Int8Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int8Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int8Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: int): Int8Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Int8Array(this.buffer, relStart * Int8Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Int8Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Int8Array with the same ArrayBufferLike
     */
    public subarray(begin: number): Int8Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Creates a Int8Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Int8Array with the same ArrayBufferLike
     */
    public subarray(begin: int): Int8Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Converts Int8Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Int8Array.toLocaleString: not implemented")
    }

    /**
     * Converts Int8Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Int8Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Int8Array {
        return new Int8Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Int8Array {
        return new Int8Array(this).sort()
    }

    /**
     * Returns a string representation of the Int8Array
     *
     * @returns a string representation of the Int8Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
        return new Int8ArrayIterator(this)
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Int8Array with replaced value on index
     */
    public with(index: number, value: number): Int8Array {
        return this.with(index as int, value as byte)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Int8Array with replaced value on index
     */
    public with(index: int, value: byte): Int8Array {
        let res = new Int8Array(this)
        res.set(index, value)
        return res
    }

    /// === with element lambda functions ===
    /**
     * Checks that all elements of Int8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int8Array) => boolean =
            (element: number, index: number, array: Int8Array): boolean => { return fn(element) }
        return this.every(newF)
    }

    /**
     * creates a new Int8Array from current Int8Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int8Array with elements from current Int8Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Int8Array {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val) }
        return this.findLast(newF) as number
    }

    /**
     * Finds an index of the last element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Int8Array
     *
     * @param fn function to apply
     *
     */
    public forEach(fn: (val: number) => byte): void {
        let newF: (val: number, index: number, array: Int8Array) => byte =
            (val: number, index: number, array: Int8Array): byte => { return fn(val) }
        this.forEach(newF)
    }

    /**
     * Creates a new Int8Array using fn(arr[i]) over all elements of current Int8Array
     *
     * @param fn a function to apply for each element of current Int8Array
     *
     * @returns a new Int8Array where for each element from current Int8Array fn was applied
     */
    public map(fn: (val: number) => number): Int8Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Int8Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int8Array) => boolean =
            (element: number, index: number, array: Int8Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    // NOTE (kprokopenko): this may be not skipped
    /**
     * Sorts in-place
     *
     * @param fn comparator —  used to determine the order of the elements.
     * fn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     * If omitted, the elements are sorted in ascending order.
     *
     * @returns sorted Int8Array
     */
    public sort(fn?: (a: number, b: number) => number): Int8Array {
        let arr: byte[] = new byte[this.length as int]
        for (let i = 0; i < this.length as int; ++i) {
            arr[i] = this.getUnsafe(i)
        }
        if (fn == undefined) {
            // NOTE (ikorobkov): needs to add signature for sort(byte[])
            //sort(arr)
            for (let i = 0; i < this.length as int; ++i) {
                this.set(i, arr[i])
            }
        }
        else {
            // NOTE(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
            // let mustPrecede: (a: byte, b: byte) => boolean =
            //     (a: byte, b: byte): boolean => { return (fn(a, b) <= 0) }
            // sort(arr, mustPrecede)
            // for (let i = 0; i < this.length as int; ++i) {
            //     this.set(i, arr[i])
            // }
        }
        return this
    }

    /**
     * Checks that at least one element of Int8Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Int8Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Int8Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int8Array) => boolean =
            (element: number, index: number, array: Int8Array): boolean => { return fn(element, index as number) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Int8Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Int8Array) => number): number {
        let acc = this.getUnsafe(0) as number
        for (let i = 1; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Int8Array) => number, init: number): number {
        let acc = init as number
        for (let i = this.length as int - 1; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Int8Array) => number): number {
        let acc: number = this.getUnsafe(this.length as int - 1) as number
        for (let i = this.length as int - 2; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Creates a new Int8Array using fn(arr[i]) over all elements of current Int8Array.
     *
     * @param fn a function to apply for each element of current Int8Array
     *
     * @returns a new Int8Array where for each element from current Int8Array fn was applied
     */
    public map(fn: (val: number, index: number) => number): Int8Array {
        let resBuf = new ArrayBuffer(this.length as int * Int8Array.BYTES_PER_ELEMENT as int)
        let res = new Int8Array(resBuf, 0, resBuf.getByteLength() / Int8Array.BYTES_PER_ELEMENT as int)
        for (let i = 0; i < this.length as int; ++i) {
            res.set(i, fn(this.getUnsafe(i) as number, i as number) as byte)
        }
        return res
    }

    /**
     * Checks that all elements of Int8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Int8Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Int8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int8Array) => boolean =
            (element: number, index: number, array: Int8Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Checks that all elements of Int8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: () => boolean): boolean {
        let newF: (element: number, index: number, array: Int8Array) => boolean =
            (element: number, index: number, array: Int8Array): boolean => { return fn() }
        return this.every(newF)
    }

    /**
     * Creates a new Int8Array from current Int8Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int8Array with elements from current Int8Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Int8Array) => boolean): Int8Array {
        let markers = new boolean[this.length as int]
        let resLen = 0
        for (let i = 0; i < this.length as int; ++i) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let resBuf = new ArrayBuffer(resLen * Int8Array.BYTES_PER_ELEMENT as int)
        let res = new Int8Array(resBuf, 0)
        for (let i = 0, j = 0; i < this.length as int; ++i) {
            if (markers[i]) {
                res.set(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Int8Array from current Int8Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int8Array with elements from current Int8Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Int8Array {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val, index as number) }
        return this.filter(newF)
    }

    /**
     * creates a new Int8Array from current Int8Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int8Array with elements from current Int8Array that satisfy condition fn
     */
    public filter(fn: () => boolean): Int8Array {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn() }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Int8Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * NOTE: return byte | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Int8Array) => boolean): Number | undefined {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.at(i)
            if (val == undefined) {
                return undefined
            }
            if (fn(val.valueOf(), i as number, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Finds the first element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Int8Array) => boolean): number {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val, index as number) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds an index of the first element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: () => boolean): number {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn() }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Int8Array) => boolean): byte {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return val
            }
        }
        throw new Error("Int8Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): byte {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val as number, index as number) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Int8Array) => boolean): number {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Int8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Int8Array) => boolean =
            (val: number, index: number, array: Int8Array): boolean => { return fn(val, index as number) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Int8Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Int8Array) => byte): void {
        for (let i = 0; i < this.length as int; ++i) {
            fn(this.getUnsafe(i) as number, i as number, this)
        }
    }

    /**
     * Applies a function over all elements of Int8Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => byte): void {
        let newF: (val: number, index: number, array: Int8Array) => byte =
            (val: number, index: number, array: Int8Array): byte => { return fn(val, index as number) }
        this.forEach(newF)
    }

    /**
     * Applies a function over all elements of Int8Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: () => byte): void {
        let newF: (val: number, index: number, array: Int8Array) => byte =
            (val: number, index: number, array: Int8Array): byte => { return fn() }
        this.forEach(newF)
    }

    /**
     * Creates an Int8Array from array-like argument
     *
     * @param o array-like object to initialize Int8Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Int8Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => byte): Int8Array {
        throw new Error("Int8Array.from: not implemented")
    }

    internal getUnsafe(index: int): byte {
        let byteIndex = index * Int8Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let res : byte = 0
        let byteVal : byte;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Int8Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + i)
                    res = (res | byteVal << (8 * i)) as byte;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Int8Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + i)
                    res = (res | byteVal << (8 * i)) as byte;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Int8Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + 0 - i)
                    res = (res | byteVal << (8 * i)) as byte;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Int8Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + 0 - i)
                    res = (res | byteVal << (8 * i)) as byte;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        }
    }

    internal setUnsafe(insertPos: int, val: byte): void {
        let startByte = insertPos * Int8Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let bits = val;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Int8Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + i, byteVal)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Int8Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + i, byteVal)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Int8Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + 0 - i, byteVal);
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Int8Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + 0 - i, byteVal);
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }

    /** Underlying ArrayBufferLike */
    public readonly buffer: ArrayBufferLike

    /** Byte offset within the underlying ArrayBufferLike */
    public readonly byteOffset: number

    /** Number of bytes used */
    public readonly byteLength: number

    /** Number of byte stored in Int8Array */
    public readonly length: number

    /** String \"Int8Array\" */
    public readonly name = "Int8Array"
}

class Int16ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int
    private idx: int = 0

    constructor(parent: Int16Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Int16ArrayIterator implements IterableIterator<Number> {
    private parent: Int16Array
    private idx: int = 0

    constructor(parent: Int16Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.length as int) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent[this.idx++]))
    }
}

/**
 * JS Int16Array API-compatible class
 */
export final class Int16Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 2

    /**
     * Creates an empty Int16Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Int16Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLength = arr.length * Int16Array.BYTES_PER_ELEMENT as int
        this.length = arr.length
        this.buffer = new ArrayBuffer(this.byteLength as int)
        this.byteOffset = 0
        for (let i: int = 0; i < this.length as int; ++i) {
            this.setUnsafe(i, arr.$_get(i).shortValue())
        }
    }

    /**
     * Creates an Int16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type short in newly created Int16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % Int16Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 2 as Int16Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % Int16Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 2 as Int16Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length.intValue()
            if (intLength > intByteLength / Int16Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Int16Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Int16Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Int16Array.BYTES_PER_ELEMENT as int
        }
        this.byteLength = intByteLength
        this.byteOffset = intByteOffset
        this.length = intLength
        this.buffer = buf
    }

    /**
     * Creates an Int16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type short in newly created Int16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Int16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type short in newly created Int16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Int16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type short in newly created Int16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Int16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type short in newly created Int16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Int16Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Int16Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLength = (buf as ArrayBuffer).getByteLength()
            if (this.byteLength % Int16Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 2 as Int16Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Int16Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLength = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLength % Int16Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 2 as Int16Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Int16Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLength = arr.length as int * Int16Array.BYTES_PER_ELEMENT as int
            this.length = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLength as int)
            this.byteOffset = 0
            for (let i: int = 0; i < this.length as int; ++i) {
                this.setUnsafe(i, arr.$_get(i).shortValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an Int16Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.length = length
        this.byteLength = length * Int16Array.BYTES_PER_ELEMENT as int
        this.byteOffset = 0
        this.buffer = new ArrayBuffer(this.byteLength as int)
    }

    /**
     * Creates an Int16Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Int16Array.
     *
     * @param other data initializer
     */
    public constructor(other: Int16Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLength = other.byteLength
        this.length = other.length
        this.byteOffset = 0
    }

    internal zeroIfInfinity(val: number): number {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as number
        }
        return val as number
    }

    internal zeroIfInfinity(val: short): short {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as short
        }
        return val
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v as short)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val as short)
        this.setUnsafe(index, v as short)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: short): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: short): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: int): number {
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        return this.getUnsafe(index) as number
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index;
        } else {
            k = this.length as int + index
        }
        if (k < 0 || k >= this.length as int) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Int16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Int16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Int16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Int16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Int16Array {
        let toPos = normalizeIndex(target, this.length as int)
        let fromPos = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        let count: int = finalPos - fromPos
        if (count > (this.length as int - toPos)) {
            count = this.length as int - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Int16Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Int16Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Int16Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Int16Array {
        return this.copyWithin(target, 0, this.length as int)
    }

    /**
     * Returns an iterator for all entries
     */
    /* public */ internal entries(): IterableIterator<Entry<Int, Short>> {
        throw new Error("not implemented")
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: number, start?: number, end?: number): Int16Array {
        return this.fill(value as short, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: number, start: int, end?: number): Int16Array {
        return this.fill(value as short, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: number, start: int, end: number): Int16Array {
        return this.fill(value as short, start as int, end as int)
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: number, start: number, end: int): Int16Array {
        return this.fill(value as short, start as int, end as int)
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: number, start: int, end: int): Int16Array {
        return this.fill(value as short, start as int, end as int)
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: short, start?: number, end?: number): Int16Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: short, start: int, end?: number): Int16Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: short, start: int, end: number): Int16Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: short, start: number, end: int): Int16Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Int16Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int16Array
     */
    public fill(value: short, start: int, end: int): Int16Array {
        const k = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(short[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos, val)
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(short[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: int, val: short): void {
        this.$_set(insertPos, val)
    }

    /**
     * Copies all elements of arr to the current Int16Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos: number): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos as int + i, v as short)
        }
    }

    /**
     * Copies all elements of arr to the current Int16Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: short[], insertPos: int): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current Int16Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0 as number)
    }

    /**
     * Copies all elements of arr to the current Int16Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: short[]): void {
        this.set(arr, 0 as int)
    }

    /**
     * Creates an Int16Array from array-like argument
     *
     * @param o array-like object to initialize Int16Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Int16Array
     */
    public from(o: Object, mapFn: (e: Object) => short): Int16Array {
        let newF: (e: Object, index: number) => short =
            (e: Object, index: number): short => { return mapFn(e) }
        return this.from(o, newF)
    }

    /**
     * Creates an Int16Array from array-like argument
     *
     * @param o array-like object to initialize Int16Array
     *
     * @returns new Int16Array
     */
    public from(o: Object): Int16Array {
        throw new Error("Int16Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Int16Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Int16Array, false otherwise
     */
    public includes(e: number, fromIndex?: Number): boolean {
        if (fromIndex == undefined) {
            return this.includes(e as short, 0 as int)
        }
        return this.includes(e as short, fromIndex.intValue())
    }

    /**
     * Checks if specified argument is in Int16Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Int16Array, false otherwise
     */
    public includes(e: short, fromIndex: int): boolean {
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return false;
            }
            if (tmp.shortValue() == e) {
                return true
            }
        }
        return false
    }

    /**
     * Checks if specified argument is in Int16Array
     *
     * @param e search element
     *
     * @returns true if e is in Int16Array, false otherwise
     */
    public includes(e: short): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.indexOf(e as short, 0)
        }
        return this.indexOf(e as short, fromIndex.intValue())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: short, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            return -1
        }
        if (fromIndex < 0) {
            fromIndex += this.length as int
            // See TypedArray.indexOf JS docs
            if (fromIndex < 0) {
                fromIndex = 0
            }
        }
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.shortValue() == e) {
                return i
            }
        }
        return -1
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: short): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.length as int - 1; ++i) {
            res.append(this.getUnsafe(i) as number)
            res.append(s)
        }
        if (this.length as int > 0) {
            res.append(this.getUnsafe(this.length as int - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Int16Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Int16ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.lastIndexOf(val as short, 0 as int)
        }
        return this.lastIndexOf(val as short, fromIndex.intValue()) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: short, fromIndex: number): number {
        return this.lastIndexOf(val, fromIndex as int) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: short, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            fromIndex = this.length as int - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.length as int + fromIndex
        }

        for (let i = fromIndex; i >= 0; --i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.shortValue() == val) {
                return i
            }
        }
        return -1
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: short): int {
        return this.lastIndexOf(val, this.length as int - 1)
    }

    /**
    * Creates a new Int16Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Int16Array from data
    */
    public of(data: Object[]): Int16Array {
        throw new Error("Int16Array.of: not implemented")
    }

    /**
     * Creates a new Int16Array using reversed data from the current one
     *
     * @returns a new Int16Array using reversed data from the current one
     */
    public reverse(): Int16Array {
        for (let i: int = 0; i < this.length as int / 2 as int; i++) {
            const tmp = this.getUnsafe(this.length as int - 1 - i)
            this.setUnsafe(this.length as int - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Int16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Int16Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a slice of current Int16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Int16Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Int16Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Int16Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Int16Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Int16Array.BYTES_PER_ELEMENT as int, relEnd * Int16Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Int16Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Int16Array.BYTES_PER_ELEMENT as int, relEnd * Int16Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Int16Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Int16Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin, this.length)
     */
    public slice(begin: number): Int16Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Int16Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Int16Array with elements of current Int16Array[begin, this.length)
     */
    public slice(begin: int): Int16Array {
        return this.slice(begin, this.length as int)
    }

    /**
     * Creates a Int16Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int16Array with the same underlying ArrayBufferLike
     */
    public subarray(begin?: number, end?: number): Int16Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a Int16Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int16Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: number): Int16Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int16Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int16Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: int): Int16Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int16Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int16Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: number): Int16Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int16Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int16Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: int): Int16Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Int16Array(this.buffer, relStart * Int16Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Int16Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Int16Array with the same ArrayBufferLike
     */
    public subarray(begin: number): Int16Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Creates a Int16Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Int16Array with the same ArrayBufferLike
     */
    public subarray(begin: int): Int16Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Converts Int16Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Int16Array.toLocaleString: not implemented")
    }

    /**
     * Converts Int16Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Int16Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Int16Array {
        return new Int16Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Int16Array {
        return new Int16Array(this).sort()
    }

    /**
     * Returns a string representation of the Int16Array
     *
     * @returns a string representation of the Int16Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
        return new Int16ArrayIterator(this)
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Int16Array with replaced value on index
     */
    public with(index: number, value: number): Int16Array {
        return this.with(index as int, value as short)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Int16Array with replaced value on index
     */
    public with(index: int, value: short): Int16Array {
        let res = new Int16Array(this)
        res.set(index, value)
        return res
    }

    /// === with element lambda functions ===
    /**
     * Checks that all elements of Int16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int16Array) => boolean =
            (element: number, index: number, array: Int16Array): boolean => { return fn(element) }
        return this.every(newF)
    }

    /**
     * creates a new Int16Array from current Int16Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int16Array with elements from current Int16Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Int16Array {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val) }
        return this.findLast(newF) as number
    }

    /**
     * Finds an index of the last element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Int16Array
     *
     * @param fn function to apply
     *
     */
    public forEach(fn: (val: number) => short): void {
        let newF: (val: number, index: number, array: Int16Array) => short =
            (val: number, index: number, array: Int16Array): short => { return fn(val) }
        this.forEach(newF)
    }

    /**
     * Creates a new Int16Array using fn(arr[i]) over all elements of current Int16Array
     *
     * @param fn a function to apply for each element of current Int16Array
     *
     * @returns a new Int16Array where for each element from current Int16Array fn was applied
     */
    public map(fn: (val: number) => number): Int16Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Int16Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int16Array) => boolean =
            (element: number, index: number, array: Int16Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    // NOTE (kprokopenko): this may be not skipped
    /**
     * Sorts in-place
     *
     * @param fn comparator —  used to determine the order of the elements.
     * fn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     * If omitted, the elements are sorted in ascending order.
     *
     * @returns sorted Int16Array
     */
    public sort(fn?: (a: number, b: number) => number): Int16Array {
        let arr: short[] = new short[this.length as int]
        for (let i = 0; i < this.length as int; ++i) {
            arr[i] = this.getUnsafe(i)
        }
        if (fn == undefined) {
            // NOTE (ikorobkov): needs to add signature for sort(short[])
            //sort(arr)
            for (let i = 0; i < this.length as int; ++i) {
                this.set(i, arr[i])
            }
        }
        else {
            // NOTE(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
            // let mustPrecede: (a: short, b: short) => boolean =
            //     (a: short, b: short): boolean => { return (fn(a, b) <= 0) }
            // sort(arr, mustPrecede)
            // for (let i = 0; i < this.length as int; ++i) {
            //     this.set(i, arr[i])
            // }
        }
        return this
    }

    /**
     * Checks that at least one element of Int16Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Int16Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Int16Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int16Array) => boolean =
            (element: number, index: number, array: Int16Array): boolean => { return fn(element, index as number) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Int16Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Int16Array) => number): number {
        let acc = this.getUnsafe(0) as number
        for (let i = 1; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Int16Array) => number, init: number): number {
        let acc = init as number
        for (let i = this.length as int - 1; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Int16Array) => number): number {
        let acc: number = this.getUnsafe(this.length as int - 1) as number
        for (let i = this.length as int - 2; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Creates a new Int16Array using fn(arr[i]) over all elements of current Int16Array.
     *
     * @param fn a function to apply for each element of current Int16Array
     *
     * @returns a new Int16Array where for each element from current Int16Array fn was applied
     */
    public map(fn: (val: number, index: number) => number): Int16Array {
        let resBuf = new ArrayBuffer(this.length as int * Int16Array.BYTES_PER_ELEMENT as int)
        let res = new Int16Array(resBuf, 0, resBuf.getByteLength() / Int16Array.BYTES_PER_ELEMENT as int)
        for (let i = 0; i < this.length as int; ++i) {
            res.set(i, fn(this.getUnsafe(i) as number, i as number) as short)
        }
        return res
    }

    /**
     * Checks that all elements of Int16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Int16Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Int16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int16Array) => boolean =
            (element: number, index: number, array: Int16Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Checks that all elements of Int16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: () => boolean): boolean {
        let newF: (element: number, index: number, array: Int16Array) => boolean =
            (element: number, index: number, array: Int16Array): boolean => { return fn() }
        return this.every(newF)
    }

    /**
     * Creates a new Int16Array from current Int16Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int16Array with elements from current Int16Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Int16Array) => boolean): Int16Array {
        let markers = new boolean[this.length as int]
        let resLen = 0
        for (let i = 0; i < this.length as int; ++i) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let resBuf = new ArrayBuffer(resLen * Int16Array.BYTES_PER_ELEMENT as int)
        let res = new Int16Array(resBuf, 0)
        for (let i = 0, j = 0; i < this.length as int; ++i) {
            if (markers[i]) {
                res.set(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Int16Array from current Int16Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int16Array with elements from current Int16Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Int16Array {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val, index as number) }
        return this.filter(newF)
    }

    /**
     * creates a new Int16Array from current Int16Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int16Array with elements from current Int16Array that satisfy condition fn
     */
    public filter(fn: () => boolean): Int16Array {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn() }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Int16Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * NOTE: return short | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Int16Array) => boolean): Number | undefined {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.at(i)
            if (val == undefined) {
                return undefined
            }
            if (fn(val.valueOf(), i as number, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Finds the first element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Int16Array) => boolean): number {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val, index as number) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds an index of the first element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: () => boolean): number {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn() }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Int16Array) => boolean): short {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return val
            }
        }
        throw new Error("Int16Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): short {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val as number, index as number) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Int16Array) => boolean): number {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Int16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Int16Array) => boolean =
            (val: number, index: number, array: Int16Array): boolean => { return fn(val, index as number) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Int16Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Int16Array) => short): void {
        for (let i = 0; i < this.length as int; ++i) {
            fn(this.getUnsafe(i) as number, i as number, this)
        }
    }

    /**
     * Applies a function over all elements of Int16Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => short): void {
        let newF: (val: number, index: number, array: Int16Array) => short =
            (val: number, index: number, array: Int16Array): short => { return fn(val, index as number) }
        this.forEach(newF)
    }

    /**
     * Applies a function over all elements of Int16Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: () => short): void {
        let newF: (val: number, index: number, array: Int16Array) => short =
            (val: number, index: number, array: Int16Array): short => { return fn() }
        this.forEach(newF)
    }

    /**
     * Creates an Int16Array from array-like argument
     *
     * @param o array-like object to initialize Int16Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Int16Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => short): Int16Array {
        throw new Error("Int16Array.from: not implemented")
    }

    internal getUnsafe(index: int): short {
        let byteIndex = index * Int16Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let res : short = 0
        let byteVal : short;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Int16Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as short;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Int16Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as short;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Int16Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + 1 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as short;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Int16Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + 1 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as short;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        }
    }

    internal setUnsafe(insertPos: int, val: short): void {
        let startByte = insertPos * Int16Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let bits = val;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Int16Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + i, byteVal)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Int16Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + i, byteVal)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Int16Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + 1 - i, byteVal);
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Int16Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + 1 - i, byteVal);
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }

    /** Underlying ArrayBufferLike */
    public readonly buffer: ArrayBufferLike

    /** Byte offset within the underlying ArrayBufferLike */
    public readonly byteOffset: number

    /** Number of bytes used */
    public readonly byteLength: number

    /** Number of short stored in Int16Array */
    public readonly length: number

    /** String \"Int16Array\" */
    public readonly name = "Int16Array"
}

class Int32ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int
    private idx: int = 0

    constructor(parent: Int32Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Int32ArrayIterator implements IterableIterator<Number> {
    private parent: Int32Array
    private idx: int = 0

    constructor(parent: Int32Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.length as int) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent[this.idx++]))
    }
}

/**
 * JS Int32Array API-compatible class
 */
export final class Int32Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 4

    /**
     * Creates an empty Int32Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Int32Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLength = arr.length * Int32Array.BYTES_PER_ELEMENT as int
        this.length = arr.length
        this.buffer = new ArrayBuffer(this.byteLength as int)
        this.byteOffset = 0
        for (let i: int = 0; i < this.length as int; ++i) {
            this.setUnsafe(i, arr.$_get(i).intValue())
        }
    }

    /**
     * Creates an Int32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Int32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % Int32Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Int32Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % Int32Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 4 as Int32Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length.intValue()
            if (intLength > intByteLength / Int32Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Int32Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Int32Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Int32Array.BYTES_PER_ELEMENT as int
        }
        this.byteLength = intByteLength
        this.byteOffset = intByteOffset
        this.length = intLength
        this.buffer = buf
    }

    /**
     * Creates an Int32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Int32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Int32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Int32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Int32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Int32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Int32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Int32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Int32Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Int32Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLength = (buf as ArrayBuffer).getByteLength()
            if (this.byteLength % Int32Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Int32Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Int32Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLength = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLength % Int32Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Int32Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Int32Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLength = arr.length as int * Int32Array.BYTES_PER_ELEMENT as int
            this.length = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLength as int)
            this.byteOffset = 0
            for (let i: int = 0; i < this.length as int; ++i) {
                this.setUnsafe(i, arr.$_get(i).intValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an Int32Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.length = length
        this.byteLength = length * Int32Array.BYTES_PER_ELEMENT as int
        this.byteOffset = 0
        this.buffer = new ArrayBuffer(this.byteLength as int)
    }

    /**
     * Creates an Int32Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Int32Array.
     *
     * @param other data initializer
     */
    public constructor(other: Int32Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLength = other.byteLength
        this.length = other.length
        this.byteOffset = 0
    }

    internal zeroIfInfinity(val: number): number {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as number
        }
        return val as number
    }

    internal zeroIfInfinity(val: int): int {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as int
        }
        return val
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v as int)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: int): number {
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        return this.getUnsafe(index) as number
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index;
        } else {
            k = this.length as int + index
        }
        if (k < 0 || k >= this.length as int) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Int32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Int32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Int32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Int32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Int32Array {
        let toPos = normalizeIndex(target, this.length as int)
        let fromPos = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        let count: int = finalPos - fromPos
        if (count > (this.length as int - toPos)) {
            count = this.length as int - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Int32Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Int32Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Int32Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Int32Array {
        return this.copyWithin(target, 0, this.length as int)
    }

    /**
     * Returns an iterator for all entries
     */
    /* public */ internal entries(): IterableIterator<Entry<Int, Int>> {
        throw new Error("not implemented")
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: number, start?: number, end?: number): Int32Array {
        return this.fill(value as int, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: number, start: int, end?: number): Int32Array {
        return this.fill(value as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: number, start: int, end: number): Int32Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: number, start: number, end: int): Int32Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: number, start: int, end: int): Int32Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: int, start?: number, end?: number): Int32Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: int, start: int, end?: number): Int32Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: int, start: int, end: number): Int32Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: int, start: number, end: int): Int32Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Int32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Int32Array
     */
    public fill(value: int, start: int, end: int): Int32Array {
        const k = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(int[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos, val)
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(int[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: int, val: int): void {
        this.$_set(insertPos, val)
    }

    /**
     * Copies all elements of arr to the current Int32Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos: number): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos as int + i, v as int)
        }
    }

    /**
     * Copies all elements of arr to the current Int32Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: int[], insertPos: int): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current Int32Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0 as number)
    }

    /**
     * Copies all elements of arr to the current Int32Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: int[]): void {
        this.set(arr, 0 as int)
    }

    /**
     * Creates an Int32Array from array-like argument
     *
     * @param o array-like object to initialize Int32Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Int32Array
     */
    public from(o: Object, mapFn: (e: Object) => int): Int32Array {
        let newF: (e: Object, index: number) => int =
            (e: Object, index: number): int => { return mapFn(e) }
        return this.from(o, newF)
    }

    /**
     * Creates an Int32Array from array-like argument
     *
     * @param o array-like object to initialize Int32Array
     *
     * @returns new Int32Array
     */
    public from(o: Object): Int32Array {
        throw new Error("Int32Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Int32Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Int32Array, false otherwise
     */
    public includes(e: number, fromIndex?: Number): boolean {
        if (fromIndex == undefined) {
            return this.includes(e as int, 0 as int)
        }
        return this.includes(e as int, fromIndex.intValue())
    }

    /**
     * Checks if specified argument is in Int32Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Int32Array, false otherwise
     */
    public includes(e: int, fromIndex: int): boolean {
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return false;
            }
            if (tmp.intValue() == e) {
                return true
            }
        }
        return false
    }

    /**
     * Checks if specified argument is in Int32Array
     *
     * @param e search element
     *
     * @returns true if e is in Int32Array, false otherwise
     */
    public includes(e: int): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.indexOf(e as int, 0)
        }
        return this.indexOf(e as int, fromIndex.intValue())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            return -1
        }
        if (fromIndex < 0) {
            fromIndex += this.length as int
            // See TypedArray.indexOf JS docs
            if (fromIndex < 0) {
                fromIndex = 0
            }
        }
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.intValue() == e) {
                return i
            }
        }
        return -1
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.length as int - 1; ++i) {
            res.append(this.getUnsafe(i) as number)
            res.append(s)
        }
        if (this.length as int > 0) {
            res.append(this.getUnsafe(this.length as int - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Int32Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Int32ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.lastIndexOf(val as int, 0 as int)
        }
        return this.lastIndexOf(val as int, fromIndex.intValue()) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: int, fromIndex: number): number {
        return this.lastIndexOf(val, fromIndex as int) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: int, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            fromIndex = this.length as int - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.length as int + fromIndex
        }

        for (let i = fromIndex; i >= 0; --i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.intValue() == val) {
                return i
            }
        }
        return -1
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: int): int {
        return this.lastIndexOf(val, this.length as int - 1)
    }

    /**
    * Creates a new Int32Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Int32Array from data
    */
    public of(data: Object[]): Int32Array {
        throw new Error("Int32Array.of: not implemented")
    }

    /**
     * Creates a new Int32Array using reversed data from the current one
     *
     * @returns a new Int32Array using reversed data from the current one
     */
    public reverse(): Int32Array {
        for (let i: int = 0; i < this.length as int / 2 as int; i++) {
            const tmp = this.getUnsafe(this.length as int - 1 - i)
            this.setUnsafe(this.length as int - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Int32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Int32Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a slice of current Int32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Int32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Int32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Int32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Int32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Int32Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Int32Array.BYTES_PER_ELEMENT as int, relEnd * Int32Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Int32Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Int32Array.BYTES_PER_ELEMENT as int, relEnd * Int32Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Int32Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Int32Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin, this.length)
     */
    public slice(begin: number): Int32Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Int32Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Int32Array with elements of current Int32Array[begin, this.length)
     */
    public slice(begin: int): Int32Array {
        return this.slice(begin, this.length as int)
    }

    /**
     * Creates a Int32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin?: number, end?: number): Int32Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a Int32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: number): Int32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: int): Int32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: number): Int32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Int32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Int32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: int): Int32Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Int32Array(this.buffer, relStart * Int32Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Int32Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Int32Array with the same ArrayBufferLike
     */
    public subarray(begin: number): Int32Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Creates a Int32Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Int32Array with the same ArrayBufferLike
     */
    public subarray(begin: int): Int32Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Converts Int32Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Int32Array.toLocaleString: not implemented")
    }

    /**
     * Converts Int32Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Int32Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Int32Array {
        return new Int32Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Int32Array {
        return new Int32Array(this).sort()
    }

    /**
     * Returns a string representation of the Int32Array
     *
     * @returns a string representation of the Int32Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
        return new Int32ArrayIterator(this)
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Int32Array with replaced value on index
     */
    public with(index: number, value: number): Int32Array {
        return this.with(index as int, value as int)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Int32Array with replaced value on index
     */
    public with(index: int, value: int): Int32Array {
        let res = new Int32Array(this)
        res.set(index, value)
        return res
    }

    /// === with element lambda functions ===
    /**
     * Checks that all elements of Int32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int32Array) => boolean =
            (element: number, index: number, array: Int32Array): boolean => { return fn(element) }
        return this.every(newF)
    }

    /**
     * creates a new Int32Array from current Int32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int32Array with elements from current Int32Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Int32Array {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val) }
        return this.findLast(newF) as number
    }

    /**
     * Finds an index of the last element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Int32Array
     *
     * @param fn function to apply
     *
     */
    public forEach(fn: (val: number) => int): void {
        let newF: (val: number, index: number, array: Int32Array) => int =
            (val: number, index: number, array: Int32Array): int => { return fn(val) }
        this.forEach(newF)
    }

    /**
     * Creates a new Int32Array using fn(arr[i]) over all elements of current Int32Array
     *
     * @param fn a function to apply for each element of current Int32Array
     *
     * @returns a new Int32Array where for each element from current Int32Array fn was applied
     */
    public map(fn: (val: number) => number): Int32Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Int32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int32Array) => boolean =
            (element: number, index: number, array: Int32Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    // NOTE (kprokopenko): this may be not skipped
    /**
     * Sorts in-place
     *
     * @param fn comparator —  used to determine the order of the elements.
     * fn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     * If omitted, the elements are sorted in ascending order.
     *
     * @returns sorted Int32Array
     */
    public sort(fn?: (a: number, b: number) => number): Int32Array {
        let arr: int[] = new int[this.length as int]
        for (let i = 0; i < this.length as int; ++i) {
            arr[i] = this.getUnsafe(i)
        }
        if (fn == undefined) {
            // NOTE (ikorobkov): needs to add signature for sort(int[])
            //sort(arr)
            for (let i = 0; i < this.length as int; ++i) {
                this.set(i, arr[i])
            }
        }
        else {
            // NOTE(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
            // let mustPrecede: (a: int, b: int) => boolean =
            //     (a: int, b: int): boolean => { return (fn(a, b) <= 0) }
            // sort(arr, mustPrecede)
            // for (let i = 0; i < this.length as int; ++i) {
            //     this.set(i, arr[i])
            // }
        }
        return this
    }

    /**
     * Checks that at least one element of Int32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Int32Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Int32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int32Array) => boolean =
            (element: number, index: number, array: Int32Array): boolean => { return fn(element, index as number) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Int32Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Int32Array) => number): number {
        let acc = this.getUnsafe(0) as number
        for (let i = 1; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Int32Array) => number, init: number): number {
        let acc = init as number
        for (let i = this.length as int - 1; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Int32Array) => number): number {
        let acc: number = this.getUnsafe(this.length as int - 1) as number
        for (let i = this.length as int - 2; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Creates a new Int32Array using fn(arr[i]) over all elements of current Int32Array.
     *
     * @param fn a function to apply for each element of current Int32Array
     *
     * @returns a new Int32Array where for each element from current Int32Array fn was applied
     */
    public map(fn: (val: number, index: number) => number): Int32Array {
        let resBuf = new ArrayBuffer(this.length as int * Int32Array.BYTES_PER_ELEMENT as int)
        let res = new Int32Array(resBuf, 0, resBuf.getByteLength() / Int32Array.BYTES_PER_ELEMENT as int)
        for (let i = 0; i < this.length as int; ++i) {
            res.set(i, fn(this.getUnsafe(i) as number, i as number) as int)
        }
        return res
    }

    /**
     * Checks that all elements of Int32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Int32Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Int32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Int32Array) => boolean =
            (element: number, index: number, array: Int32Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Checks that all elements of Int32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: () => boolean): boolean {
        let newF: (element: number, index: number, array: Int32Array) => boolean =
            (element: number, index: number, array: Int32Array): boolean => { return fn() }
        return this.every(newF)
    }

    /**
     * Creates a new Int32Array from current Int32Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int32Array with elements from current Int32Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Int32Array) => boolean): Int32Array {
        let markers = new boolean[this.length as int]
        let resLen = 0
        for (let i = 0; i < this.length as int; ++i) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let resBuf = new ArrayBuffer(resLen * Int32Array.BYTES_PER_ELEMENT as int)
        let res = new Int32Array(resBuf, 0)
        for (let i = 0, j = 0; i < this.length as int; ++i) {
            if (markers[i]) {
                res.set(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Int32Array from current Int32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int32Array with elements from current Int32Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Int32Array {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val, index as number) }
        return this.filter(newF)
    }

    /**
     * creates a new Int32Array from current Int32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Int32Array with elements from current Int32Array that satisfy condition fn
     */
    public filter(fn: () => boolean): Int32Array {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn() }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Int32Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * NOTE: return int | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Int32Array) => boolean): Number | undefined {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.at(i)
            if (val == undefined) {
                return undefined
            }
            if (fn(val.valueOf(), i as number, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Finds the first element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Int32Array) => boolean): number {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val, index as number) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds an index of the first element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: () => boolean): number {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn() }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Int32Array) => boolean): int {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return val
            }
        }
        throw new Error("Int32Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): int {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val as number, index as number) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Int32Array) => boolean): number {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Int32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Int32Array) => boolean =
            (val: number, index: number, array: Int32Array): boolean => { return fn(val, index as number) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Int32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Int32Array) => int): void {
        for (let i = 0; i < this.length as int; ++i) {
            fn(this.getUnsafe(i) as number, i as number, this)
        }
    }

    /**
     * Applies a function over all elements of Int32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => int): void {
        let newF: (val: number, index: number, array: Int32Array) => int =
            (val: number, index: number, array: Int32Array): int => { return fn(val, index as number) }
        this.forEach(newF)
    }

    /**
     * Applies a function over all elements of Int32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: () => int): void {
        let newF: (val: number, index: number, array: Int32Array) => int =
            (val: number, index: number, array: Int32Array): int => { return fn() }
        this.forEach(newF)
    }

    /**
     * Creates an Int32Array from array-like argument
     *
     * @param o array-like object to initialize Int32Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Int32Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => int): Int32Array {
        throw new Error("Int32Array.from: not implemented")
    }

    internal getUnsafe(index: int): int {
        let byteIndex = index * Int32Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let res : int = 0
        let byteVal : int;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Int32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Int32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Int32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + 3 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Int32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + 3 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        }
    }

    internal setUnsafe(insertPos: int, val: int): void {
        let startByte = insertPos * Int32Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let bits = val;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Int32Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + i, byteVal)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Int32Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + i, byteVal)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Int32Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + 3 - i, byteVal);
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Int32Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + 3 - i, byteVal);
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }

    /** Underlying ArrayBufferLike */
    public readonly buffer: ArrayBufferLike

    /** Byte offset within the underlying ArrayBufferLike */
    public readonly byteOffset: number

    /** Number of bytes used */
    public readonly byteLength: number

    /** Number of int stored in Int32Array */
    public readonly length: number

    /** String \"Int32Array\" */
    public readonly name = "Int32Array"
}

class BigInt64ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int
    private idx: int = 0

    constructor(parent: BigInt64Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class BigInt64ArrayIterator implements IterableIterator<BigInt> {
    private parent: BigInt64Array
    private idx: int = 0

    constructor(parent: BigInt64Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<BigInt> {
        return this;
    }

    override next(): IteratorResult<BigInt> {
        if (this.idx < 0 || this.idx >= this.parent.length as int) {
            return new IteratorResult<BigInt>()
        }
        return new IteratorResult<BigInt>(false, new BigInt(this.parent[this.idx++]))
    }
}

/**
 * JS BigInt64Array API-compatible class
 */
export final class BigInt64Array implements Iterable<BigInt> {
    public static readonly BYTES_PER_ELEMENT: number = 8

    /**
     * Creates an empty BigInt64Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an BigInt64Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<BigInt>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<BigInt>(elements)
        this.byteLength = arr.length * BigInt64Array.BYTES_PER_ELEMENT as int
        this.length = arr.length
        this.buffer = new ArrayBuffer(this.byteLength as int)
        this.byteOffset = 0
        for (let i: int = 0; i < this.length as int; ++i) {
            this.setUnsafe(i, arr.$_get(i).getLong())
        }
    }

    /**
     * Creates an BigInt64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigInt64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % BigInt64Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as BigInt64Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % BigInt64Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 8 as BigInt64Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length.intValue()
            if (intLength > intByteLength / BigInt64Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / BigInt64Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / BigInt64Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * BigInt64Array.BYTES_PER_ELEMENT as int
        }
        this.byteLength = intByteLength
        this.byteOffset = intByteOffset
        this.length = intLength
        this.buffer = buf
    }

    /**
     * Creates an BigInt64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigInt64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an BigInt64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigInt64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an BigInt64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigInt64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an BigInt64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigInt64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an BigInt64Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an BigInt64Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLength = (buf as ArrayBuffer).getByteLength()
            if (this.byteLength % BigInt64Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as BigInt64Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / BigInt64Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLength = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLength % BigInt64Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as BigInt64Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / BigInt64Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLength = arr.length as int * BigInt64Array.BYTES_PER_ELEMENT as int
            this.length = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLength as int)
            this.byteOffset = 0
            for (let i: int = 0; i < this.length as int; ++i) {
                this.setUnsafe(i, arr.$_get(i).longValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an BigInt64Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.length = length
        this.byteLength = length * BigInt64Array.BYTES_PER_ELEMENT as int
        this.byteOffset = 0
        this.buffer = new ArrayBuffer(this.byteLength as int)
    }

    /**
     * Creates an BigInt64Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of BigInt64Array.
     *
     * @param other data initializer
     */
    public constructor(other: BigInt64Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLength = other.byteLength
        this.length = other.length
        this.byteOffset = 0
    }

    internal zeroIfInfinity(val: BigInt): BigInt {
        if ((val.getLong() == Infinity) || (val.getLong() == -Infinity)) {
            return new BigInt(0)
        }
        return new BigInt(val)
    }

    internal zeroIfInfinity(val: long): long {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as long
        }
        return val
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: BigInt): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: BigInt): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v.getLong())
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val as long)
        this.setUnsafe(index, v as long)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: long): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: long): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafe(index, v)
    }

    /**
     * Returns an instance of BigInt at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): BigInt {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of BigInt at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: int): BigInt {
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        return new BigInt(this.getUnsafe(index))
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): BigInt | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): BigInt | undefined {
        let k: int;
        if (index >= 0) {
            k = index
        } else {
            k = this.length as int + index
        }
        if (k < 0 || k >= this.length as int) {
            return undefined
        }
        return new BigInt(this.getUnsafe(k))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): BigInt64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): BigInt64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): BigInt64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): BigInt64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): BigInt64Array {
        let toPos = normalizeIndex(target, this.length as int)
        let fromPos = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        let count: int = finalPos - fromPos
        if (count > (this.length as int - toPos)) {
            count = this.length as int - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of BigInt64Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): BigInt64Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of BigInt64Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): BigInt64Array {
        return this.copyWithin(target, 0, this.length as int)
    }

    /**
     * Returns an iterator for all entries
     */
    /* public */ internal entries(): IterableIterator<Entry<Int, Long>> {
        throw new Error("not implemented")
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: BigInt, start?: number, end?: number): BigInt64Array {
        return this.fill(value.getLong(), asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: BigInt, start: int, end?: number): BigInt64Array {
        return this.fill(value.getLong(), start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: BigInt, start: int, end: number): BigInt64Array {
        return this.fill(value.getLong(), start as int, end as int)
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: BigInt, start: number, end: int): BigInt64Array {
        return this.fill(value.getLong(), start as int, end as int)
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: BigInt, start: int, end: int): BigInt64Array {
        return this.fill(value.getLong(), start as int, end as int)
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: long, start?: number, end?: number): BigInt64Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: long, start: int, end?: number): BigInt64Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: long, start: int, end: number): BigInt64Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: long, start: number, end: int): BigInt64Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the BigInt64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified BigInt64Array
     */
    public fill(value: long, start: int, end: int): BigInt64Array {
        const k = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(long[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: number, val: BigInt): void {
        this.$_set(insertPos, val)
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(long[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: int, val: long): void {
        this.$_set(insertPos, val)
    }

    /**
     * Copies all elements of arr to the current BigInt64Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: BigInt[], insertPos: number): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos as int + i, v.getLong())
        }
    }

    /**
     * Copies all elements of arr to the current BigInt64Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: long[], insertPos: int): void {
        for (let i = 0; i < arr.length as int; ++i) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafe(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current BigInt64Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: BigInt[]): void {
        this.set(arr, 0 as number)
    }

    /**
     * Copies all elements of arr to the current BigInt64Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: long[]): void {
        this.set(arr, 0 as int)
    }

    /**
     * Creates an BigInt64Array from array-like argument
     *
     * @param o array-like object to initialize BigInt64Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new BigInt64Array
     */
    public from(o: Object, mapFn: (e: Object) => long): BigInt64Array {
        let newF: (e: Object, index: number) => long =
            (e: Object, index: number): long => { return mapFn(e) }
        return this.from(o, newF)
    }

    /**
     * Creates an BigInt64Array from array-like argument
     *
     * @param o array-like object to initialize BigInt64Array
     *
     * @returns new BigInt64Array
     */
    public from(o: Object): BigInt64Array {
        throw new Error("BigInt64Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in BigInt64Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in BigInt64Array, false otherwise
     */
    public includes(e: BigInt, fromIndex?: Number): boolean {
        if (fromIndex == undefined) {
            return this.includes(e.getLong(), 0 as int)
        }
        return this.includes(e.getLong(), fromIndex.intValue())
    }

    /**
     * Checks if specified argument is in BigInt64Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in BigInt64Array, false otherwise
     */
    public includes(e: long, fromIndex: int): boolean {
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return false;
            }
            if (tmp.getLong() == e) {
                return true
            }
        }
        return false
    }

    /**
     * Checks if specified argument is in BigInt64Array
     *
     * @param e search element
     *
     * @returns true if e is in BigInt64Array, false otherwise
     */
    public includes(e: long): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: BigInt, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.indexOf(e.getLong(), 0)
        }
        return this.indexOf(e.getLong(), fromIndex.intValue())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: long, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            return -1
        }
        if (fromIndex < 0) {
            fromIndex += this.length as int
            // See TypedArray.indexOf JS docs
            if (fromIndex < 0) {
                fromIndex = 0
            }
        }
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.getLong() == e) {
                return i
            }
        }
        return -1
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: long): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.length as int - 1; ++i) {
            res.append(new BigInt(this.getUnsafe(i)))
            res.append(s)
        }
        if (this.length as int > 0) {
            res.append(new BigInt(this.getUnsafe(this.length as int - 1)))
        }
        return res.toString()
    }

    /**
     * Returns keys of the BigInt64Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new BigInt64ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: BigInt, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.lastIndexOf(val.getLong(), 0 as int)
        }
        return this.lastIndexOf(val.getLong(), fromIndex.intValue()) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: long, fromIndex: number): number {
        return this.lastIndexOf(val, fromIndex as int) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: long, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            fromIndex = this.length as int - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.length as int + fromIndex
        }

        for (let i = fromIndex; i >= 0; --i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.getLong() == val) {
                return i
            }
        }
        return -1
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: long): int {
        return this.lastIndexOf(val, this.length as int - 1)
    }

    /**
    * Creates a new BigInt64Array using initializer
    *
    * @param data initializer
    *
    * @returns a new BigInt64Array from data
    */
    public of(data: Object[]): BigInt64Array {
        throw new Error("BigInt64Array.of: not implemented")
    }

    /**
     * Creates a new BigInt64Array using reversed data from the current one
     *
     * @returns a new BigInt64Array using reversed data from the current one
     */
    public reverse(): BigInt64Array {
        for (let i: int = 0; i < this.length as int / 2 as int; i++) {
            const tmp = this.getUnsafe(this.length as int - 1 - i)
            this.setUnsafe(this.length as int - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): BigInt64Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): BigInt64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): BigInt64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): BigInt64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): BigInt64Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * BigInt64Array.BYTES_PER_ELEMENT as int, relEnd * BigInt64Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new BigInt64Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * BigInt64Array.BYTES_PER_ELEMENT as int, relEnd * BigInt64Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new BigInt64Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin, this.length)
     */
    public slice(begin: number): BigInt64Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current BigInt64Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new BigInt64Array with elements of current BigInt64Array[begin, this.length)
     */
    public slice(begin: int): BigInt64Array {
        return this.slice(begin, this.length as int)
    }

    /**
     * Creates a BigInt64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigInt64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin?: number, end?: number): BigInt64Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a BigInt64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigInt64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: number): BigInt64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a BigInt64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigInt64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: int): BigInt64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a BigInt64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigInt64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: number): BigInt64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a BigInt64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigInt64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: int): BigInt64Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new BigInt64Array(this.buffer, relStart * BigInt64Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a BigInt64Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new BigInt64Array with the same ArrayBufferLike
     */
    public subarray(begin: number): BigInt64Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Creates a BigInt64Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new BigInt64Array with the same ArrayBufferLike
     */
    public subarray(begin: int): BigInt64Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Converts BigInt64Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("BigInt64Array.toLocaleString: not implemented")
    }

    /**
     * Converts BigInt64Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts BigInt64Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): BigInt64Array {
        return new BigInt64Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): BigInt64Array {
        return new BigInt64Array(this).sort()
    }

    /**
     * Returns a string representation of the BigInt64Array
     *
     * @returns a string representation of the BigInt64Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<BigInt> {
        return new BigInt64ArrayIterator(this)
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<BigInt> {
        return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<BigInt> {
        return this.values()
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an BigInt64Array with replaced value on index
     */
    public with(index: number, value: BigInt): BigInt64Array {
        return this.with(index as int, value.getLong())
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an BigInt64Array with replaced value on index
     */
    public with(index: int, value: long): BigInt64Array {
        let res = new BigInt64Array(this)
        res.set(index, value)
        return res
    }

    /// === with element lambda functions ===
    /**
     * Checks that all elements of BigInt64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: BigInt) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigInt64Array) => boolean =
            (element: BigInt, index: number, array: BigInt64Array): boolean => { return fn(element) }
        return this.every(newF)
    }

    /**
     * creates a new BigInt64Array from current BigInt64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigInt64Array with elements from current BigInt64Array that satisfy condition fn
     */
    public filter(fn: (val: BigInt) => boolean): BigInt64Array {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: BigInt) => boolean): BigInt | undefined {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: BigInt) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: BigInt) => boolean): BigInt {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val) }
        return new BigInt(this.findLast(newF))
    }

    /**
     * Finds an index of the last element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: BigInt) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of BigInt64Array
     *
     * @param fn function to apply
     *
     */
    public forEach(fn: (val: BigInt) => long): void {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => long =
            (val: BigInt, index: number, array: BigInt64Array): long => { return fn(val) }
        this.forEach(newF)
    }

    /**
     * Creates a new BigInt64Array using fn(arr[i]) over all elements of current BigInt64Array
     *
     * @param fn a function to apply for each element of current BigInt64Array
     *
     * @returns a new BigInt64Array where for each element from current BigInt64Array fn was applied
     */
    public map(fn: (val: BigInt) => BigInt): BigInt64Array {
        let newF: (val: BigInt, index: number) => BigInt =
            (val: BigInt, index: number): BigInt => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of BigInt64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: BigInt) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigInt64Array) => boolean =
            (element: BigInt, index: number, array: BigInt64Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    // NOTE (kprokopenko): this may be not skipped
    /**
     * Sorts in-place
     *
     * @param fn comparator —  used to determine the order of the elements.
     * fn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     * If omitted, the elements are sorted in ascending order.
     *
     * @returns sorted BigInt64Array
     */
    public sort(fn?: (a: BigInt, b: BigInt) => number): BigInt64Array {
        let arr: long[] = new long[this.length as int]
        for (let i = 0; i < this.length as int; ++i) {
            arr[i] = this.getUnsafe(i)
        }
        if (fn == undefined) {
            // NOTE (ikorobkov): needs to add signature for sort(long[])
            //sort(arr)
            for (let i = 0; i < this.length as int; ++i) {
                this.set(i, arr[i])
            }
        }
        else {
            // NOTE(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
            // let mustPrecede: (a: long, b: long) => boolean =
            //     (a: long, b: long): boolean => { return (fn(a, b) <= 0) }
            // sort(arr, mustPrecede)
            // for (let i = 0; i < this.length as int; ++i) {
            //     this.set(i, arr[i])
            // }
        }
        return this
    }

    /**
     * Checks that at least one element of BigInt64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: BigInt, index: number, array: BigInt64Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (fn(new BigInt(this.getUnsafe(i)), i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of BigInt64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: BigInt, index: number) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigInt64Array) => boolean =
            (element: BigInt, index: number, array: BigInt64Array): boolean => { return fn(element, index as number) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigInt64Array) => BigInt, init: BigInt): BigInt {
        let acc = init
        for (let i = 0; i < this.length as int; ++i) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigInt64Array) => BigInt): BigInt {
        let acc = new BigInt(this.getUnsafe(0))
        for (let i = 1; i < this.length as int; ++i) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigInt64Array) => BigInt, init: BigInt): BigInt {
        let acc = new BigInt(init)
        for (let i = this.length as int - 1; i >= 0; --i) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigInt64Array) => BigInt): BigInt {
        let acc: BigInt = new BigInt(this.getUnsafe(this.length as int - 1))
        for (let i = this.length as int - 2; i >= 0; --i) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Creates a new BigInt64Array using fn(arr[i]) over all elements of current BigInt64Array.
     *
     * @param fn a function to apply for each element of current BigInt64Array
     *
     * @returns a new BigInt64Array where for each element from current BigInt64Array fn was applied
     */
    public map(fn: (val: BigInt, index: number) => BigInt): BigInt64Array {
        let resBuf = new ArrayBuffer(this.length as int * BigInt64Array.BYTES_PER_ELEMENT as int)
        let res = new BigInt64Array(resBuf, 0, resBuf.getByteLength() / BigInt64Array.BYTES_PER_ELEMENT as int)
        for (let i = 0; i < this.length as int; ++i) {
            res.set(i, fn(new BigInt(this.getUnsafe(i)), i as number).getLong())
        }
        return res
    }

    /**
     * Checks that all elements of BigInt64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: BigInt, index: number, array: BigInt64Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (!fn(new BigInt(this.getUnsafe(i)), i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of BigInt64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: BigInt, index: number) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigInt64Array) => boolean =
            (element: BigInt, index: number, array: BigInt64Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Checks that all elements of BigInt64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: () => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigInt64Array) => boolean =
            (element: BigInt, index: number, array: BigInt64Array): boolean => { return fn() }
        return this.every(newF)
    }

    /**
     * Creates a new BigInt64Array from current BigInt64Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigInt64Array with elements from current BigInt64Array that satisfy condition fn
     */
    public filter(fn: (val: BigInt, index: number, array: BigInt64Array) => boolean): BigInt64Array {
        let markers = new boolean[this.length as int]
        let resLen = 0
        for (let i = 0; i < this.length as int; ++i) {
            markers[i] = fn(new BigInt(this.getUnsafe(i)), i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let resBuf = new ArrayBuffer(resLen * BigInt64Array.BYTES_PER_ELEMENT as int)
        let res = new BigInt64Array(resBuf, 0)
        for (let i = 0, j = 0; i < this.length as int; ++i) {
            if (markers[i]) {
                res.set(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new BigInt64Array from current BigInt64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigInt64Array with elements from current BigInt64Array that satisfy condition fn
     */
    public filter(fn: (val: BigInt, index: number) => boolean): BigInt64Array {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val, index as number) }
        return this.filter(newF)
    }

    /**
     * creates a new BigInt64Array from current BigInt64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigInt64Array with elements from current BigInt64Array that satisfy condition fn
     */
    public filter(fn: () => boolean): BigInt64Array {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn() }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * NOTE: return long | undefined as in JS
     */
    public find(fn: (val: BigInt, index: number, array: BigInt64Array) => boolean): BigInt | undefined {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.at(i)
            if (val == undefined) {
                return undefined
            }
            if (fn(val, i as number, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Finds the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: BigInt, index: number) => boolean): BigInt | undefined {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: BigInt, index: number, array: BigInt64Array) => boolean): number {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.getUnsafe(i)
            if (fn(new BigInt(val), i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: BigInt, index: number) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val, index as number) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds an index of the first element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: () => boolean): number {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn() }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: BigInt, index: number, array: BigInt64Array) => boolean): long {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(new BigInt(val), i as number, this)) {
                return val
            }
        }
        throw new Error("BigInt64Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: BigInt, index: number) => boolean): long {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(new BigInt(val), index as number) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: BigInt, index: number, array: BigInt64Array) => boolean): number {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(new BigInt(val), i as number, this)) {
                return i
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the BigInt64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: BigInt, index: number) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => boolean =
            (val: BigInt, index: number, array: BigInt64Array): boolean => { return fn(val, index as number) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of BigInt64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: BigInt, index: number, array: BigInt64Array) => long): void {
        for (let i = 0; i < this.length as int; ++i) {
            fn(new BigInt(this.getUnsafe(i)), i as number, this)
        }
    }

    /**
     * Applies a function over all elements of BigInt64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: BigInt, index: number) => long): void {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => long =
            (val: BigInt, index: number, array: BigInt64Array): long => { return fn(val, index as number) }
        this.forEach(newF)
    }

    /**
     * Applies a function over all elements of BigInt64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: () => long): void {
        let newF: (val: BigInt, index: number, array: BigInt64Array) => long =
            (val: BigInt, index: number, array: BigInt64Array): long => { return fn() }
        this.forEach(newF)
    }

    /**
     * Creates an BigInt64Array from array-like argument
     *
     * @param o array-like object to initialize BigInt64Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new BigInt64Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => long): BigInt64Array {
        throw new Error("BigInt64Array.from: not implemented")
    }

    internal getUnsafe(index: int): long {
        let byteIndex = index * BigInt64Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let res : long = 0
        let byteVal : long;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + 7 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + 7 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return res
        }
    }

    internal setUnsafe(insertPos: int, val: long): void {
        let startByte = insertPos * BigInt64Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let bits = val;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + i, byteVal)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + i, byteVal)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + 7 - i, byteVal);
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < BigInt64Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + 7 - i, byteVal);
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }

    /** Underlying ArrayBufferLike */
    public readonly buffer: ArrayBufferLike

    /** Byte offset within the underlying ArrayBufferLike */
    public readonly byteOffset: number

    /** Number of bytes used */
    public readonly byteLength: number

    /** Number of long stored in BigInt64Array */
    public readonly length: number

    /** String \"BigInt64Array\" */
    public readonly name = "BigInt64Array"
}

class Float32ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int
    private idx: int = 0

    constructor(parent: Float32Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Float32ArrayIterator implements IterableIterator<Number> {
    private parent: Float32Array
    private idx: int = 0

    constructor(parent: Float32Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.length as int) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent[this.idx++]))
    }
}

/**
 * JS Float32Array API-compatible class
 */
export final class Float32Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 4

    /**
     * Creates an empty Float32Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Float32Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLength = arr.length * Float32Array.BYTES_PER_ELEMENT as int
        this.length = arr.length
        this.buffer = new ArrayBuffer(this.byteLength as int)
        this.byteOffset = 0
        for (let i: int = 0; i < this.length as int; ++i) {
            this.setUnsafe(i, arr.$_get(i).floatValue())
        }
    }

    /**
     * Creates an Float32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type float in newly created Float32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % Float32Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Float32Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % Float32Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 4 as Float32Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length.intValue()
            if (intLength > intByteLength / Float32Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Float32Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Float32Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Float32Array.BYTES_PER_ELEMENT as int
        }
        this.byteLength = intByteLength
        this.byteOffset = intByteOffset
        this.length = intLength
        this.buffer = buf
    }

    /**
     * Creates an Float32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type float in newly created Float32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Float32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type float in newly created Float32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Float32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type float in newly created Float32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Float32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type float in newly created Float32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Float32Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Float32Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLength = (buf as ArrayBuffer).getByteLength()
            if (this.byteLength % Float32Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Float32Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Float32Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLength = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLength % Float32Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Float32Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Float32Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLength = arr.length as int * Float32Array.BYTES_PER_ELEMENT as int
            this.length = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLength as int)
            this.byteOffset = 0
            for (let i: int = 0; i < this.length as int; ++i) {
                this.setUnsafe(i, arr.$_get(i).floatValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an Float32Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.length = length
        this.byteLength = length * Float32Array.BYTES_PER_ELEMENT as int
        this.byteOffset = 0
        this.buffer = new ArrayBuffer(this.byteLength as int)
    }

    /**
     * Creates an Float32Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Float32Array.
     *
     * @param other data initializer
     */
    public constructor(other: Float32Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLength = other.byteLength
        this.length = other.length
        this.byteOffset = 0
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        this.setUnsafe(index, val as float)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        this.setUnsafe(index, val as float)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: float): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: float): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        this.setUnsafe(index, val)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: int): number {
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        return this.getUnsafe(index) as number
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index;
        } else {
            k = this.length as int + index
        }
        if (k < 0 || k >= this.length as int) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Float32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Float32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Float32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Float32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Float32Array {
        let toPos = normalizeIndex(target, this.length as int)
        let fromPos = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        let count: int = finalPos - fromPos
        if (count > (this.length as int - toPos)) {
            count = this.length as int - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Float32Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Float32Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Float32Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Float32Array {
        return this.copyWithin(target, 0, this.length as int)
    }

    /**
     * Returns an iterator for all entries
     */
    /* public */ internal entries(): IterableIterator<Entry<Int, Float>> {
        throw new Error("not implemented")
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: number, start?: number, end?: number): Float32Array {
        return this.fill(value as float, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: number, start: int, end?: number): Float32Array {
        return this.fill(value as float, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: number, start: int, end: number): Float32Array {
        return this.fill(value as float, start as int, end as int)
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: number, start: number, end: int): Float32Array {
        return this.fill(value as float, start as int, end as int)
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: number, start: int, end: int): Float32Array {
        return this.fill(value as float, start as int, end as int)
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: float, start?: number, end?: number): Float32Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: float, start: int, end?: number): Float32Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.length as int));
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: float, start: int, end: number): Float32Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: float, start: number, end: int): Float32Array {
        return this.fill(value, start as int, end as int);
    }

    /**
     * Fills the Float32Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float32Array
     */
    public fill(value: float, start: int, end: int): Float32Array {
        const k = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(float[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos, val)
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(float[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: int, val: float): void {
        this.$_set(insertPos, val)
    }

    /**
     * Copies all elements of arr to the current Float32Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos: number): void {
        for (let i = 0; i < arr.length as int; ++i) {
            this.setUnsafe(insertPos as int + i, arr[i] as float)
        }
    }

    /**
     * Copies all elements of arr to the current Float32Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: float[], insertPos: int): void {
        for (let i = 0; i < arr.length as int; ++i) {
            this.setUnsafe(insertPos + i, arr[i])
        }
    }

    /**
     * Copies all elements of arr to the current Float32Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0 as number)
    }

    /**
     * Copies all elements of arr to the current Float32Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: float[]): void {
        this.set(arr, 0 as int)
    }

    /**
     * Creates an Float32Array from array-like argument
     *
     * @param o array-like object to initialize Float32Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Float32Array
     */
    public from(o: Object, mapFn: (e: Object) => float): Float32Array {
        let newF: (e: Object, index: number) => float =
            (e: Object, index: number): float => { return mapFn(e) }
        return this.from(o, newF)
    }

    /**
     * Creates an Float32Array from array-like argument
     *
     * @param o array-like object to initialize Float32Array
     *
     * @returns new Float32Array
     */
    public from(o: Object): Float32Array {
        throw new Error("Float32Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Float32Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Float32Array, false otherwise
     */
    public includes(e: number, fromIndex?: Number): boolean {
        if (fromIndex == undefined) {
            return this.includes(e as float, 0 as int)
        }
        return this.includes(e as float, fromIndex.intValue())
    }

    /**
     * Checks if specified argument is in Float32Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Float32Array, false otherwise
     */
    public includes(e: float, fromIndex: int): boolean {
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return false;
            }
            if (tmp.floatValue() == e) {
                return true
            }
        }
        return false
    }

    /**
     * Checks if specified argument is in Float32Array
     *
     * @param e search element
     *
     * @returns true if e is in Float32Array, false otherwise
     */
    public includes(e: float): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.indexOf(e as float, 0)
        }
        return this.indexOf(e as float, fromIndex.intValue())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: float, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            return -1
        }
        if (fromIndex < 0) {
            fromIndex += this.length as int
            // See TypedArray.indexOf JS docs
            if (fromIndex < 0) {
                fromIndex = 0
            }
        }
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.floatValue() == e) {
                return i
            }
        }
        return -1
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: float): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.length as int - 1; ++i) {
            res.append(this.getUnsafe(i) as number)
            res.append(s)
        }
        if (this.length as int > 0) {
            res.append(this.getUnsafe(this.length as int - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Float32Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Float32ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.lastIndexOf(val as float, 0 as int)
        }
        return this.lastIndexOf(val as float, fromIndex.intValue()) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: float, fromIndex: number): number {
        return this.lastIndexOf(val, fromIndex as int) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: float, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            fromIndex = this.length as int - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.length as int + fromIndex
        }

        for (let i = fromIndex; i >= 0; --i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.floatValue() == val) {
                return i
            }
        }
        return -1
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: float): int {
        return this.lastIndexOf(val, this.length as int - 1)
    }

    /**
    * Creates a new Float32Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Float32Array from data
    */
    public of(data: Object[]): Float32Array {
        throw new Error("Float32Array.of: not implemented")
    }

    /**
     * Creates a new Float32Array using reversed data from the current one
     *
     * @returns a new Float32Array using reversed data from the current one
     */
    public reverse(): Float32Array {
        for (let i: int = 0; i < this.length as int / 2 as int; i++) {
            const tmp = this.getUnsafe(this.length as int - 1 - i)
            this.setUnsafe(this.length as int - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Float32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Float32Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a slice of current Float32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Float32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Float32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Float32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Float32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Float32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Float32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Float32Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Float32Array.BYTES_PER_ELEMENT as int, relEnd * Float32Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Float32Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Float32Array.BYTES_PER_ELEMENT as int, relEnd * Float32Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Float32Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Float32Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin, this.length)
     */
    public slice(begin: number): Float32Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Float32Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Float32Array with elements of current Float32Array[begin, this.length)
     */
    public slice(begin: int): Float32Array {
        return this.slice(begin, this.length as int)
    }

    /**
     * Creates a Float32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin?: number, end?: number): Float32Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a Float32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: number): Float32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Float32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: int): Float32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Float32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: number): Float32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Float32Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float32Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: int): Float32Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Float32Array(this.buffer, relStart * Float32Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Float32Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Float32Array with the same ArrayBufferLike
     */
    public subarray(begin: number): Float32Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Creates a Float32Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Float32Array with the same ArrayBufferLike
     */
    public subarray(begin: int): Float32Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Converts Float32Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Float32Array.toLocaleString: not implemented")
    }

    /**
     * Converts Float32Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Float32Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Float32Array {
        return new Float32Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Float32Array {
        return new Float32Array(this).sort()
    }

    /**
     * Returns a string representation of the Float32Array
     *
     * @returns a string representation of the Float32Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
        return new Float32ArrayIterator(this)
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Float32Array with replaced value on index
     */
    public with(index: number, value: number): Float32Array {
        return this.with(index as int, value as float)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Float32Array with replaced value on index
     */
    public with(index: int, value: float): Float32Array {
        let res = new Float32Array(this)
        res.set(index, value)
        return res
    }

    /// === with element lambda functions ===
    /**
     * Checks that all elements of Float32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float32Array) => boolean =
            (element: number, index: number, array: Float32Array): boolean => { return fn(element) }
        return this.every(newF)
    }

    /**
     * creates a new Float32Array from current Float32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float32Array with elements from current Float32Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Float32Array {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val) }
        return this.findLast(newF) as number
    }

    /**
     * Finds an index of the last element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Float32Array
     *
     * @param fn function to apply
     *
     */
    public forEach(fn: (val: number) => float): void {
        let newF: (val: number, index: number, array: Float32Array) => float =
            (val: number, index: number, array: Float32Array): float => { return fn(val) }
        this.forEach(newF)
    }

    /**
     * Creates a new Float32Array using fn(arr[i]) over all elements of current Float32Array
     *
     * @param fn a function to apply for each element of current Float32Array
     *
     * @returns a new Float32Array where for each element from current Float32Array fn was applied
     */
    public map(fn: (val: number) => number): Float32Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Float32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float32Array) => boolean =
            (element: number, index: number, array: Float32Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    // NOTE (kprokopenko): this may be not skipped
    /**
     * Sorts in-place
     *
     * @param fn comparator —  used to determine the order of the elements.
     * fn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     * If omitted, the elements are sorted in ascending order.
     *
     * @returns sorted Float32Array
     */
    public sort(fn?: (a: number, b: number) => number): Float32Array {
        let arr: float[] = new float[this.length as int]
        for (let i = 0; i < this.length as int; ++i) {
            arr[i] = this.getUnsafe(i)
        }
        if (fn == undefined) {
            // NOTE (ikorobkov): needs to add signature for sort(float[])
            //sort(arr)
            for (let i = 0; i < this.length as int; ++i) {
                this.set(i, arr[i])
            }
        }
        else {
            // NOTE(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
            // let mustPrecede: (a: float, b: float) => boolean =
            //     (a: float, b: float): boolean => { return (fn(a, b) <= 0) }
            // sort(arr, mustPrecede)
            // for (let i = 0; i < this.length as int; ++i) {
            //     this.set(i, arr[i])
            // }
        }
        return this
    }

    /**
     * Checks that at least one element of Float32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Float32Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Float32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float32Array) => boolean =
            (element: number, index: number, array: Float32Array): boolean => { return fn(element, index as number) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Float32Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Float32Array) => number): number {
        let acc = this.getUnsafe(0) as number
        for (let i = 1; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Float32Array) => number, init: number): number {
        let acc = init as number
        for (let i = this.length as int - 1; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Float32Array) => number): number {
        let acc: number = this.getUnsafe(this.length as int - 1) as number
        for (let i = this.length as int - 2; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Creates a new Float32Array using fn(arr[i]) over all elements of current Float32Array.
     *
     * @param fn a function to apply for each element of current Float32Array
     *
     * @returns a new Float32Array where for each element from current Float32Array fn was applied
     */
    public map(fn: (val: number, index: number) => number): Float32Array {
        let resBuf = new ArrayBuffer(this.length as int * Float32Array.BYTES_PER_ELEMENT as int)
        let res = new Float32Array(resBuf, 0, resBuf.getByteLength() / Float32Array.BYTES_PER_ELEMENT as int)
        for (let i = 0; i < this.length as int; ++i) {
            res.set(i, fn(this.getUnsafe(i) as number, i as number) as float)
        }
        return res
    }

    /**
     * Checks that all elements of Float32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Float32Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Float32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float32Array) => boolean =
            (element: number, index: number, array: Float32Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Checks that all elements of Float32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: () => boolean): boolean {
        let newF: (element: number, index: number, array: Float32Array) => boolean =
            (element: number, index: number, array: Float32Array): boolean => { return fn() }
        return this.every(newF)
    }

    /**
     * Creates a new Float32Array from current Float32Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float32Array with elements from current Float32Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Float32Array) => boolean): Float32Array {
        let markers = new boolean[this.length as int]
        let resLen = 0
        for (let i = 0; i < this.length as int; ++i) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let resBuf = new ArrayBuffer(resLen * Float32Array.BYTES_PER_ELEMENT as int)
        let res = new Float32Array(resBuf, 0)
        for (let i = 0, j = 0; i < this.length as int; ++i) {
            if (markers[i]) {
                res.set(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Float32Array from current Float32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float32Array with elements from current Float32Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Float32Array {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val, index as number) }
        return this.filter(newF)
    }

    /**
     * creates a new Float32Array from current Float32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float32Array with elements from current Float32Array that satisfy condition fn
     */
    public filter(fn: () => boolean): Float32Array {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn() }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Float32Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * NOTE: return float | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Float32Array) => boolean): Number | undefined {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.at(i)
            if (val == undefined) {
                return undefined
            }
            if (fn(val.valueOf(), i as number, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Finds the first element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Float32Array) => boolean): number {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val, index as number) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds an index of the first element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: () => boolean): number {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn() }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Float32Array) => boolean): float {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return val
            }
        }
        throw new Error("Float32Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): float {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val as number, index as number) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Float32Array) => boolean): number {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Float32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Float32Array) => boolean =
            (val: number, index: number, array: Float32Array): boolean => { return fn(val, index as number) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Float32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Float32Array) => float): void {
        for (let i = 0; i < this.length as int; ++i) {
            fn(this.getUnsafe(i) as number, i as number, this)
        }
    }

    /**
     * Applies a function over all elements of Float32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => float): void {
        let newF: (val: number, index: number, array: Float32Array) => float =
            (val: number, index: number, array: Float32Array): float => { return fn(val, index as number) }
        this.forEach(newF)
    }

    /**
     * Applies a function over all elements of Float32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: () => float): void {
        let newF: (val: number, index: number, array: Float32Array) => float =
            (val: number, index: number, array: Float32Array): float => { return fn() }
        this.forEach(newF)
    }

    /**
     * Creates an Float32Array from array-like argument
     *
     * @param o array-like object to initialize Float32Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Float32Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => float): Float32Array {
        throw new Error("Float32Array.from: not implemented")
    }

    internal getUnsafe(index: int): float {
        let byteIndex = index * Float32Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let res : int = 0
        let byteVal : int;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Float32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Float32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return Float.bitCastFromInt(res)
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Float32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + 3 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Float32Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + 3 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as int;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return Float.bitCastFromInt(res)
        }
    }

    internal setUnsafe(insertPos: int, val: float): void {
        let startByte = insertPos * Float32Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let bits = Float.bitCastToInt(val);
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Float32Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + i, byteVal)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Float32Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + i, byteVal)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Float32Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + 3 - i, byteVal);
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Float32Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + 3 - i, byteVal);
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }

    /** Underlying ArrayBufferLike */
    public readonly buffer: ArrayBufferLike

    /** Byte offset within the underlying ArrayBufferLike */
    public readonly byteOffset: number

    /** Number of bytes used */
    public readonly byteLength: number

    /** Number of float stored in Float32Array */
    public readonly length: number

    /** String \"Float32Array\" */
    public readonly name = "Float32Array"
}

class Float64ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int
    private idx: int = 0

    constructor(parent: Float64Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Float64ArrayIterator implements IterableIterator<Number> {
    private parent: Float64Array
    private idx: int = 0

    constructor(parent: Float64Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.length as int) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent[this.idx++]))
    }
}

/**
 * JS Float64Array API-compatible class
 */
export final class Float64Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 8

    /**
     * Creates an empty Float64Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Float64Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLength = arr.length * Float64Array.BYTES_PER_ELEMENT as int
        this.length = arr.length
        this.buffer = new ArrayBuffer(this.byteLength as int)
        this.byteOffset = 0
        for (let i: int = 0; i < this.length as int; ++i) {
            this.setUnsafe(i, arr.$_get(i).doubleValue())
        }
    }

    /**
     * Creates an Float64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type double in newly created Float64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % Float64Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as Float64Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % Float64Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 8 as Float64Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length.intValue()
            if (intLength > intByteLength / Float64Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Float64Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Float64Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Float64Array.BYTES_PER_ELEMENT as int
        }
        this.byteLength = intByteLength
        this.byteOffset = intByteOffset
        this.length = intLength
        this.buffer = buf
    }

    /**
     * Creates an Float64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type double in newly created Float64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Float64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type double in newly created Float64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Float64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type double in newly created Float64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Float64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type double in newly created Float64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Float64Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Float64Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLength = (buf as ArrayBuffer).getByteLength()
            if (this.byteLength % Float64Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as Float64Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Float64Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLength = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLength % Float64Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as Float64Array.BYTES_PER_ELEMENT")
            }
            this.length = this.byteLength as int / Float64Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffset = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLength = arr.length as int * Float64Array.BYTES_PER_ELEMENT as int
            this.length = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLength as int)
            this.byteOffset = 0
            for (let i: int = 0; i < this.length as int; ++i) {
                this.setUnsafe(i, arr.$_get(i).doubleValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an Float64Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.length = length
        this.byteLength = length * Float64Array.BYTES_PER_ELEMENT as int
        this.byteOffset = 0
        this.buffer = new ArrayBuffer(this.byteLength as int)
    }

    /**
     * Creates an Float64Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Float64Array.
     *
     * @param other data initializer
     */
    public constructor(other: Float64Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLength = other.byteLength
        this.length = other.length
        this.byteOffset = 0
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        this.setUnsafe(index, val as double)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception was added to avoid memory's out-of-range access
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        this.setUnsafe(index, val as double)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: int): number {
        if (index < 0 || index >= this.length as int) {
            throw new RangeError("invalid index")
        }
        return this.getUnsafe(index) as number
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index;
        } else {
            k = this.length as int + index
        }
        if (k < 0 || k >= this.length as int) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Float64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Float64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Float64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Float64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Float64Array {
        let toPos = normalizeIndex(target, this.length as int)
        let fromPos = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        let count: int = finalPos - fromPos
        if (count > (this.length as int - toPos)) {
            count = this.length as int - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Float64Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Float64Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Float64Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Float64Array {
        return this.copyWithin(target, 0, this.length as int)
    }

    /**
     * Returns an iterator for all entries
     */
    /* public */ internal entries(): IterableIterator<Entry<Int, Double>> {
        throw new Error("not implemented")
    }

    /**
     * Fills the Float64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float64Array
     */
    public fill(value: number, start?: number, end?: number): Float64Array {
        return this.fill(value as double, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Float64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float64Array
     */
    public fill(value: number, start: int, end?: number): Float64Array {
        return this.fill(value as double, start as int, asIntOrDefault(end, this.length as int))
    }

    /**
     * Fills the Float64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float64Array
     */
    public fill(value: number, start: int, end: number): Float64Array {
        return this.fill(value as double, start as int, end as int)
    }

    /**
     * Fills the Float64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float64Array
     */
    public fill(value: number, start: number, end: int): Float64Array {
        return this.fill(value as double, start as int, end as int)
    }

    /**
     * Fills the Float64Array with specified value
     *
     * @param value new valuy
     *
     * @returns modified Float64Array
     */
    public fill(value: number, start: int, end: int): Float64Array {
        const k = normalizeIndex(start, this.length as int)
        const finalPos = normalizeIndex(end, this.length as int)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(double[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos, val)
    }

    /**
     * Assigns val as element on insertPos.
     * @description Added to avoid (un)packing a single value into array to use overloaded set(double[], insertPos)
     *
     * @param val value to set
     *
     * @param insertPos index to change
     */
    public set(insertPos: int, val: double): void {
        this.$_set(insertPos, val)
    }

    /**
     * Copies all elements of arr to the current Float64Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos: number): void {
        for (let i = 0; i < arr.length as int; ++i) {
            this.setUnsafe(insertPos as int + i, arr[i] as double)
        }
    }

    /**
     * Copies all elements of arr to the current Float64Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: double[], insertPos: int): void {
        for (let i = 0; i < arr.length as int; ++i) {
            this.setUnsafe(insertPos + i, arr[i])
        }
    }

    /**
     * Copies all elements of arr to the current Float64Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: double[]): void {
        this.set(arr, 0 as int)
    }

    /**
     * Creates an Float64Array from array-like argument
     *
     * @param o array-like object to initialize Float64Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Float64Array
     */
    public from(o: Object, mapFn: (e: Object) => double): Float64Array {
        let newF: (e: Object, index: number) => double =
            (e: Object, index: number): double => { return mapFn(e) }
        return this.from(o, newF)
    }

    /**
     * Creates an Float64Array from array-like argument
     *
     * @param o array-like object to initialize Float64Array
     *
     * @returns new Float64Array
     */
    public from(o: Object): Float64Array {
        throw new Error("Float64Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Float64Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Float64Array, false otherwise
     */
    public includes(e: number, fromIndex?: Number): boolean {
        if (fromIndex == undefined) {
            return this.includes(e as double, 0 as int)
        }
        return this.includes(e as double, fromIndex.intValue())
    }

    /**
     * Checks if specified argument is in Float64Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Float64Array, false otherwise
     */
    public includes(e: double, fromIndex: int): boolean {
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return false;
            }
            if (tmp.doubleValue() == e) {
                return true
            }
        }
        return false
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.indexOf(e as double, 0)
        }
        return this.indexOf(e as double, fromIndex.intValue())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: double, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            return -1
        }
        if (fromIndex < 0) {
            fromIndex += this.length as int
            // See TypedArray.indexOf JS docs
            if (fromIndex < 0) {
                fromIndex = 0
            }
        }
        for (let i = fromIndex; i < this.length as int; ++i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.doubleValue() == e) {
                return i
            }
        }
        return -1
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.length as int - 1; ++i) {
            res.append(this.getUnsafe(i) as number)
            res.append(s)
        }
        if (this.length as int > 0) {
            res.append(this.getUnsafe(this.length as int - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Float64Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Float64ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex?: Number): number {
        if (fromIndex == undefined) {
            return this.lastIndexOf(val as double, 0 as int)
        }
        return this.lastIndexOf(val as double, fromIndex.intValue()) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: double, fromIndex: number): number {
        return this.lastIndexOf(val, fromIndex as int) as number
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: double, fromIndex: int): int {
        if (fromIndex >= this.length as int) {
            fromIndex = this.length as int - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.length as int + fromIndex
        }

        for (let i = fromIndex; i >= 0; --i) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1
            }
            if (tmp.doubleValue() == val) {
                return i
            }
        }
        return -1
    }

    /**
    * Creates a new Float64Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Float64Array from data
    */
    public of(data: Object[]): Float64Array {
        throw new Error("Float64Array.of: not implemented")
    }

    /**
     * Creates a new Float64Array using reversed data from the current one
     *
     * @returns a new Float64Array using reversed data from the current one
     */
    public reverse(): Float64Array {
        for (let i: int = 0; i < this.length as int / 2 as int; i++) {
            const tmp = this.getUnsafe(this.length as int - 1 - i)
            this.setUnsafe(this.length as int - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Float64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Float64Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a slice of current Float64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Float64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Float64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Float64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Float64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Float64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Float64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Float64Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Float64Array.BYTES_PER_ELEMENT as int, relEnd * Float64Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Float64Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Float64Array.BYTES_PER_ELEMENT as int, relEnd * Float64Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Float64Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Float64Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin, this.length)
     */
    public slice(begin: number): Float64Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Float64Array using range [begin, this.length).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Float64Array with elements of current Float64Array[begin, this.length)
     */
    public slice(begin: int): Float64Array {
        return this.slice(begin, this.length as int)
    }

    /**
     * Creates a Float64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin?: number, end?: number): Float64Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.length as int))
    }

    /**
     * Creates a Float64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: number): Float64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Float64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: number, end: int): Float64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Float64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: number): Float64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Float64Array with the same underlying ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Float64Array with the same underlying ArrayBufferLike
     */
    public subarray(begin: int, end: int): Float64Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Float64Array(this.buffer, relStart * Float64Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Float64Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Float64Array with the same ArrayBufferLike
     */
    public subarray(begin: number): Float64Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Creates a Float64Array with the same ArrayBufferLike
     *
     * @param begin start index, inclusive
     *
     * @returns new Float64Array with the same ArrayBufferLike
     */
    public subarray(begin: int): Float64Array {
        return this.subarray(begin as int, this.length as int)
    }

    /**
     * Converts Float64Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Float64Array.toLocaleString: not implemented")
    }

    /**
     * Converts Float64Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Float64Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Float64Array {
        return new Float64Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Float64Array {
        return new Float64Array(this).sort()
    }

    /**
     * Returns a string representation of the Float64Array
     *
     * @returns a string representation of the Float64Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
        return new Float64ArrayIterator(this)
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
        return this.values()
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Float64Array with replaced value on index
     */
    public with(index: number, value: number): Float64Array {
        return this.with(index as int, value as double)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Float64Array with replaced value on index
     */
    public with(index: int, value: double): Float64Array {
        let res = new Float64Array(this)
        res.set(index, value)
        return res
    }

    /// === with element lambda functions ===
    /**
     * Checks that all elements of Float64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float64Array) => boolean =
            (element: number, index: number, array: Float64Array): boolean => { return fn(element) }
        return this.every(newF)
    }

    /**
     * creates a new Float64Array from current Float64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float64Array with elements from current Float64Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Float64Array {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val) }
        return this.findLast(newF) as number
    }

    /**
     * Finds an index of the last element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Float64Array
     *
     * @param fn function to apply
     *
     */
    public forEach(fn: (val: number) => double): void {
        let newF: (val: number, index: number, array: Float64Array) => double =
            (val: number, index: number, array: Float64Array): double => { return fn(val) }
        this.forEach(newF)
    }

    /**
     * Creates a new Float64Array using fn(arr[i]) over all elements of current Float64Array
     *
     * @param fn a function to apply for each element of current Float64Array
     *
     * @returns a new Float64Array where for each element from current Float64Array fn was applied
     */
    public map(fn: (val: number) => number): Float64Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Float64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float64Array) => boolean =
            (element: number, index: number, array: Float64Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    // NOTE (kprokopenko): this may be not skipped
    /**
     * Sorts in-place
     *
     * @param fn comparator —  used to determine the order of the elements.
     * fn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     * If omitted, the elements are sorted in ascending order.
     *
     * @returns sorted Float64Array
     */
    public sort(fn?: (a: number, b: number) => number): Float64Array {
        let arr: double[] = new double[this.length as int]
        for (let i = 0; i < this.length as int; ++i) {
            arr[i] = this.getUnsafe(i)
        }
        if (fn == undefined) {
            // NOTE (ikorobkov): needs to add signature for sort(double[])
            //sort(arr)
            for (let i = 0; i < this.length as int; ++i) {
                this.set(i, arr[i])
            }
        }
        else {
            // NOTE(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
            // let mustPrecede: (a: double, b: double) => boolean =
            //     (a: double, b: double): boolean => { return (fn(a, b) <= 0) }
            // sort(arr, mustPrecede)
            // for (let i = 0; i < this.length as int; ++i) {
            //     this.set(i, arr[i])
            // }
        }
        return this
    }

    /**
     * Checks that at least one element of Float64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Float64Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Float64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float64Array) => boolean =
            (element: number, index: number, array: Float64Array): boolean => { return fn(element, index as number) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Float64Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Float64Array) => number): number {
        let acc = this.getUnsafe(0) as number
        for (let i = 1; i < this.length as int; ++i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Float64Array) => number, init: number): number {
        let acc = init as number
        for (let i = this.length as int - 1; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Float64Array) => number): number {
        let acc: number = this.getUnsafe(this.length as int - 1) as number
        for (let i = this.length as int - 2; i >= 0; --i) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Creates a new Float64Array using fn(arr[i]) over all elements of current Float64Array.
     *
     * @param fn a function to apply for each element of current Float64Array
     *
     * @returns a new Float64Array where for each element from current Float64Array fn was applied
     */
    public map(fn: (val: number, index: number) => number): Float64Array {
        let resBuf = new ArrayBuffer(this.length as int * Float64Array.BYTES_PER_ELEMENT as int)
        let res = new Float64Array(resBuf, 0, resBuf.getByteLength() / Float64Array.BYTES_PER_ELEMENT as int)
        for (let i = 0; i < this.length as int; ++i) {
            res.set(i, fn(this.getUnsafe(i) as number, i as number) as double)
        }
        return res
    }

    /**
     * Checks that all elements of Float64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Float64Array) => boolean): boolean {
        for (let i = 0; i < this.length as int; ++i) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Float64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Float64Array) => boolean =
            (element: number, index: number, array: Float64Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Checks that all elements of Float64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: () => boolean): boolean {
        let newF: (element: number, index: number, array: Float64Array) => boolean =
            (element: number, index: number, array: Float64Array): boolean => { return fn() }
        return this.every(newF)
    }

    /**
     * Creates a new Float64Array from current Float64Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float64Array with elements from current Float64Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Float64Array) => boolean): Float64Array {
        let markers = new boolean[this.length as int]
        let resLen = 0
        for (let i = 0; i < this.length as int; ++i) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let resBuf = new ArrayBuffer(resLen * Float64Array.BYTES_PER_ELEMENT as int)
        let res = new Float64Array(resBuf, 0)
        for (let i = 0, j = 0; i < this.length as int; ++i) {
            if (markers[i]) {
                res.set(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Float64Array from current Float64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float64Array with elements from current Float64Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Float64Array {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val, index as number) }
        return this.filter(newF)
    }

    /**
     * creates a new Float64Array from current Float64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Float64Array with elements from current Float64Array that satisfy condition fn
     */
    public filter(fn: () => boolean): Float64Array {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn() }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Float64Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * NOTE: return double | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Float64Array) => boolean): Number | undefined {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.at(i)
            if (val == undefined) {
                return undefined
            }
            if (fn(val.valueOf(), i as number, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Finds the first element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): Number | undefined {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Float64Array) => boolean): number {
        for (let i = 0; i < this.length as int; ++i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val, index as number) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds an index of the first element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: () => boolean): number {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn() }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Float64Array) => boolean): double {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return val
            }
        }
        throw new Error("Float64Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): double {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val as number, index as number) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Float64Array) => boolean): number {
        for (let i = this.length as int - 1; i >= 0; --i) {
            let val = this.getUnsafe(i)
            if (fn(val as number, i as number, this)) {
                return i
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Float64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Float64Array) => boolean =
            (val: number, index: number, array: Float64Array): boolean => { return fn(val, index as number) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Float64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Float64Array) => double): void {
        for (let i = 0; i < this.length as int; ++i) {
            fn(this.getUnsafe(i) as number, i as number, this)
        }
    }

    /**
     * Applies a function over all elements of Float64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => double): void {
        let newF: (val: number, index: number, array: Float64Array) => double =
            (val: number, index: number, array: Float64Array): double => { return fn(val, index as number) }
        this.forEach(newF)
    }

    /**
     * Applies a function over all elements of Float64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: () => double): void {
        let newF: (val: number, index: number, array: Float64Array) => double =
            (val: number, index: number, array: Float64Array): double => { return fn() }
        this.forEach(newF)
    }

    /**
     * Creates an Float64Array from array-like argument
     *
     * @param o array-like object to initialize Float64Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Float64Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => double): Float64Array {
        throw new Error("Float64Array.from: not implemented")
    }

    internal getUnsafe(index: int): double {
        let byteIndex = index * Float64Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let res : long = 0
        let byteVal : long;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Float64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Float64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return Double.bitCastFromLong(res)
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i: int = 0; i < Float64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as ArrayBuffer).at(byteIndex as int + 7 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i: int = 0; i < Float64Array.BYTES_PER_ELEMENT as int; ++i) {
                    byteVal = (this.buffer as SharedArrayBuffer).at(byteIndex as int + 7 - i)
                    byteVal &= 0xff
                    res = (res | byteVal << (8 * i)) as long;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
            return Double.bitCastFromLong(res)
        }
    }

    internal setUnsafe(insertPos: int, val: double): void {
        let startByte = insertPos * Float64Array.BYTES_PER_ELEMENT as int + this.byteOffset as int
        let bits = Double.bitCastToLong(val);
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Float64Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + i, byteVal)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Float64Array.BYTES_PER_ELEMENT as int; ++i) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + i, byteVal)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Float64Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as ArrayBuffer).set(startByte + 7 - i, byteVal);
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Float64Array.BYTES_PER_ELEMENT as int; i++) {
                    let byteVal = ((bits >>> (i * 8)) & 0xff) as byte
                    (this.buffer as SharedArrayBuffer).set(startByte + 7 - i, byteVal);
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }

    /** Underlying ArrayBufferLike */
    public readonly buffer: ArrayBufferLike

    /** Byte offset within the underlying ArrayBufferLike */
    public readonly byteOffset: number

    /** Number of bytes used */
    public readonly byteLength: number

    /** Number of double stored in Float64Array */
    public readonly length: number

    /** String \"Float64Array\" */
    public readonly name = "Float64Array"
}
