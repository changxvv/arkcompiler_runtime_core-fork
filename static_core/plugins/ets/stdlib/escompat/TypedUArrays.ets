/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file. DO NOT EDIT
package escompat;

// NOTE(kprokopenko): placing into std.core.Runtime breaks frontend
native function RuntimeGetPlatformIsLittleEndian(): boolean;

const IS_LITTLE_ENDIAN = RuntimeGetPlatformIsLittleEndian();

class Uint8ClampedArrayIteratorKeys implements IterableIterator<Number> {
    private length: int = 0
    private idx: int = 0

    constructor(parent: Uint8ClampedArray) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Uint8ClampedArrayIterator implements IterableIterator<Number> {
    private parent: Uint8ClampedArray
    private idx: int = 0

    constructor(parent: Uint8ClampedArray) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent.getUnsafe(this.idx++)))
    }
}

/**
 * JS Uint8ClampedArray API-compatible class
 */
export class Uint8ClampedArray implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 1

    /** Underlying Buffer */
    public readonly buffer: ArrayBufferLike

    internal readonly byteOffsetInt: int
    internal readonly byteLengthInt: int
    internal readonly lengthInt: int

    /**
     * Creates an empty Uint8ClampedArray.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Uint8ClampedArray with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLengthInt = arr.length as int * Uint8ClampedArray.BYTES_PER_ELEMENT as int
        this.lengthInt = arr.length as int
        this.buffer = new ArrayBuffer(this.byteLengthInt)
        this.byteOffsetInt = 0
        for (let i: int = 0; i < this.lengthInt; ++i) {
            this.setUnsafe(i, Uint8ClampedArray.clamp(arr.at(i)!.intValue()))
        }
    }

    /**
     * Creates an Uint8ClampedArray with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint8ClampedArray
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset!.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        let intLength: int
        if (length != undefined) {
            intLength = length!.intValue()
            if (intLength > intByteLength / Uint8ClampedArray.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Uint8ClampedArray.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Uint8ClampedArray.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Uint8ClampedArray.BYTES_PER_ELEMENT as int
        }
        this.byteLengthInt = intByteLength
        this.byteOffsetInt = intByteOffset
        this.lengthInt = intLength
        this.buffer = buf
    }

    /**
     * Creates an Uint8ClampedArray with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Uint8ClampedArray with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint8ClampedArray
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint8ClampedArray with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint8ClampedArray with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint8ClampedArray
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint8ClampedArray with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint8ClampedArray with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLengthInt = (buf as ArrayBuffer).getByteLength()
            if (this.byteLengthInt % Uint8ClampedArray.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of int as Uint8ClampedArray.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint8ClampedArray.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLengthInt = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLengthInt % Uint8ClampedArray.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of int as Uint8ClampedArray.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint8ClampedArray.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLengthInt = arr.length as int * Uint8ClampedArray.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                this.setUnsafe(i, Uint8ClampedArray.clamp(arr.$_get(i).intValue()))
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

     /**
     * Creates an Uint8ClampedArray with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.lengthInt = length
        this.byteLengthInt = length * Uint8ClampedArray.BYTES_PER_ELEMENT as int
        this.byteOffsetInt = 0
        this.buffer = new ArrayBuffer(this.byteLengthInt)
    }

    /**
     * Creates an Uint8ClampedArray with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Uint8ClampedArray.
     *
     * @param other data initializer
     */
    public constructor(other: Uint8ClampedArray) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLengthInt = other.byteLength as int
        this.lengthInt = other.length as int
        this.byteOffsetInt = 0
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index if index is correct.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index
        } else {
            k = this.lengthInt + index
        }
        if (k < 0 || k >= this.lengthInt) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(i: int): number {
        if (i < 0 || i >= this.lengthInt) {
            throw new RangeError("invalid offset")
        }
        return this.getUnsafe(i) as number
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        this.setUnsafeClamp(index, val as int)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        this.setUnsafeClamp(index, val)
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Uint8ClampedArray {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Uint8ClampedArray {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Uint8ClampedArray {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Uint8ClampedArray {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param insert insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Uint8ClampedArray {
        let toPos = normalizeIndex(target, this.lengthInt)
        let fromPos = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        let count: int = finalPos - fromPos
        if (count > (this.lengthInt - toPos)) {
            count = this.lengthInt - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint8ClampedArray.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Uint8ClampedArray {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint8ClampedArray.
     *
     * @param insert insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Uint8ClampedArray {
        return this.copyWithin(target, 0, this.lengthInt)
    }

    /**
     * Returns an iterator for all entries
     */
    // NOTE (ivan-tyulyandin): blocked by tuples implentation
    // public entries(): Iterator<[Int, Object]> {
    //     let ret: Entry<Int, Object> = new Entry<Int, Object>[this.lengthInt];
    //     for (let i: int = 0; i < this.lengthInt; i++) {
    //         ret[i] = new Entry<Int, Object>(i, this.at(i));
    //     }
    //     return new MapIterator<Int, Object>(ret);
    // }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: number, start?: number, end?: number): Uint8ClampedArray {
        return this.fill(value as int, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: number, start: int, end?: number): Uint8ClampedArray {
        return this.fill(value as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: number, start: int, end: number): Uint8ClampedArray {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: number, start: number, end: int): Uint8ClampedArray {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: number, start: int, end: int): Uint8ClampedArray {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: int, start?: number, end?: number): Uint8ClampedArray {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: int, start: int, end?: number): Uint8ClampedArray {
        return this.fill(value, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: int, start: int, end: number): Uint8ClampedArray {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: int, start: number, end: int): Uint8ClampedArray {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint8ClampedArray with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8ClampedArray
     */
    public fill(value: int, start: int, end: int): Uint8ClampedArray {
        value = Uint8ClampedArray.clamp(value);
        const k = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: int): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: int): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Copies all elements of arr to the current Uint8ClampedArray starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos1: number): void {
        const insertPos = insertPos1 as int
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: int[]): size of arr is greater than Uint8ClampedArray.length")
        }
        for (let i = 0; i < arr.length; i++) {
            this.setUnsafeClamp(insertPos as int + i as int, arr[i] as int)
        }
    }

    /**
     * Copies all elements of arr to the current Uint8ClampedArray starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: int[], insertPos: int): void {
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: int[]): size of arr is greater than Uint8ClampedArray.length")
        }
        for (let i = 0; i < arr.length; i++) {
            this.setUnsafeClamp(insertPos + i, arr[i])
        }
    }

    /**
     * Copies all elements of arr to the current Uint8ClampedArray.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0)
    }

    /**
     * Copies all elements of arr to the current Uint8ClampedArray.
     *
     * @param arr array to copy data from
     */
    public set(arr: int[]): void {
        this.set(arr, 0)
    }

    /**
     * Creates an Uint8ClampedArray from array-like argument
     *
     * @param o array-like object to initialize Uint8ClampedArray
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint8ClampedArray
     */
    public from<T>(o: Iterator<T>, mapFn: (e: T) => number): Uint8ClampedArray {
        throw new Error("Uint8ClampedArray.from: not implemented")
    }

    /**
     * Creates an Uint8ClampedArray from array-like argument
     *
     * @param o array-like object to initialize Uint8ClampedArray
     *
     * @returns new Uint8ClampedArray
     */
    public from(o: Iterator<Number>): Uint8ClampedArray {
        throw new Error("Uint8ClampedArray.from: not implemented")
    }

    /**
     * Checks if specified argument is in Uint8ClampedArray
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint8ClampedArray, false otherwise
     */
    public includes(e: number, fromIndex: number): boolean {
        return this.includes(e as int, fromIndex as int)
    }

    /**
     * Checks if specified argument is in Uint8ClampedArray
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint8ClampedArray, false otherwise
     */
    public includes(e: int, fromIndex: int): boolean {
        return this.indexOf(e, fromIndex) != -1
    }

    /**
     * Checks if specified argument is in Uint8ClampedArray
     *
     * @param e search element
     *
     * @returns true if e is in Uint8ClampedArray, false otherwise
     */
    public includes(e: number): boolean {
        return this.includes(e as int, 0)
    }

    /**
     * Checks if specified argument is in Uint8ClampedArray
     *
     * @param e search element
     *
     * @returns true if e is in Uint8ClampedArray, false otherwise
     */
    public includes(e: int): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex: number): number {
        return this.indexOf(e as int, fromIndex as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int, fromIndex: int): int {
        throw new Error("not implemented")
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number): number {
        return this.indexOf(e as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.lengthInt - 1; i++) {
            res.append(this.getUnsafe(i) as number)
            res.append(s!)
        }
        if (this.lengthInt > 0) {
            res.append(this.getUnsafe(this.lengthInt - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Uint8ClampedArray
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Uint8ClampedArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex: number): number {
        return this.lastIndexOf(val as int, fromIndex as int)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: int, fromIndex: int): number {
        if (fromIndex >= this.lengthInt) {
            fromIndex = this.lengthInt - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.lengthInt + fromIndex
        }

        for (let i = fromIndex; i >= 0; i--) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1 as number
            }
            if (tmp!.intValue() == val) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: number): number {
        return this.lastIndexOf(val as int, this.lengthInt - 1)
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: int): number {
        return this.lastIndexOf(val, this.lengthInt - 1)
    }

   /**
    * Creates a new Uint8ClampedArray using initializer
    *
    * @param data initializer
    *
    * @returns a new Uint8ClampedArray from data
    */
    public of(...data: number[]): Uint8ClampedArray {
        throw new Error("Uint8ClampedArray.of: not implemented")
    }

    /**
     * Creates a new Uint8ClampedArray using reversed data from the current one
     *
     * @returns a new Uint8ClampedArray using reversed data from the current one
     */
    public reverse(): Uint8ClampedArray {
        for (let i: int = 0; i < this.lengthInt / 2 as int; i++) {
            const tmp = this.getUnsafe(this.lengthInt - 1 - i)
            this.setUnsafe(this.lengthInt - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Uint8ClampedArray {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Uint8ClampedArray {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Uint8ClampedArray {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Uint8ClampedArray {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Uint8ClampedArray {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Uint8ClampedArray.BYTES_PER_ELEMENT as int, relEnd * Uint8ClampedArray.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Uint8ClampedArray(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Uint8ClampedArray.BYTES_PER_ELEMENT as int, relEnd * Uint8ClampedArray.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Uint8ClampedArray(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin, this.lengthInt)
     */
    public slice(begin: number): Uint8ClampedArray {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Uint8ClampedArray using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint8ClampedArray with elements of current Uint8ClampedArray[begin, this.lengthInt)
     */
    public slice(begin: int): Uint8ClampedArray {
        return this.slice(begin, this.lengthInt)
    }

    /**
     * Sorts in-place according to the numeric ordering
     *
     * @returns sorted Uint8ClampedArray
     */
    public sort(): Uint8ClampedArray {
        let newF = (a: number, b: number): number => { throw new Error("not implemented") }
        return this.sort(newF)
    }

    /**
     * Creates a Uint8ClampedArray with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8ClampedArray with the same underlying Buffer
     */
    public subarray(begin?: number, end?: number): Uint8ClampedArray {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a Uint8ClampedArray with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8ClampedArray with the same underlying Buffer
     */
    public subarray(begin: number, end: number): Uint8ClampedArray {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint8ClampedArray with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8ClampedArray with the same underlying Buffer
     */
    public subarray(begin: number, end: int): Uint8ClampedArray {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint8ClampedArray with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8ClampedArray with the same underlying Buffer
     */
    public subarray(begin: int, end: number): Uint8ClampedArray {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint8ClampedArray with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8ClampedArray with the same underlying Buffer
     */
    public subarray(begin: int, end: int): Uint8ClampedArray {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Uint8ClampedArray(this.buffer, relStart * Uint8ClampedArray.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Uint8ClampedArray with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint8ClampedArray with the same Buffer
     */
    public subarray(begin: number): Uint8ClampedArray {
        return this.subarray(begin as int, this.lengthInt)
    }

    /**
     * Creates a Uint8ClampedArray with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint8ClampedArray with the same Buffer
     */
    public subarray(begin: int): Uint8ClampedArray {
        return this.subarray(begin, this.lengthInt)
    }

    /**
     * Converts Uint8ClampedArray to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Uint8ClampedArray.toLocaleString: not implemented")
    }

    /**
     * Converts Uint8ClampedArray to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Uint8ClampedArray to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Uint8ClampedArray {
        return new Uint8ClampedArray(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Uint8ClampedArray {
        return new Uint8ClampedArray(this).sort()
    }

    /**
     * Returns a string representation of the Uint8ClampedArray
     *
     * @returns a string representation of the Uint8ClampedArray
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
         return new Uint8ClampedArrayIterator(this);
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint8ClampedArray with replaced value on index
     */
    public with(index: number, value: number): Uint8ClampedArray {
        return this.with(index as int, value as int)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint8ClampedArray with replaced value on index
     */
    /* public */ internal with(index: int, value: int): Uint8ClampedArray {
        let res = new Uint8ClampedArray(this)
        res.setUnsafeClamp(index, value)
        return res
    }

    /// === with element lambda functions ===
    

    /**
     * Checks that all elements of Uint8ClampedArray satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8ClampedArray) => boolean =
            (element: number, index: number, array: Uint8ClampedArray): boolean => { return fn(element) }
        return this.every(newF)
    }
    /**
     * creates a new Uint8ClampedArray from current Uint8ClampedArray based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint8ClampedArray with elements from current Uint8ClampedArray that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Uint8ClampedArray {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint8ClampedArray
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number) => number): void {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => number =
            (val: number, index: number, array: Uint8ClampedArray): number => { return fn(val) }
        this.forEach(newF)
    }

   /**
    * Creates a new Uint8ClampedArray using fn(arr[i]) over all elements of current Uint8ClampedArray
    *
    * @param fn a function to apply for each element of current Uint8ClampedArray
    *
    * @returns a new Uint8ClampedArray where for each element from current Uint8ClampedArray fn was applied
    */
    public map(fn: (val: number) => number): Uint8ClampedArray {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Uint8ClampedArray satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8ClampedArray) => boolean =
            (element: number, index: number, array: Uint8ClampedArray): boolean => { return fn(element) }
        return this.some(newF)
    }

    /**
     * Sorts in-place
     *
     * @param fn comparator
     *
     * @returns sorted Uint8ClampedArray
     */
    public sort(fn: (a: number, b: number) => number): Uint8ClampedArray {
        let arr: int[] = new int[this.lengthInt]
        for (let i = 0; i < this.lengthInt; i++) {
            arr[i] = this.getUnsafe(i)
        }
        // TODO(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
        /*
            let mustPrecede: (a: int, b: int) => boolean =
                (a: int, b: int): boolean => { return (fn(a, b) <= 0) }
            sort(arr, mustPrecede)
            for (let i = 0; i < this.lengthInt; i++) {
                this.setUnsafe(i, arr[i])
            }
        */
        return this;
    }

    /**
     * Checks that at least one element of Uint8ClampedArray satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Uint8ClampedArray) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Uint8ClampedArray satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8ClampedArray) => boolean =
            (element: number, index: number, array: Uint8ClampedArray): boolean => { return fn(element, index) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint8ClampedArray) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint8ClampedArray) => number): number {
        let acc = this.$_get(0) as number
        for (let i = 1; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint8ClampedArray) => number, init: number): number {
        let acc = init
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint8ClampedArray) => number): number {
        let acc: number = this.$_get(this.lengthInt - 1) as number
        for (let i = this.lengthInt - 2; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
    * Creates a new Uint8ClampedArray using fn(arr[i]) over all elements of current Uint8ClampedArray.
    *
    * @param fn a function to apply for each element of current Uint8ClampedArray
    *
    * @returns a new Uint8ClampedArray where for each element from current Uint8ClampedArray fn was applied
    */
    public map(fn: (val: number, index: number) => number): Uint8ClampedArray {
        let resBuf = new ArrayBuffer(this.lengthInt * Uint8ClampedArray.BYTES_PER_ELEMENT as int)
        let res = new Uint8ClampedArray(resBuf)
        for (let i = 0; i < this.lengthInt; i++) {
            const fnRes = fn(this.getUnsafe(i) as number, i as number);
            res.setUnsafeClamp(i, fnRes as int)
        }
        return res
    }

    /**
     * Checks that all elements of Uint8ClampedArray satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Uint8ClampedArray) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Uint8ClampedArray satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8ClampedArray) => boolean =
            (element: number, index: number, array: Uint8ClampedArray): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Creates a new Uint8ClampedArray from current Uint8ClampedArray based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint8ClampedArray with elements from current Uint8ClampedArray that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Uint8ClampedArray) => boolean): Uint8ClampedArray {
        let markers = new boolean[this.lengthInt]
        let resLen = 0
        for (let i = 0; i < this.lengthInt; i++) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let res = new Uint8ClampedArray(resLen)
        for (let i = 0, j = 0; i < this.lengthInt; i++) {
            if (markers[i]) {
                res.setUnsafe(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Uint8ClampedArray from current Uint8ClampedArray based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint8ClampedArray with elements from current Uint8ClampedArray that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Uint8ClampedArray {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val, index) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * TODO: return int | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Uint8ClampedArray) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint8ClampedArray.find: not implemented if element was not found")
    }

    /**
     * Finds the first element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Uint8ClampedArray) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val, index) }
        return this.findIndex(newF)
    }

    /**
     * Finds the last element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Uint8ClampedArray) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint8ClampedArray.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val, index) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Uint8ClampedArray) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Uint8ClampedArray that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => boolean =
            (val: number, index: number, array: Uint8ClampedArray): boolean => { return fn(val, index) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint8ClampedArray
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Uint8ClampedArray) => number): void {
        for (let i = 0; i < this.lengthInt; i++) {
            let tmp = fn(this.getUnsafe(i) as number, i as number, this)
            this.setUnsafeClamp(i, tmp as int)
        }
        //NOTE (ikorobkov): needs check the correctness of this function
        //throw new Error("Uint8ClampedArray.forEach: has to return undefined, but returns void for now")
    }

    /**
     * Applies a function over all elements of Uint8ClampedArray
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => number): void {
        let newF: (val: number, index: number, array: Uint8ClampedArray) => number =
            (val: number, index: number, array: Uint8ClampedArray): number => { return fn(val, index) }
        this.forEach(newF)
    }

    /**
     * Creates an Uint8ClampedArray from array-like argument
     *
     * @param o array-like object to initialize Uint8ClampedArray
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint8ClampedArray
     */
    public from(o: Object, mapFn: (e: Object, index: number) => int): Uint8ClampedArray {
        throw new Error("Uint8ClampedArray.from: not implemented")
    }

    /** Byte offset within the underlying Buffer */
    public get byteOffset(): number {
        return this.byteOffsetInt
    }

    /** Number of bytes used */
    public get byteLength(): number {
        return this.byteLengthInt
    }

    /** Number of int stored in Uint8ClampedArray */
    public get length(): number {
        return this.lengthInt
    }

    /** String \"Uint8ClampedArray\" */
    public readonly name = "Uint8ClampedArray"

    private static clamp(val: int): int {
        if (val > 255) {
            val = 255
        } else if (val < 0) {
            val = 0
        }
        return val;
    }

    internal setUnsafeClamp(insertPos: int, val: int): void {
        val = Uint8ClampedArray.clamp(val);
        this.setUnsafe(insertPos, val)
    }

    internal getUnsafe(index: int): int {
        index = index * Uint8ClampedArray.BYTES_PER_ELEMENT as int + this.byteOffsetInt
        let res: int = 0
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + 0 - i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + 0 - i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
        return res;
    }

    internal setUnsafe(index: int, val: int): void {
        index = index * Uint8ClampedArray.BYTES_PER_ELEMENT as int + this.byteOffsetInt;
        let res: int = 0;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + 0 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8ClampedArray.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + 0 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }
}

class Uint8ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int = 0
    private idx: int = 0

    constructor(parent: Uint8Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Uint8ArrayIterator implements IterableIterator<Number> {
    private parent: Uint8Array
    private idx: int = 0

    constructor(parent: Uint8Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent.getUnsafe(this.idx++)))
    }
}

/**
 * JS Uint8Array API-compatible class
 */
export class Uint8Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 1

    /** Underlying Buffer */
    public readonly buffer: ArrayBufferLike

    internal readonly byteOffsetInt: int
    internal readonly byteLengthInt: int
    internal readonly lengthInt: int

    /**
     * Creates an empty Uint8Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Uint8Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLengthInt = arr.length as int * Uint8Array.BYTES_PER_ELEMENT as int
        this.lengthInt = arr.length as int
        this.buffer = new ArrayBuffer(this.byteLengthInt)
        this.byteOffsetInt = 0
        for (let i: int = 0; i < this.lengthInt; ++i) {
            this.setUnsafe(i, arr.$_get(i).intValue())
        }
    }

    /**
     * Creates an Uint8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset!.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        let intLength: int
        if (length != undefined) {
            intLength = length!.intValue()
            if (intLength > intByteLength / Uint8Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Uint8Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Uint8Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Uint8Array.BYTES_PER_ELEMENT as int
        }
        this.byteLengthInt = intByteLength
        this.byteOffsetInt = intByteOffset
        this.lengthInt = intLength
        this.buffer = buf
    }

    /**
     * Creates an Uint8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Uint8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint8Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint8Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint8Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint8Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint8Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLengthInt = (buf as ArrayBuffer).getByteLength()
            if (this.byteLengthInt % Uint8Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of int as Uint8Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint8Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLengthInt = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLengthInt % Uint8Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of int as Uint8Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint8Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLengthInt = arr.length as int * Uint8Array.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                this.setUnsafe(i, arr.$_get(i).intValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

     /**
     * Creates an Uint8Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.lengthInt = length
        this.byteLengthInt = length * Uint8Array.BYTES_PER_ELEMENT as int
        this.byteOffsetInt = 0
        this.buffer = new ArrayBuffer(this.byteLengthInt)
    }

    /**
     * Creates an Uint8Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Uint8Array.
     *
     * @param other data initializer
     */
    public constructor(other: Uint8Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLengthInt = other.byteLength as int
        this.lengthInt = other.length as int
        this.byteOffsetInt = 0
    }
    
    internal zeroIfInfinity(val: number): number {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as number
        }
        return val as number
    }

    internal zeroIfInfinity(val: int): int {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as int
        }
        return val
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index if index is correct.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index
        } else {
            k = this.lengthInt + index
        }
        if (k < 0 || k >= this.lengthInt) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(i: int): number {
        if (i < 0 || i >= this.lengthInt) {
            throw new RangeError("invalid offset")
        }
        return this.getUnsafe(i) as number
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v as int)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v)
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Uint8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Uint8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Uint8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Uint8Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param insert insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Uint8Array {
        let toPos = normalizeIndex(target, this.lengthInt)
        let fromPos = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        let count: int = finalPos - fromPos
        if (count > (this.lengthInt - toPos)) {
            count = this.lengthInt - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint8Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Uint8Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint8Array.
     *
     * @param insert insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Uint8Array {
        return this.copyWithin(target, 0, this.lengthInt)
    }

    /**
     * Returns an iterator for all entries
     */
    // NOTE (ivan-tyulyandin): blocked by tuples implentation
    // public entries(): Iterator<[Int, Object]> {
    //     let ret: Entry<Int, Object> = new Entry<Int, Object>[this.lengthInt];
    //     for (let i: int = 0; i < this.lengthInt; i++) {
    //         ret[i] = new Entry<Int, Object>(i, this.at(i));
    //     }
    //     return new MapIterator<Int, Object>(ret);
    // }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: number, start?: number, end?: number): Uint8Array {
        return this.fill(value as int, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: number, start: int, end?: number): Uint8Array {
        return this.fill(value as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: number, start: int, end: number): Uint8Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: number, start: number, end: int): Uint8Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: number, start: int, end: int): Uint8Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: int, start?: number, end?: number): Uint8Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: int, start: int, end?: number): Uint8Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: int, start: int, end: number): Uint8Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: int, start: number, end: int): Uint8Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint8Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint8Array
     */
    public fill(value: int, start: int, end: int): Uint8Array {
        const k = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: int): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: int): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Copies all elements of arr to the current Uint8Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos1: number): void {
        const insertPos = insertPos1 as int
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: int[]): size of arr is greater than Uint8Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos as int + i as int, v as int)
        }
    }

    /**
     * Copies all elements of arr to the current Uint8Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: int[], insertPos: int): void {
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: int[]): size of arr is greater than Uint8Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current Uint8Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0)
    }

    /**
     * Copies all elements of arr to the current Uint8Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: int[]): void {
        this.set(arr, 0)
    }

    /**
     * Creates an Uint8Array from array-like argument
     *
     * @param o array-like object to initialize Uint8Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint8Array
     */
    public from<T>(o: Iterator<T>, mapFn: (e: T) => number): Uint8Array {
        throw new Error("Uint8Array.from: not implemented")
    }

    /**
     * Creates an Uint8Array from array-like argument
     *
     * @param o array-like object to initialize Uint8Array
     *
     * @returns new Uint8Array
     */
    public from(o: Iterator<Number>): Uint8Array {
        throw new Error("Uint8Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Uint8Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint8Array, false otherwise
     */
    public includes(e: number, fromIndex: number): boolean {
        return this.includes(e as int, fromIndex as int)
    }

    /**
     * Checks if specified argument is in Uint8Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint8Array, false otherwise
     */
    public includes(e: int, fromIndex: int): boolean {
        return this.indexOf(e, fromIndex) != -1
    }

    /**
     * Checks if specified argument is in Uint8Array
     *
     * @param e search element
     *
     * @returns true if e is in Uint8Array, false otherwise
     */
    public includes(e: number): boolean {
        return this.includes(e as int, 0)
    }

    /**
     * Checks if specified argument is in Uint8Array
     *
     * @param e search element
     *
     * @returns true if e is in Uint8Array, false otherwise
     */
    public includes(e: int): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex: number): number {
        return this.indexOf(e as int, fromIndex as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int, fromIndex: int): int {
        throw new Error("not implemented")
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number): number {
        return this.indexOf(e as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.lengthInt - 1; i++) {
            res.append(this.getUnsafe(i) as number)
            res.append(s!)
        }
        if (this.lengthInt > 0) {
            res.append(this.getUnsafe(this.lengthInt - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Uint8Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Uint8ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex: number): number {
        return this.lastIndexOf(val as int, fromIndex as int)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: int, fromIndex: int): number {
        if (fromIndex >= this.lengthInt) {
            fromIndex = this.lengthInt - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.lengthInt + fromIndex
        }

        for (let i = fromIndex; i >= 0; i--) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1 as number
            }
            if (tmp!.intValue() == val) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: number): number {
        return this.lastIndexOf(val as int, this.lengthInt - 1)
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: int): number {
        return this.lastIndexOf(val, this.lengthInt - 1)
    }

   /**
    * Creates a new Uint8Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Uint8Array from data
    */
    public of(...data: number[]): Uint8Array {
        throw new Error("Uint8Array.of: not implemented")
    }

    /**
     * Creates a new Uint8Array using reversed data from the current one
     *
     * @returns a new Uint8Array using reversed data from the current one
     */
    public reverse(): Uint8Array {
        for (let i: int = 0; i < this.lengthInt / 2 as int; i++) {
            const tmp = this.getUnsafe(this.lengthInt - 1 - i)
            this.setUnsafe(this.lengthInt - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Uint8Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Uint8Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Uint8Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Uint8Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Uint8Array {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Uint8Array.BYTES_PER_ELEMENT as int, relEnd * Uint8Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Uint8Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Uint8Array.BYTES_PER_ELEMENT as int, relEnd * Uint8Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Uint8Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin, this.lengthInt)
     */
    public slice(begin: number): Uint8Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Uint8Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint8Array with elements of current Uint8Array[begin, this.lengthInt)
     */
    public slice(begin: int): Uint8Array {
        return this.slice(begin, this.lengthInt)
    }

    /**
     * Sorts in-place according to the numeric ordering
     *
     * @returns sorted Uint8Array
     */
    public sort(): Uint8Array {
        let newF = (a: number, b: number): number => { throw new Error("not implemented") }
        return this.sort(newF)
    }

    /**
     * Creates a Uint8Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8Array with the same underlying Buffer
     */
    public subarray(begin?: number, end?: number): Uint8Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a Uint8Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8Array with the same underlying Buffer
     */
    public subarray(begin: number, end: number): Uint8Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint8Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8Array with the same underlying Buffer
     */
    public subarray(begin: number, end: int): Uint8Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint8Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8Array with the same underlying Buffer
     */
    public subarray(begin: int, end: number): Uint8Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint8Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint8Array with the same underlying Buffer
     */
    public subarray(begin: int, end: int): Uint8Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Uint8Array(this.buffer, relStart * Uint8Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Uint8Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint8Array with the same Buffer
     */
    public subarray(begin: number): Uint8Array {
        return this.subarray(begin as int, this.lengthInt)
    }

    /**
     * Creates a Uint8Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint8Array with the same Buffer
     */
    public subarray(begin: int): Uint8Array {
        return this.subarray(begin, this.lengthInt)
    }

    /**
     * Converts Uint8Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Uint8Array.toLocaleString: not implemented")
    }

    /**
     * Converts Uint8Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Uint8Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Uint8Array {
        return new Uint8Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Uint8Array {
        return new Uint8Array(this).sort()
    }

    /**
     * Returns a string representation of the Uint8Array
     *
     * @returns a string representation of the Uint8Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
         return new Uint8ArrayIterator(this);
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint8Array with replaced value on index
     */
    public with(index: number, value: number): Uint8Array {
        return this.with(index as int, value as int)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint8Array with replaced value on index
     */
    /* public */ internal with(index: int, value: int): Uint8Array {
        let res = new Uint8Array(this)
        res.setUnsafeClamp(index, value)
        return res
    }

    /// === with element lambda functions ===
    

    /**
     * Checks that all elements of Uint8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8Array) => boolean =
            (element: number, index: number, array: Uint8Array): boolean => { return fn(element) }
        return this.every(newF)
    }
    /**
     * creates a new Uint8Array from current Uint8Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint8Array with elements from current Uint8Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Uint8Array {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint8Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number) => number): void {
        let newF: (val: number, index: number, array: Uint8Array) => number =
            (val: number, index: number, array: Uint8Array): number => { return fn(val) }
        this.forEach(newF)
    }

   /**
    * Creates a new Uint8Array using fn(arr[i]) over all elements of current Uint8Array
    *
    * @param fn a function to apply for each element of current Uint8Array
    *
    * @returns a new Uint8Array where for each element from current Uint8Array fn was applied
    */
    public map(fn: (val: number) => number): Uint8Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Uint8Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8Array) => boolean =
            (element: number, index: number, array: Uint8Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    /**
     * Sorts in-place
     *
     * @param fn comparator
     *
     * @returns sorted Uint8Array
     */
    public sort(fn: (a: number, b: number) => number): Uint8Array {
        let arr: int[] = new int[this.lengthInt]
        for (let i = 0; i < this.lengthInt; i++) {
            arr[i] = this.getUnsafe(i)
        }
        // TODO(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
        /*
            let mustPrecede: (a: int, b: int) => boolean =
                (a: int, b: int): boolean => { return (fn(a, b) <= 0) }
            sort(arr, mustPrecede)
            for (let i = 0; i < this.lengthInt; i++) {
                this.setUnsafe(i, arr[i])
            }
        */
        return this;
    }

    /**
     * Checks that at least one element of Uint8Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Uint8Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Uint8Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8Array) => boolean =
            (element: number, index: number, array: Uint8Array): boolean => { return fn(element, index) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint8Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint8Array) => number): number {
        let acc = this.$_get(0) as number
        for (let i = 1; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint8Array) => number, init: number): number {
        let acc = init
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint8Array) => number): number {
        let acc: number = this.$_get(this.lengthInt - 1) as number
        for (let i = this.lengthInt - 2; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
    * Creates a new Uint8Array using fn(arr[i]) over all elements of current Uint8Array.
    *
    * @param fn a function to apply for each element of current Uint8Array
    *
    * @returns a new Uint8Array where for each element from current Uint8Array fn was applied
    */
    public map(fn: (val: number, index: number) => number): Uint8Array {
        let resBuf = new ArrayBuffer(this.lengthInt * Uint8Array.BYTES_PER_ELEMENT as int)
        let res = new Uint8Array(resBuf)
        for (let i = 0; i < this.lengthInt; i++) {
            const fnRes = fn(this.getUnsafe(i) as number, i as number);
            res.setUnsafeClamp(i, fnRes as int)
        }
        return res
    }

    /**
     * Checks that all elements of Uint8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Uint8Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Uint8Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint8Array) => boolean =
            (element: number, index: number, array: Uint8Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Creates a new Uint8Array from current Uint8Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint8Array with elements from current Uint8Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Uint8Array) => boolean): Uint8Array {
        let markers = new boolean[this.lengthInt]
        let resLen = 0
        for (let i = 0; i < this.lengthInt; i++) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let res = new Uint8Array(resLen)
        for (let i = 0, j = 0; i < this.lengthInt; i++) {
            if (markers[i]) {
                res.setUnsafe(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Uint8Array from current Uint8Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint8Array with elements from current Uint8Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Uint8Array {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val, index) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint8Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * TODO: return int | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Uint8Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint8Array.find: not implemented if element was not found")
    }

    /**
     * Finds the first element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Uint8Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val, index) }
        return this.findIndex(newF)
    }

    /**
     * Finds the last element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Uint8Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint8Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val, index) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Uint8Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Uint8Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint8Array) => boolean =
            (val: number, index: number, array: Uint8Array): boolean => { return fn(val, index) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint8Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Uint8Array) => number): void {
        for (let i = 0; i < this.lengthInt; i++) {
            let tmp = fn(this.getUnsafe(i) as number, i as number, this)
            this.setUnsafeClamp(i, tmp as int)
        }
        //NOTE (ikorobkov): needs check the correctness of this function
        //throw new Error("Uint8Array.forEach: has to return undefined, but returns void for now")
    }

    /**
     * Applies a function over all elements of Uint8Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => number): void {
        let newF: (val: number, index: number, array: Uint8Array) => number =
            (val: number, index: number, array: Uint8Array): number => { return fn(val, index) }
        this.forEach(newF)
    }

    /**
     * Creates an Uint8Array from array-like argument
     *
     * @param o array-like object to initialize Uint8Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint8Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => int): Uint8Array {
        throw new Error("Uint8Array.from: not implemented")
    }

    /** Byte offset within the underlying Buffer */
    public get byteOffset(): number {
        return this.byteOffsetInt
    }

    /** Number of bytes used */
    public get byteLength(): number {
        return this.byteLengthInt
    }

    /** Number of int stored in Uint8Array */
    public get length(): number {
        return this.lengthInt
    }

    /** String \"Uint8Array\" */
    public readonly name = "Uint8Array"

    private static clamp(val: int): int {
        return val;
    }

    internal setUnsafeClamp(insertPos: int, val: int): void {
        this.setUnsafe(insertPos, val)
    }

    internal getUnsafe(index: int): int {
        index = index * Uint8Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt
        let res: int = 0
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + 0 - i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + 0 - i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
        return res;
    }

    internal setUnsafe(index: int, val: int): void {
        index = index * Uint8Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt;
        let res: int = 0;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + 0 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint8Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + 0 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }
}

class Uint16ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int = 0
    private idx: int = 0

    constructor(parent: Uint16Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Uint16ArrayIterator implements IterableIterator<Number> {
    private parent: Uint16Array
    private idx: int = 0

    constructor(parent: Uint16Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent.getUnsafe(this.idx++)))
    }
}

/**
 * JS Uint16Array API-compatible class
 */
export class Uint16Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 2

    /** Underlying Buffer */
    public readonly buffer: ArrayBufferLike

    internal readonly byteOffsetInt: int
    internal readonly byteLengthInt: int
    internal readonly lengthInt: int

    /**
     * Creates an empty Uint16Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Uint16Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLengthInt = arr.length as int * Uint16Array.BYTES_PER_ELEMENT as int
        this.lengthInt = arr.length as int
        this.buffer = new ArrayBuffer(this.byteLengthInt)
        this.byteOffsetInt = 0
        for (let i: int = 0; i < this.lengthInt; ++i) {
            this.setUnsafe(i, arr.$_get(i).intValue())
        }
    }

    /**
     * Creates an Uint16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset!.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % Uint16Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 2 as Uint16Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % Uint16Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 2 as Uint16Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length!.intValue()
            if (intLength > intByteLength / Uint16Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Uint16Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Uint16Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Uint16Array.BYTES_PER_ELEMENT as int
        }
        this.byteLengthInt = intByteLength
        this.byteOffsetInt = intByteOffset
        this.lengthInt = intLength
        this.buffer = buf
    }

    /**
     * Creates an Uint16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Uint16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint16Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint16Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type int in newly created Uint16Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint16Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint16Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLengthInt = (buf as ArrayBuffer).getByteLength()
            if (this.byteLengthInt % Uint16Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of int as Uint16Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint16Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLengthInt = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLengthInt % Uint16Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of int as Uint16Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint16Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLengthInt = arr.length as int * Uint16Array.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                this.setUnsafe(i, arr.$_get(i).intValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

     /**
     * Creates an Uint16Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.lengthInt = length
        this.byteLengthInt = length * Uint16Array.BYTES_PER_ELEMENT as int
        this.byteOffsetInt = 0
        this.buffer = new ArrayBuffer(this.byteLengthInt)
    }

    /**
     * Creates an Uint16Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Uint16Array.
     *
     * @param other data initializer
     */
    public constructor(other: Uint16Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLengthInt = other.byteLength as int
        this.lengthInt = other.length as int
        this.byteOffsetInt = 0
    }
    
    internal zeroIfInfinity(val: number): number {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as number
        }
        return val as number
    }

    internal zeroIfInfinity(val: int): int {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as int
        }
        return val
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index if index is correct.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index
        } else {
            k = this.lengthInt + index
        }
        if (k < 0 || k >= this.lengthInt) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(i: int): number {
        if (i < 0 || i >= this.lengthInt) {
            throw new RangeError("invalid offset")
        }
        return this.getUnsafe(i) as number
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v as int)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v)
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Uint16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Uint16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Uint16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Uint16Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param insert insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Uint16Array {
        let toPos = normalizeIndex(target, this.lengthInt)
        let fromPos = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        let count: int = finalPos - fromPos
        if (count > (this.lengthInt - toPos)) {
            count = this.lengthInt - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint16Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Uint16Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint16Array.
     *
     * @param insert insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Uint16Array {
        return this.copyWithin(target, 0, this.lengthInt)
    }

    /**
     * Returns an iterator for all entries
     */
    // NOTE (ivan-tyulyandin): blocked by tuples implentation
    // public entries(): Iterator<[Int, Object]> {
    //     let ret: Entry<Int, Object> = new Entry<Int, Object>[this.lengthInt];
    //     for (let i: int = 0; i < this.lengthInt; i++) {
    //         ret[i] = new Entry<Int, Object>(i, this.at(i));
    //     }
    //     return new MapIterator<Int, Object>(ret);
    // }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: number, start?: number, end?: number): Uint16Array {
        return this.fill(value as int, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: number, start: int, end?: number): Uint16Array {
        return this.fill(value as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: number, start: int, end: number): Uint16Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: number, start: number, end: int): Uint16Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: number, start: int, end: int): Uint16Array {
        return this.fill(value as int, start as int, end as int)
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: int, start?: number, end?: number): Uint16Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: int, start: int, end?: number): Uint16Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: int, start: int, end: number): Uint16Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: int, start: number, end: int): Uint16Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint16Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint16Array
     */
    public fill(value: int, start: int, end: int): Uint16Array {
        const k = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: int): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: int): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Copies all elements of arr to the current Uint16Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos1: number): void {
        const insertPos = insertPos1 as int
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: int[]): size of arr is greater than Uint16Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos as int + i as int, v as int)
        }
    }

    /**
     * Copies all elements of arr to the current Uint16Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: int[], insertPos: int): void {
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: int[]): size of arr is greater than Uint16Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current Uint16Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0)
    }

    /**
     * Copies all elements of arr to the current Uint16Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: int[]): void {
        this.set(arr, 0)
    }

    /**
     * Creates an Uint16Array from array-like argument
     *
     * @param o array-like object to initialize Uint16Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint16Array
     */
    public from<T>(o: Iterator<T>, mapFn: (e: T) => number): Uint16Array {
        throw new Error("Uint16Array.from: not implemented")
    }

    /**
     * Creates an Uint16Array from array-like argument
     *
     * @param o array-like object to initialize Uint16Array
     *
     * @returns new Uint16Array
     */
    public from(o: Iterator<Number>): Uint16Array {
        throw new Error("Uint16Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Uint16Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint16Array, false otherwise
     */
    public includes(e: number, fromIndex: number): boolean {
        return this.includes(e as int, fromIndex as int)
    }

    /**
     * Checks if specified argument is in Uint16Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint16Array, false otherwise
     */
    public includes(e: int, fromIndex: int): boolean {
        return this.indexOf(e, fromIndex) != -1
    }

    /**
     * Checks if specified argument is in Uint16Array
     *
     * @param e search element
     *
     * @returns true if e is in Uint16Array, false otherwise
     */
    public includes(e: number): boolean {
        return this.includes(e as int, 0)
    }

    /**
     * Checks if specified argument is in Uint16Array
     *
     * @param e search element
     *
     * @returns true if e is in Uint16Array, false otherwise
     */
    public includes(e: int): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex: number): number {
        return this.indexOf(e as int, fromIndex as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int, fromIndex: int): int {
        throw new Error("not implemented")
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number): number {
        return this.indexOf(e as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: int): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.lengthInt - 1; i++) {
            res.append(this.getUnsafe(i) as number)
            res.append(s!)
        }
        if (this.lengthInt > 0) {
            res.append(this.getUnsafe(this.lengthInt - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Uint16Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Uint16ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex: number): number {
        return this.lastIndexOf(val as int, fromIndex as int)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: int, fromIndex: int): number {
        if (fromIndex >= this.lengthInt) {
            fromIndex = this.lengthInt - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.lengthInt + fromIndex
        }

        for (let i = fromIndex; i >= 0; i--) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1 as number
            }
            if (tmp!.intValue() == val) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: number): number {
        return this.lastIndexOf(val as int, this.lengthInt - 1)
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: int): number {
        return this.lastIndexOf(val, this.lengthInt - 1)
    }

   /**
    * Creates a new Uint16Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Uint16Array from data
    */
    public of(...data: number[]): Uint16Array {
        throw new Error("Uint16Array.of: not implemented")
    }

    /**
     * Creates a new Uint16Array using reversed data from the current one
     *
     * @returns a new Uint16Array using reversed data from the current one
     */
    public reverse(): Uint16Array {
        for (let i: int = 0; i < this.lengthInt / 2 as int; i++) {
            const tmp = this.getUnsafe(this.lengthInt - 1 - i)
            this.setUnsafe(this.lengthInt - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Uint16Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Uint16Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Uint16Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Uint16Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Uint16Array {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Uint16Array.BYTES_PER_ELEMENT as int, relEnd * Uint16Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Uint16Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Uint16Array.BYTES_PER_ELEMENT as int, relEnd * Uint16Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Uint16Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin, this.lengthInt)
     */
    public slice(begin: number): Uint16Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Uint16Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint16Array with elements of current Uint16Array[begin, this.lengthInt)
     */
    public slice(begin: int): Uint16Array {
        return this.slice(begin, this.lengthInt)
    }

    /**
     * Sorts in-place according to the numeric ordering
     *
     * @returns sorted Uint16Array
     */
    public sort(): Uint16Array {
        let newF = (a: number, b: number): number => { throw new Error("not implemented") }
        return this.sort(newF)
    }

    /**
     * Creates a Uint16Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint16Array with the same underlying Buffer
     */
    public subarray(begin?: number, end?: number): Uint16Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a Uint16Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint16Array with the same underlying Buffer
     */
    public subarray(begin: number, end: number): Uint16Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint16Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint16Array with the same underlying Buffer
     */
    public subarray(begin: number, end: int): Uint16Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint16Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint16Array with the same underlying Buffer
     */
    public subarray(begin: int, end: number): Uint16Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint16Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint16Array with the same underlying Buffer
     */
    public subarray(begin: int, end: int): Uint16Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Uint16Array(this.buffer, relStart * Uint16Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Uint16Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint16Array with the same Buffer
     */
    public subarray(begin: number): Uint16Array {
        return this.subarray(begin as int, this.lengthInt)
    }

    /**
     * Creates a Uint16Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint16Array with the same Buffer
     */
    public subarray(begin: int): Uint16Array {
        return this.subarray(begin, this.lengthInt)
    }

    /**
     * Converts Uint16Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Uint16Array.toLocaleString: not implemented")
    }

    /**
     * Converts Uint16Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Uint16Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Uint16Array {
        return new Uint16Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Uint16Array {
        return new Uint16Array(this).sort()
    }

    /**
     * Returns a string representation of the Uint16Array
     *
     * @returns a string representation of the Uint16Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
         return new Uint16ArrayIterator(this);
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint16Array with replaced value on index
     */
    public with(index: number, value: number): Uint16Array {
        return this.with(index as int, value as int)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint16Array with replaced value on index
     */
    /* public */ internal with(index: int, value: int): Uint16Array {
        let res = new Uint16Array(this)
        res.setUnsafeClamp(index, value)
        return res
    }

    /// === with element lambda functions ===
    

    /**
     * Checks that all elements of Uint16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint16Array) => boolean =
            (element: number, index: number, array: Uint16Array): boolean => { return fn(element) }
        return this.every(newF)
    }
    /**
     * creates a new Uint16Array from current Uint16Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint16Array with elements from current Uint16Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Uint16Array {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint16Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number) => number): void {
        let newF: (val: number, index: number, array: Uint16Array) => number =
            (val: number, index: number, array: Uint16Array): number => { return fn(val) }
        this.forEach(newF)
    }

   /**
    * Creates a new Uint16Array using fn(arr[i]) over all elements of current Uint16Array
    *
    * @param fn a function to apply for each element of current Uint16Array
    *
    * @returns a new Uint16Array where for each element from current Uint16Array fn was applied
    */
    public map(fn: (val: number) => number): Uint16Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Uint16Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint16Array) => boolean =
            (element: number, index: number, array: Uint16Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    /**
     * Sorts in-place
     *
     * @param fn comparator
     *
     * @returns sorted Uint16Array
     */
    public sort(fn: (a: number, b: number) => number): Uint16Array {
        let arr: int[] = new int[this.lengthInt]
        for (let i = 0; i < this.lengthInt; i++) {
            arr[i] = this.getUnsafe(i)
        }
        // TODO(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
        /*
            let mustPrecede: (a: int, b: int) => boolean =
                (a: int, b: int): boolean => { return (fn(a, b) <= 0) }
            sort(arr, mustPrecede)
            for (let i = 0; i < this.lengthInt; i++) {
                this.setUnsafe(i, arr[i])
            }
        */
        return this;
    }

    /**
     * Checks that at least one element of Uint16Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Uint16Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Uint16Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint16Array) => boolean =
            (element: number, index: number, array: Uint16Array): boolean => { return fn(element, index) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint16Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint16Array) => number): number {
        let acc = this.$_get(0) as number
        for (let i = 1; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint16Array) => number, init: number): number {
        let acc = init
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint16Array) => number): number {
        let acc: number = this.$_get(this.lengthInt - 1) as number
        for (let i = this.lengthInt - 2; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
    * Creates a new Uint16Array using fn(arr[i]) over all elements of current Uint16Array.
    *
    * @param fn a function to apply for each element of current Uint16Array
    *
    * @returns a new Uint16Array where for each element from current Uint16Array fn was applied
    */
    public map(fn: (val: number, index: number) => number): Uint16Array {
        let resBuf = new ArrayBuffer(this.lengthInt * Uint16Array.BYTES_PER_ELEMENT as int)
        let res = new Uint16Array(resBuf)
        for (let i = 0; i < this.lengthInt; i++) {
            const fnRes = fn(this.getUnsafe(i) as number, i as number);
            res.setUnsafeClamp(i, fnRes as int)
        }
        return res
    }

    /**
     * Checks that all elements of Uint16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Uint16Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Uint16Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint16Array) => boolean =
            (element: number, index: number, array: Uint16Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Creates a new Uint16Array from current Uint16Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint16Array with elements from current Uint16Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Uint16Array) => boolean): Uint16Array {
        let markers = new boolean[this.lengthInt]
        let resLen = 0
        for (let i = 0; i < this.lengthInt; i++) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let res = new Uint16Array(resLen)
        for (let i = 0, j = 0; i < this.lengthInt; i++) {
            if (markers[i]) {
                res.setUnsafe(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Uint16Array from current Uint16Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint16Array with elements from current Uint16Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Uint16Array {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val, index) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint16Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * TODO: return int | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Uint16Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint16Array.find: not implemented if element was not found")
    }

    /**
     * Finds the first element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Uint16Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val, index) }
        return this.findIndex(newF)
    }

    /**
     * Finds the last element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Uint16Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint16Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val, index) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Uint16Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Uint16Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint16Array) => boolean =
            (val: number, index: number, array: Uint16Array): boolean => { return fn(val, index) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint16Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Uint16Array) => number): void {
        for (let i = 0; i < this.lengthInt; i++) {
            let tmp = fn(this.getUnsafe(i) as number, i as number, this)
            this.setUnsafeClamp(i, tmp as int)
        }
        //NOTE (ikorobkov): needs check the correctness of this function
        //throw new Error("Uint16Array.forEach: has to return undefined, but returns void for now")
    }

    /**
     * Applies a function over all elements of Uint16Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => number): void {
        let newF: (val: number, index: number, array: Uint16Array) => number =
            (val: number, index: number, array: Uint16Array): number => { return fn(val, index) }
        this.forEach(newF)
    }

    /**
     * Creates an Uint16Array from array-like argument
     *
     * @param o array-like object to initialize Uint16Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint16Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => int): Uint16Array {
        throw new Error("Uint16Array.from: not implemented")
    }

    /** Byte offset within the underlying Buffer */
    public get byteOffset(): number {
        return this.byteOffsetInt
    }

    /** Number of bytes used */
    public get byteLength(): number {
        return this.byteLengthInt
    }

    /** Number of int stored in Uint16Array */
    public get length(): number {
        return this.lengthInt
    }

    /** String \"Uint16Array\" */
    public readonly name = "Uint16Array"

    private static clamp(val: int): int {
        return val;
    }

    internal setUnsafeClamp(insertPos: int, val: int): void {
        this.setUnsafe(insertPos, val)
    }

    internal getUnsafe(index: int): int {
        index = index * Uint16Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt
        let res: int = 0
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + 1 - i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + 1 - i) as int
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
        return res;
    }

    internal setUnsafe(index: int, val: int): void {
        index = index * Uint16Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt;
        let res: int = 0;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + 1 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint16Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + 1 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }
}

class Uint32ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int = 0
    private idx: int = 0

    constructor(parent: Uint32Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class Uint32ArrayIterator implements IterableIterator<Number> {
    private parent: Uint32Array
    private idx: int = 0

    constructor(parent: Uint32Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.parent.getUnsafe(this.idx++)))
    }
}

/**
 * JS Uint32Array API-compatible class
 */
export class Uint32Array implements Iterable<Number> {
    public static readonly BYTES_PER_ELEMENT: number = 4

    /** Underlying Buffer */
    public readonly buffer: ArrayBufferLike

    internal readonly byteOffsetInt: int
    internal readonly byteLengthInt: int
    internal readonly lengthInt: int

    /**
     * Creates an empty Uint32Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an Uint32Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<Number>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<Number>(elements)
        this.byteLengthInt = arr.length as int * Uint32Array.BYTES_PER_ELEMENT as int
        this.lengthInt = arr.length as int
        this.buffer = new ArrayBuffer(this.byteLengthInt)
        this.byteOffsetInt = 0
        for (let i: int = 0; i < this.lengthInt; ++i) {
            this.setUnsafe(i, arr.$_get(i).longValue())
        }
    }

    /**
     * Creates an Uint32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created Uint32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset!.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % Uint32Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 4 as Uint32Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % Uint32Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 4 as Uint32Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length!.intValue()
            if (intLength > intByteLength / Uint32Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / Uint32Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / Uint32Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * Uint32Array.BYTES_PER_ELEMENT as int
        }
        this.byteLengthInt = intByteLength
        this.byteOffsetInt = intByteOffset
        this.lengthInt = intLength
        this.buffer = buf
    }

    /**
     * Creates an Uint32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an Uint32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created Uint32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint32Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint32Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created Uint32Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an Uint32Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an Uint32Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLengthInt = (buf as ArrayBuffer).getByteLength()
            if (this.byteLengthInt % Uint32Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of long as Uint32Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint32Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLengthInt = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLengthInt % Uint32Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of long as Uint32Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / Uint32Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLengthInt = arr.length as int * Uint32Array.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                this.setUnsafe(i, arr.$_get(i).longValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

     /**
     * Creates an Uint32Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.lengthInt = length
        this.byteLengthInt = length * Uint32Array.BYTES_PER_ELEMENT as int
        this.byteOffsetInt = 0
        this.buffer = new ArrayBuffer(this.byteLengthInt)
    }

    /**
     * Creates an Uint32Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of Uint32Array.
     *
     * @param other data initializer
     */
    public constructor(other: Uint32Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLengthInt = other.byteLength as int
        this.lengthInt = other.length as int
        this.byteOffsetInt = 0
    }
    
    internal zeroIfInfinity(val: number): number {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as number
        }
        return val as number
    }

    internal zeroIfInfinity(val: long): long {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as long
        }
        return val
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<Number> {
         return this.values()
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): Number | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index if index is correct.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): Number | undefined {
        let k: int;
        if (index >= 0) {
            k = index
        } else {
            k = this.lengthInt + index
        }
        if (k < 0 || k >= this.lengthInt) {
            return undefined
        }
        return new Number(this.getUnsafe(k))
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): number {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of number at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(i: int): number {
        if (i < 0 || i >= this.lengthInt) {
            throw new RangeError("invalid offset")
        }
        return this.getUnsafe(i) as number
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: number): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: number): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v as long)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: long): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: long): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v)
    }
    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val as int)
    }

        /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val as long)
        this.setUnsafeClamp(index, v)
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): Uint32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): Uint32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): Uint32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): Uint32Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param insert insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): Uint32Array {
        let toPos = normalizeIndex(target, this.lengthInt)
        let fromPos = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        let count: int = finalPos - fromPos
        if (count > (this.lengthInt - toPos)) {
            count = this.lengthInt - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint32Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): Uint32Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of Uint32Array.
     *
     * @param insert insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): Uint32Array {
        return this.copyWithin(target, 0, this.lengthInt)
    }

    /**
     * Returns an iterator for all entries
     */
    // NOTE (ivan-tyulyandin): blocked by tuples implentation
    // public entries(): Iterator<[Int, Object]> {
    //     let ret: Entry<Int, Object> = new Entry<Int, Object>[this.lengthInt];
    //     for (let i: int = 0; i < this.lengthInt; i++) {
    //         ret[i] = new Entry<Int, Object>(i, this.at(i));
    //     }
    //     return new MapIterator<Int, Object>(ret);
    // }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: number, start?: number, end?: number): Uint32Array {
        return this.fill(value as long, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: number, start: int, end?: number): Uint32Array {
        return this.fill(value as long, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: number, start: int, end: number): Uint32Array {
        return this.fill(value as long, start as int, end as int)
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: number, start: number, end: int): Uint32Array {
        return this.fill(value as long, start as int, end as int)
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: number, start: int, end: int): Uint32Array {
        return this.fill(value as long, start as int, end as int)
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: long, start?: number, end?: number): Uint32Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: long, start: int, end?: number): Uint32Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: long, start: int, end: number): Uint32Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: long, start: number, end: int): Uint32Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the Uint32Array with specified value
     *
     * @param value new value
     *
     * @returns modified Uint32Array
     */
    public fill(value: long, start: int, end: int): Uint32Array {
        const k = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: number): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: long): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: long): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Copies all elements of arr to the current Uint32Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: number[], insertPos1: number): void {
        const insertPos = insertPos1 as int
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: long[]): size of arr is greater than Uint32Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos as int + i as int, v as long)
        }
    }

    /**
     * Copies all elements of arr to the current Uint32Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: long[], insertPos: int): void {
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: long[]): size of arr is greater than Uint32Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current Uint32Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: number[]): void {
        this.set(arr, 0)
    }

    /**
     * Copies all elements of arr to the current Uint32Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: long[]): void {
        this.set(arr, 0)
    }

    /**
     * Creates an Uint32Array from array-like argument
     *
     * @param o array-like object to initialize Uint32Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint32Array
     */
    public from<T>(o: Iterator<T>, mapFn: (e: T) => number): Uint32Array {
        throw new Error("Uint32Array.from: not implemented")
    }

    /**
     * Creates an Uint32Array from array-like argument
     *
     * @param o array-like object to initialize Uint32Array
     *
     * @returns new Uint32Array
     */
    public from(o: Iterator<Number>): Uint32Array {
        throw new Error("Uint32Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in Uint32Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint32Array, false otherwise
     */
    public includes(e: number, fromIndex: number): boolean {
        return this.includes(e as long, fromIndex as int)
    }

    /**
     * Checks if specified argument is in Uint32Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in Uint32Array, false otherwise
     */
    public includes(e: long, fromIndex: int): boolean {
        return this.indexOf(e, fromIndex) != -1
    }

    /**
     * Checks if specified argument is in Uint32Array
     *
     * @param e search element
     *
     * @returns true if e is in Uint32Array, false otherwise
     */
    public includes(e: number): boolean {
        return this.includes(e as long, 0)
    }

    /**
     * Checks if specified argument is in Uint32Array
     *
     * @param e search element
     *
     * @returns true if e is in Uint32Array, false otherwise
     */
    public includes(e: long): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number, fromIndex: number): number {
        return this.indexOf(e as long, fromIndex as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: long, fromIndex: int): int {
        throw new Error("not implemented")
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: number): number {
        return this.indexOf(e as long)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: long): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.lengthInt - 1; i++) {
            res.append(this.getUnsafe(i) as number)
            res.append(s!)
        }
        if (this.lengthInt > 0) {
            res.append(this.getUnsafe(this.lengthInt - 1) as number)
        }
        return res.toString()
    }

    /**
     * Returns keys of the Uint32Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new Uint32ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: number, fromIndex: number): number {
        return this.lastIndexOf(val as long, fromIndex as int)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: long, fromIndex: int): number {
        if (fromIndex >= this.lengthInt) {
            fromIndex = this.lengthInt - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.lengthInt + fromIndex
        }

        for (let i = fromIndex; i >= 0; i--) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1 as number
            }
            if (tmp!.longValue() == val) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: number): number {
        return this.lastIndexOf(val as long, this.lengthInt - 1)
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: long): number {
        return this.lastIndexOf(val, this.lengthInt - 1)
    }

   /**
    * Creates a new Uint32Array using initializer
    *
    * @param data initializer
    *
    * @returns a new Uint32Array from data
    */
    public of(...data: number[]): Uint32Array {
        throw new Error("Uint32Array.of: not implemented")
    }

    /**
     * Creates a new Uint32Array using reversed data from the current one
     *
     * @returns a new Uint32Array using reversed data from the current one
     */
    public reverse(): Uint32Array {
        for (let i: int = 0; i < this.lengthInt / 2 as int; i++) {
            const tmp = this.getUnsafe(this.lengthInt - 1 - i)
            this.setUnsafe(this.lengthInt - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): Uint32Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): Uint32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): Uint32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): Uint32Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): Uint32Array {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * Uint32Array.BYTES_PER_ELEMENT as int, relEnd * Uint32Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new Uint32Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * Uint32Array.BYTES_PER_ELEMENT as int, relEnd * Uint32Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new Uint32Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin, this.lengthInt)
     */
    public slice(begin: number): Uint32Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current Uint32Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new Uint32Array with elements of current Uint32Array[begin, this.lengthInt)
     */
    public slice(begin: int): Uint32Array {
        return this.slice(begin, this.lengthInt)
    }

    /**
     * Sorts in-place according to the numeric ordering
     *
     * @returns sorted Uint32Array
     */
    public sort(): Uint32Array {
        let newF = (a: number, b: number): number => { throw new Error("not implemented") }
        return this.sort(newF)
    }

    /**
     * Creates a Uint32Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint32Array with the same underlying Buffer
     */
    public subarray(begin?: number, end?: number): Uint32Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a Uint32Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint32Array with the same underlying Buffer
     */
    public subarray(begin: number, end: number): Uint32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint32Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint32Array with the same underlying Buffer
     */
    public subarray(begin: number, end: int): Uint32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint32Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint32Array with the same underlying Buffer
     */
    public subarray(begin: int, end: number): Uint32Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a Uint32Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new Uint32Array with the same underlying Buffer
     */
    public subarray(begin: int, end: int): Uint32Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new Uint32Array(this.buffer, relStart * Uint32Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a Uint32Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint32Array with the same Buffer
     */
    public subarray(begin: number): Uint32Array {
        return this.subarray(begin as int, this.lengthInt)
    }

    /**
     * Creates a Uint32Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new Uint32Array with the same Buffer
     */
    public subarray(begin: int): Uint32Array {
        return this.subarray(begin, this.lengthInt)
    }

    /**
     * Converts Uint32Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("Uint32Array.toLocaleString: not implemented")
    }

    /**
     * Converts Uint32Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts Uint32Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): Uint32Array {
        return new Uint32Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): Uint32Array {
        return new Uint32Array(this).sort()
    }

    /**
     * Returns a string representation of the Uint32Array
     *
     * @returns a string representation of the Uint32Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<Number> {
         return new Uint32ArrayIterator(this);
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint32Array with replaced value on index
     */
    public with(index: number, value: number): Uint32Array {
        return this.with(index as int, value as long)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an Uint32Array with replaced value on index
     */
    /* public */ internal with(index: int, value: long): Uint32Array {
        let res = new Uint32Array(this)
        res.setUnsafeClamp(index, value)
        return res
    }

    /// === with element lambda functions ===
    

    /**
     * Checks that all elements of Uint32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint32Array) => boolean =
            (element: number, index: number, array: Uint32Array): boolean => { return fn(element) }
        return this.every(newF)
    }
    /**
     * creates a new Uint32Array from current Uint32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint32Array with elements from current Uint32Array that satisfy condition fn
     */
    public filter(fn: (val: number) => boolean): Uint32Array {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number) => number): void {
        let newF: (val: number, index: number, array: Uint32Array) => number =
            (val: number, index: number, array: Uint32Array): number => { return fn(val) }
        this.forEach(newF)
    }

   /**
    * Creates a new Uint32Array using fn(arr[i]) over all elements of current Uint32Array
    *
    * @param fn a function to apply for each element of current Uint32Array
    *
    * @returns a new Uint32Array where for each element from current Uint32Array fn was applied
    */
    public map(fn: (val: number) => number): Uint32Array {
        let newF: (val: number, index: number) => number =
            (val: number, index: number): number => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of Uint32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint32Array) => boolean =
            (element: number, index: number, array: Uint32Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    /**
     * Sorts in-place
     *
     * @param fn comparator
     *
     * @returns sorted Uint32Array
     */
    public sort(fn: (a: number, b: number) => number): Uint32Array {
        let arr: long[] = new long[this.lengthInt]
        for (let i = 0; i < this.lengthInt; i++) {
            arr[i] = this.getUnsafe(i)
        }
        // TODO(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
        /*
            let mustPrecede: (a: long, b: long) => boolean =
                (a: long, b: long): boolean => { return (fn(a, b) <= 0) }
            sort(arr, mustPrecede)
            for (let i = 0; i < this.lengthInt; i++) {
                this.setUnsafe(i, arr[i])
            }
        */
        return this;
    }

    /**
     * Checks that at least one element of Uint32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number, array: Uint32Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of Uint32Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint32Array) => boolean =
            (element: number, index: number, array: Uint32Array): boolean => { return fn(element, index) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint32Array) => number, init: number): number {
        let acc = init
        for (let i = 0; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: number, curVal: number, curIndex: number, array: Uint32Array) => number): number {
        let acc = this.$_get(0) as number
        for (let i = 1; i < this.lengthInt; i++) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint32Array) => number, init: number): number {
        let acc = init
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: number, curVal: number, curIndex: number, array: Uint32Array) => number): number {
        let acc: number = this.$_get(this.lengthInt - 1) as number
        for (let i = this.lengthInt - 2; i >= 0; i--) {
            acc = fn(acc, this.getUnsafe(i) as number, i as number, this)
        }
        return acc
    }

    /**
    * Creates a new Uint32Array using fn(arr[i]) over all elements of current Uint32Array.
    *
    * @param fn a function to apply for each element of current Uint32Array
    *
    * @returns a new Uint32Array where for each element from current Uint32Array fn was applied
    */
    public map(fn: (val: number, index: number) => number): Uint32Array {
        let resBuf = new ArrayBuffer(this.lengthInt * Uint32Array.BYTES_PER_ELEMENT as int)
        let res = new Uint32Array(resBuf)
        for (let i = 0; i < this.lengthInt; i++) {
            const fnRes = fn(this.getUnsafe(i) as number, i as number);
            res.setUnsafeClamp(i, fnRes as long)
        }
        return res
    }

    /**
     * Checks that all elements of Uint32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number, array: Uint32Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (!fn(this.getUnsafe(i) as number, i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of Uint32Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: number, index: number) => boolean): boolean {
        let newF: (element: number, index: number, array: Uint32Array) => boolean =
            (element: number, index: number, array: Uint32Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Creates a new Uint32Array from current Uint32Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint32Array with elements from current Uint32Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number, array: Uint32Array) => boolean): Uint32Array {
        let markers = new boolean[this.lengthInt]
        let resLen = 0
        for (let i = 0; i < this.lengthInt; i++) {
            markers[i] = fn(this.getUnsafe(i) as number, i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let res = new Uint32Array(resLen)
        for (let i = 0, j = 0; i < this.lengthInt; i++) {
            if (markers[i]) {
                res.setUnsafe(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new Uint32Array from current Uint32Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new Uint32Array with elements from current Uint32Array that satisfy condition fn
     */
    public filter(fn: (val: number, index: number) => boolean): Uint32Array {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val, index) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the Uint32Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * TODO: return long | undefined as in JS
     */
    public find(fn: (val: number, index: number, array: Uint32Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint32Array.find: not implemented if element was not found")
    }

    /**
     * Finds the first element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number, array: Uint32Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val, index) }
        return this.findIndex(newF)
    }

    /**
     * Finds the last element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number, array: Uint32Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            let val = this.getUnsafe(i) as number
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("Uint32Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val, index) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number, array: Uint32Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            if (fn(this.getUnsafe(i) as number, i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the Uint32Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: number, index: number) => boolean): number {
        let newF: (val: number, index: number, array: Uint32Array) => boolean =
            (val: number, index: number, array: Uint32Array): boolean => { return fn(val, index) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of Uint32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number, array: Uint32Array) => number): void {
        for (let i = 0; i < this.lengthInt; i++) {
            let tmp = fn(this.getUnsafe(i) as number, i as number, this)
            this.setUnsafeClamp(i, tmp as long)
        }
        //NOTE (ikorobkov): needs check the correctness of this function
        //throw new Error("Uint32Array.forEach: has to return undefined, but returns void for now")
    }

    /**
     * Applies a function over all elements of Uint32Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: number, index: number) => number): void {
        let newF: (val: number, index: number, array: Uint32Array) => number =
            (val: number, index: number, array: Uint32Array): number => { return fn(val, index) }
        this.forEach(newF)
    }

    /**
     * Creates an Uint32Array from array-like argument
     *
     * @param o array-like object to initialize Uint32Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new Uint32Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => long): Uint32Array {
        throw new Error("Uint32Array.from: not implemented")
    }

    /** Byte offset within the underlying Buffer */
    public get byteOffset(): number {
        return this.byteOffsetInt
    }

    /** Number of bytes used */
    public get byteLength(): number {
        return this.byteLengthInt
    }

    /** Number of long stored in Uint32Array */
    public get length(): number {
        return this.lengthInt
    }

    /** String \"Uint32Array\" */
    public readonly name = "Uint32Array"

    private static clamp(val: long): long {
        return val;
    }

    internal setUnsafeClamp(insertPos: int, val: long): void {
        this.setUnsafe(insertPos, val)
    }

    internal getUnsafe(index: int): long {
        index = index * Uint32Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt
        let res: long = 0
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + 3 - i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + 3 - i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
        return res;
    }

    internal setUnsafe(index: int, val: long): void {
        index = index * Uint32Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt;
        let res: long = 0;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + 3 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < Uint32Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + 3 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }
}

class BigUint64ArrayIteratorKeys implements IterableIterator<Number> {
    private length: int = 0
    private idx: int = 0

    constructor(parent: BigUint64Array) {
        this.length = parent.length as int
    }

    public override iterator(): IterableIterator<Number> {
        return this;
    }

    override next(): IteratorResult<Number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<Number>()
        }
        return new IteratorResult<Number>(false, new Number(this.idx++))
    }
}

class BigUint64ArrayIterator implements IterableIterator<BigInt> {
    private parent: BigUint64Array
    private idx: int = 0

    constructor(parent: BigUint64Array) {
        this.parent = parent
    }

    public override iterator(): IterableIterator<BigInt> {
        return this;
    }

    override next(): IteratorResult<BigInt> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<BigInt>()
        }
        return new IteratorResult<BigInt>(false, new BigInt(this.parent.getUnsafe(this.idx++)))
    }
}

/**
 * JS BigUint64Array API-compatible class
 */
export class BigUint64Array implements Iterable<BigInt> {
    public static readonly BYTES_PER_ELEMENT: number = 8

    /** Underlying Buffer */
    public readonly buffer: ArrayBufferLike

    internal readonly byteOffsetInt: int
    internal readonly byteLengthInt: int
    internal readonly lengthInt: int

    /**
     * Creates an empty BigUint64Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an BigUint64Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<BigInt>) {
        // NOTE (ikorobkov): dealing with this overload is tricky
        // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
        let arr = Array.from<BigInt>(elements)
        this.byteLengthInt = arr.length as int * BigUint64Array.BYTES_PER_ELEMENT as int
        this.lengthInt = arr.length as int
        this.buffer = new ArrayBuffer(this.byteLengthInt)
        this.byteOffsetInt = 0
        for (let i: int = 0; i < this.lengthInt; ++i) {
            this.setUnsafe(i, arr.$_get(i).getULong())
        }
    }

    /**
     * Creates an BigUint64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigUint64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset!.intValue()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int
        if (buf instanceof ArrayBuffer) {
            intByteLength = (buf as ArrayBuffer).getByteLength()
        } else if (buf instanceof SharedArrayBuffer) {
            intByteLength = (buf as SharedArrayBuffer).getByteLength()
        } else {
            throw new Error("unexpected type of ArrayBufferLike")
        }
        intByteLength = intByteLength - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }

        if (intByteLength % BigUint64Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBufferLike.byteLength should be multiple of 8 as BigUint64Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % BigUint64Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of 8 as BigUint64Array.BYTES_PER_ELEMENT")
        }

        let intLength: int
        if (length != undefined) {
            intLength = length!.intValue()
            if (intLength > intByteLength / BigUint64Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / BigUint64Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / BigUint64Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * BigUint64Array.BYTES_PER_ELEMENT as int
        }
        this.byteLengthInt = intByteLength
        this.byteOffsetInt = intByteOffset
        this.lengthInt = intLength
        this.buffer = buf
    }

    /**
     * Creates an BigUint64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an BigUint64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigUint64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an BigUint64Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an BigUint64Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type long in newly created BigUint64Array
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an BigUint64Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBufferLike, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an BigUint64Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBufferLike) {
        if (buf instanceof ArrayBuffer) {
            this.byteLengthInt = (buf as ArrayBuffer).getByteLength()
            if (this.byteLengthInt % BigUint64Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of long as BigUint64Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / BigUint64Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof SharedArrayBuffer) {
            this.byteLengthInt = (buf as SharedArrayBuffer).getByteLength();
            if (this.byteLengthInt % BigUint64Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBufferLike.byteLength should be multiple of long as BigUint64Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / BigUint64Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as SharedArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLengthInt = arr.length as int * BigUint64Array.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                this.setUnsafe(i, arr.$_get(i).longValue())
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

     /**
     * Creates an BigUint64Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        if (length < 0) {
            throw new RangeError("Range Error: length " + length + " is outside the bounds of the buffer")
        }
        this.lengthInt = length
        this.byteLengthInt = length * BigUint64Array.BYTES_PER_ELEMENT as int
        this.byteOffsetInt = 0
        this.buffer = new ArrayBuffer(this.byteLengthInt)
    }

    /**
     * Creates an BigUint64Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        this(length as int)
    }

    /**
     * Creates a copy of BigUint64Array.
     *
     * @param other data initializer
     */
    public constructor(other: BigUint64Array) {
        if (other.buffer instanceof ArrayBuffer) {
            this.buffer = (other.buffer as ArrayBuffer).slice(0 as int, other.byteLength as int) as ArrayBuffer
        } else if (other.buffer instanceof SharedArrayBuffer) {
            this.buffer = (other.buffer as SharedArrayBuffer).slice(0 as int, other.byteLength as int) as SharedArrayBuffer
        } else {
            throw new Error("unexpected type of buffer")
        }
        this.byteLengthInt = other.byteLength as int
        this.lengthInt = other.length as int
        this.byteOffsetInt = 0
    }
    
    internal zeroIfInfinity(val: BigInt): BigInt {
        if ((val.getULong() == Infinity) || (val.getULong() == -Infinity)) {
            return new BigInt(0)
        }
        return new BigInt(val)
    }

    internal zeroIfInfinity(val: long): long {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as long
        }
        return val
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public override iterator(): IterableIterator<BigInt> {
         return this.values()
    }

    /**
     * Iteratorable interface implementation
     * @returns iterator over all elements
     */
    public $_iterator(): IterableIterator<BigInt> {
         return this.values()
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): BigInt | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index if index is correct.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): BigInt | undefined {
        let k: int;
        if (index >= 0) {
            k = index
        } else {
            k = this.lengthInt + index
        }
        if (k < 0 || k >= this.lengthInt) {
            return undefined
        }
        return new BigInt(this.getUnsafe(k))
    }

    /**
     * Returns an instance of BigInt at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(index: number): BigInt {
        return this.$_get(index as int)
    }

    /**
     * Returns an instance of BigInt at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public $_get(i: int): BigInt {
        if (i < 0 || i >= this.lengthInt) {
            throw new RangeError("invalid offset")
        }
        return new BigInt(this.getUnsafe(i))
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: BigInt): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: BigInt): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v.getULong())
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: long): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: long): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val)
        this.setUnsafeClamp(index, v)
    }
    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val as int)
    }

        /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: int): void {
        // NOTE (ikorobkov): TS doesn't throw exception. Exception added to avoid event of memory out-range access
        if (index < 0 || index >= this.lengthInt) {
            throw new RangeError("invalid index")
        }
        let v = this.zeroIfInfinity(val as long)
        this.setUnsafeClamp(index, v)
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): BigUint64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): BigUint64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): BigUint64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): BigUint64Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param insert insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end: int): BigUint64Array {
        let toPos = normalizeIndex(target, this.lengthInt)
        let fromPos = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        let count: int = finalPos - fromPos
        if (count > (this.lengthInt - toPos)) {
            count = this.lengthInt - toPos
        }
        let direction: int = 1
        if ((fromPos < toPos) && (toPos < fromPos + count)) {
            fromPos = fromPos + count - 1
            toPos   = toPos   + count - 1
            direction = -1
        }
        while (count > 0) {
            const value = this.getUnsafe(fromPos)
            this.setUnsafe(toPos, value)
            fromPos = fromPos + direction
            toPos = toPos + direction
            --count
        }
        return this
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of BigUint64Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): BigUint64Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of BigUint64Array.
     *
     * @param insert insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): BigUint64Array {
        return this.copyWithin(target, 0, this.lengthInt)
    }

    /**
     * Returns an iterator for all entries
     */
    // NOTE (ivan-tyulyandin): blocked by tuples implentation
    // public entries(): Iterator<[Int, Object]> {
    //     let ret: Entry<Int, Object> = new Entry<Int, Object>[this.lengthInt];
    //     for (let i: int = 0; i < this.lengthInt; i++) {
    //         ret[i] = new Entry<Int, Object>(i, this.at(i));
    //     }
    //     return new MapIterator<Int, Object>(ret);
    // }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: BigInt, start?: number, end?: number): BigUint64Array {
        return this.fill(value.getULong(), asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: BigInt, start: int, end?: number): BigUint64Array {
        return this.fill(value.getULong(), start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: BigInt, start: int, end: number): BigUint64Array {
        return this.fill(value.getULong(), start as int, end as int)
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: BigInt, start: number, end: int): BigUint64Array {
        return this.fill(value.getULong(), start as int, end as int)
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: BigInt, start: int, end: int): BigUint64Array {
        return this.fill(value.getULong(), start as int, end as int)
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: long, start?: number, end?: number): BigUint64Array {
        return this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: long, start: int, end?: number): BigUint64Array {
        return this.fill(value, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: long, start: int, end: number): BigUint64Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: long, start: number, end: int): BigUint64Array {
        return this.fill(value, start as int, end as int)
    }

    /**
     * Fills the BigUint64Array with specified value
     *
     * @param value new value
     *
     * @returns modified BigUint64Array
     */
    public fill(value: long, start: int, end: int): BigUint64Array {
        const k = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        for (let i: int = k; i < finalPos; ++i) {
            this.setUnsafe(i, value)
        }
        return this
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: BigInt): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: BigInt): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: long): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: long): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Copies all elements of arr to the current BigUint64Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: BigInt[], insertPos1: number): void {
        const insertPos = insertPos1 as int
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: long[]): size of arr is greater than BigUint64Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos as int + i as int, v.getULong())
        }
    }

    /**
     * Copies all elements of arr to the current BigUint64Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: long[], insertPos: int): void {
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: long[]): size of arr is greater than BigUint64Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos + i, v)
        }
    }

    /**
     * Copies all elements of arr to the current BigUint64Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: BigInt[]): void {
        this.set(arr, 0)
    }

    /**
     * Copies all elements of arr to the current BigUint64Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: long[]): void {
        this.set(arr, 0)
    }

    /**
     * Creates an BigUint64Array from array-like argument
     *
     * @param o array-like object to initialize BigUint64Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new BigUint64Array
     */
    public from<T>(o: Iterator<T>, mapFn: (e: T) => BigInt): BigUint64Array {
        throw new Error("BigUint64Array.from: not implemented")
    }

    /**
     * Creates an BigUint64Array from array-like argument
     *
     * @param o array-like object to initialize BigUint64Array
     *
     * @returns new BigUint64Array
     */
    public from(o: Iterator<BigInt>): BigUint64Array {
        throw new Error("BigUint64Array.from: not implemented")
    }

    /**
     * Checks if specified argument is in BigUint64Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in BigUint64Array, false otherwise
     */
    public includes(e: BigInt, fromIndex: number): boolean {
        return this.includes(e.getULong(), fromIndex as int)
    }

    /**
     * Checks if specified argument is in BigUint64Array
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns true if e is in BigUint64Array, false otherwise
     */
    public includes(e: long, fromIndex: int): boolean {
        return this.indexOf(e, fromIndex) != -1
    }

    /**
     * Checks if specified argument is in BigUint64Array
     *
     * @param e search element
     *
     * @returns true if e is in BigUint64Array, false otherwise
     */
    public includes(e: BigInt): boolean {
        return this.includes(e.getULong(), 0)
    }

    /**
     * Checks if specified argument is in BigUint64Array
     *
     * @param e search element
     *
     * @returns true if e is in BigUint64Array, false otherwise
     */
    public includes(e: long): boolean {
        return this.includes(e, 0)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: BigInt, fromIndex: number): number {
        return this.indexOf(e.getULong(), fromIndex as int)
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @param fromIndex start index to search from
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: long, fromIndex: int): int {
        throw new Error("not implemented")
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: BigInt): number {
        return this.indexOf(e.getULong())
    }

    /**
     * Returns index of specified element
     *
     * @param e search element
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(e: long): int {
        return this.indexOf(e, 0)
    }

    /**
     * Joins data to a string
     *
     * @param s separator
     *
     * @returns joined representation
     */
    public join(s?: String): string {
        if (s == undefined) {
            return this.join(",")
        }
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.lengthInt - 1; i++) {
            res.append(new BigInt(this.getUnsafe(i)))
            res.append(s!)
        }
        if (this.lengthInt > 0) {
            res.append(new BigInt(this.getUnsafe(this.lengthInt - 1)))
        }
        return res.toString()
    }

    /**
     * Returns keys of the BigUint64Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<Number> {
        return new BigUint64ArrayIteratorKeys(this)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: BigInt, fromIndex: number): number {
        return this.lastIndexOf(val.getULong(), fromIndex as int)
    }

    /**
     * Moves backwards starting at fromIndex to 0 and search val.
     *
     * @param val a value to search
     *
     * @param fromIndex the first index to search val at, i.e. fromIndex is included in search space
     *
     * @returns right-most index of val. It must be less or equal than fromIndex. -1 if val not found
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
     */
    public lastIndexOf(val: long, fromIndex: int): number {
        if (fromIndex >= this.lengthInt) {
            fromIndex = this.lengthInt - 1
        }
        if (fromIndex < 0) {
            fromIndex = this.lengthInt + fromIndex
        }

        for (let i = fromIndex; i >= 0; i--) {
            let tmp = this.at(i)
            if (tmp == undefined) {
                return -1 as number
            }
            if (tmp!.getULong() == val) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: BigInt): number {
        return this.lastIndexOf(val.getULong(), this.lengthInt - 1)
    }

    /**
     * Moves backwards and search val.
     *
     * @param val a value to search
     *
     * @returns right-most index of val. -1 if val not found
     */
    public lastIndexOf(val: long): number {
        return this.lastIndexOf(val, this.lengthInt - 1)
    }

   /**
    * Creates a new BigUint64Array using initializer
    *
    * @param data initializer
    *
    * @returns a new BigUint64Array from data
    */
    public of(...data: BigInt[]): BigUint64Array {
        throw new Error("BigUint64Array.of: not implemented")
    }

    /**
     * Creates a new BigUint64Array using reversed data from the current one
     *
     * @returns a new BigUint64Array using reversed data from the current one
     */
    public reverse(): BigUint64Array {
        for (let i: int = 0; i < this.lengthInt / 2 as int; i++) {
            const tmp = this.getUnsafe(this.lengthInt - 1 - i)
            this.setUnsafe(this.lengthInt - 1 - i, this.getUnsafe(i))
            this.setUnsafe(i, tmp)
        }
        return this
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): BigUint64Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): BigUint64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): BigUint64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): BigUint64Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): BigUint64Array {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        if (this.buffer instanceof ArrayBuffer) {
            let buf = (this.buffer as ArrayBuffer).slice(relStart * BigUint64Array.BYTES_PER_ELEMENT as int, relEnd * BigUint64Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
            return new BigUint64Array(buf)
        } else if (this.buffer instanceof SharedArrayBuffer) {
            let buf = (this.buffer as SharedArrayBuffer).slice(relStart * BigUint64Array.BYTES_PER_ELEMENT as int, relEnd * BigUint64Array.BYTES_PER_ELEMENT as int) as SharedArrayBuffer
            return new BigUint64Array(buf)
        } else {
            throw new Error("unexpected type of buffer")
        }
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin, this.lengthInt)
     */
    public slice(begin: number): BigUint64Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current BigUint64Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new BigUint64Array with elements of current BigUint64Array[begin, this.lengthInt)
     */
    public slice(begin: int): BigUint64Array {
        return this.slice(begin, this.lengthInt)
    }

    /**
     * Sorts in-place according to the numeric ordering
     *
     * @returns sorted BigUint64Array
     */
    public sort(): BigUint64Array {
        let newF = (a: BigInt, b: BigInt): number => { throw new Error("not implemented") }
        return this.sort(newF)
    }

    /**
     * Creates a BigUint64Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigUint64Array with the same underlying Buffer
     */
    public subarray(begin?: number, end?: number): BigUint64Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a BigUint64Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigUint64Array with the same underlying Buffer
     */
    public subarray(begin: number, end: number): BigUint64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a BigUint64Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigUint64Array with the same underlying Buffer
     */
    public subarray(begin: number, end: int): BigUint64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a BigUint64Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigUint64Array with the same underlying Buffer
     */
    public subarray(begin: int, end: number): BigUint64Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a BigUint64Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new BigUint64Array with the same underlying Buffer
     */
    public subarray(begin: int, end: int): BigUint64Array {
        const len: int = this.length as int
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new BigUint64Array(this.buffer, relStart * BigUint64Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Creates a BigUint64Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new BigUint64Array with the same Buffer
     */
    public subarray(begin: number): BigUint64Array {
        return this.subarray(begin as int, this.lengthInt)
    }

    /**
     * Creates a BigUint64Array with the same Buffer
     *
     * @param begin start index, inclusive
     *
     * @returns new BigUint64Array with the same Buffer
     */
    public subarray(begin: int): BigUint64Array {
        return this.subarray(begin, this.lengthInt)
    }

    /**
     * Converts BigUint64Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("BigUint64Array.toLocaleString: not implemented")
    }

    /**
     * Converts BigUint64Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts BigUint64Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public toReversed(): BigUint64Array {
        return new BigUint64Array(this).reverse()
    }

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): BigUint64Array {
        return new BigUint64Array(this).sort()
    }

    /**
     * Returns a string representation of the BigUint64Array
     *
     * @returns a string representation of the BigUint64Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<BigInt> {
         return new BigUint64ArrayIterator(this);
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an BigUint64Array with replaced value on index
     */
    public with(index: number, value: BigInt): BigUint64Array {
        return this.with(index as int, value.getULong())
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an BigUint64Array with replaced value on index
     */
    private with(index: int, value: long): BigUint64Array {
        let res = new BigUint64Array(this)
        res.setUnsafeClamp(index, value)
        return res
    }

    /// === with element lambda functions ===
    

    /**
     * Checks that all elements of BigUint64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: BigInt) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigUint64Array) => boolean =
            (element: BigInt, index: number, array: BigUint64Array): boolean => { return fn(element) }
        return this.every(newF)
    }
    /**
     * creates a new BigUint64Array from current BigUint64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigUint64Array with elements from current BigUint64Array that satisfy condition fn
     */
    public filter(fn: (val: BigInt) => boolean): BigUint64Array {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: BigInt) => boolean): BigInt {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: BigInt) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val) }
        return this.findIndex(newF) as number
    }

    /**
     * Finds the last element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: BigInt) => boolean): BigInt {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: BigInt) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of BigUint64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: BigInt) => BigInt): void {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => BigInt =
            (val: BigInt, index: number, array: BigUint64Array): BigInt => { return fn(val) }
        this.forEach(newF)
    }

   /**
    * Creates a new BigUint64Array using fn(arr[i]) over all elements of current BigUint64Array
    *
    * @param fn a function to apply for each element of current BigUint64Array
    *
    * @returns a new BigUint64Array where for each element from current BigUint64Array fn was applied
    */
    public map(fn: (val: BigInt) => BigInt): BigUint64Array {
        let newF: (val: BigInt, index: number) => BigInt =
            (val: BigInt, index: number): BigInt => { return fn(val) }
        return this.map(newF)
    }

    /**
     * Checks that at least one element of BigUint64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: BigInt) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigUint64Array) => boolean =
            (element: BigInt, index: number, array: BigUint64Array): boolean => { return fn(element) }
        return this.some(newF)
    }

    /**
     * Sorts in-place
     *
     * @param fn comparator
     *
     * @returns sorted BigUint64Array
     */
    public sort(fn: (a: BigInt, b: BigInt) => number): BigUint64Array {
        let arr: long[] = new long[this.lengthInt]
        for (let i = 0; i < this.lengthInt; i++) {
            arr[i] = this.getUnsafe(i)
        }
        // TODO(ivan-tyulyandin): unresolved reference i in for loop, blocked by internal issue 12961
        /*
            let mustPrecede: (a: long, b: long) => boolean =
                (a: long, b: long): boolean => { return (fn(a, b) <= 0) }
            sort(arr, mustPrecede)
            for (let i = 0; i < this.lengthInt; i++) {
                this.setUnsafe(i, arr[i])
            }
        */
        return this;
    }

    /**
     * Checks that at least one element of BigUint64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: BigInt, index: number, array: BigUint64Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(new BigInt(this.getUnsafe(i)), i as number, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Checks that at least one element of BigUint64Array satisfies the passed function
     *
     * @param fn check function
     *
     * @returns true if some element satisfies fn
     */
    public some(fn: (element: BigInt, index: number) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigUint64Array) => boolean =
            (element: BigInt, index: number, array: BigUint64Array): boolean => { return fn(element, index) }
        return this.some(newF)
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigUint64Array) => BigInt, init: BigInt): BigInt {
        let acc = init
        for (let i = 0; i < this.lengthInt; i++) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using left-to-right traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduce(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigUint64Array) => BigInt): BigInt {
        let acc = new BigInt(this.$_get(0))
        for (let i = 1; i < this.lengthInt; i++) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @param init initial value
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigUint64Array) => BigInt, init: BigInt): BigInt {
        let acc = init
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
     * Reduces data into a single value using right-to-left traversal
     *
     * @param fn condition
     *
     * @returns reduction result
     */
    public reduceRight(fn: (acc: BigInt, curVal: BigInt, curIndex: number, array: BigUint64Array) => BigInt): BigInt {
        let acc: BigInt = new BigInt(this.$_get(this.lengthInt - 1))
        for (let i = this.lengthInt - 2; i >= 0; i--) {
            acc = fn(acc, new BigInt(this.getUnsafe(i)), i as number, this)
        }
        return acc
    }

    /**
    * Creates a new BigUint64Array using fn(arr[i]) over all elements of current BigUint64Array.
    *
    * @param fn a function to apply for each element of current BigUint64Array
    *
    * @returns a new BigUint64Array where for each element from current BigUint64Array fn was applied
    */
    public map(fn: (val: BigInt, index: number) => BigInt): BigUint64Array {
        let resBuf = new ArrayBuffer(this.lengthInt * BigUint64Array.BYTES_PER_ELEMENT as int)
        let res = new BigUint64Array(resBuf)
        for (let i = 0; i < this.lengthInt; i++) {
            const fnRes = fn(new BigInt(this.getUnsafe(i)), i as number);
            res.setUnsafeClamp(i, fnRes.getULong())
        }
        return res
    }

    /**
     * Checks that all elements of BigUint64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: BigInt, index: number, array: BigUint64Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (!fn(new BigInt(this.getUnsafe(i)), i as number, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Checks that all elements of BigUint64Array satisfy the passed function
     *
     * @param fn check function
     *
     * @returns true if all elements satisfy fn
     */
    public every(fn: (element: BigInt, index: number) => boolean): boolean {
        let newF: (element: BigInt, index: number, array: BigUint64Array) => boolean =
            (element: BigInt, index: number, array: BigUint64Array): boolean => { return fn(element, index) }
        return this.every(newF)
    }

    /**
     * Creates a new BigUint64Array from current BigUint64Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigUint64Array with elements from current BigUint64Array that satisfy condition fn
     */
    public filter(fn: (val: BigInt, index: number, array: BigUint64Array) => boolean): BigUint64Array {
        let markers = new boolean[this.lengthInt]
        let resLen = 0
        for (let i = 0; i < this.lengthInt; i++) {
            markers[i] = fn(new BigInt(this.getUnsafe(i)), i as number, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let res = new BigUint64Array(resLen)
        for (let i = 0, j = 0; i < this.lengthInt; i++) {
            if (markers[i]) {
                res.setUnsafe(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * creates a new BigUint64Array from current BigUint64Array based on a condition fn
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new BigUint64Array with elements from current BigUint64Array that satisfy condition fn
     */
    public filter(fn: (val: BigInt, index: number) => boolean): BigUint64Array {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val, index) }
        return this.filter(newF)
    }

    /**
     * Finds the first element in the BigUint64Array that satisfies the condition
     *
     * @param fn the condition to apply for each element
     *
     * @returns the first element that satisfies fn
     * TODO: return long | undefined as in JS
     */
    public find(fn: (val: BigInt, index: number, array: BigUint64Array) => boolean): BigInt {
        for (let i = 0; i < this.lengthInt; i++) {
            let val = new BigInt(this.getUnsafe(i))
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("BigUint64Array.find: not implemented if element was not found")
    }

    /**
     * Finds the first element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the first element that satisfies fn
     */
    public find(fn: (val: BigInt, index: number) => boolean): BigInt {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val, index) }
        return this.find(newF)
    }

    /**
     * Finds an index of the first element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: BigInt, index: number, array: BigUint64Array) => boolean): number {
        for (let i = 0; i < this.lengthInt; i++) {
            if (fn(new BigInt(this.getUnsafe(i)), i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the first element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the first element that satisfies fn
     */
    public findIndex(fn: (val: BigInt, index: number) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val, index) }
        return this.findIndex(newF)
    }

    /**
     * Finds the last element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: BigInt, index: number, array: BigUint64Array) => boolean): BigInt {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            let val = new BigInt(this.getUnsafe(i))
            if (fn(val, i as number, this)) {
                return val
            }
        }
        throw new Error("BigUint64Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds the last element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: BigInt, index: number) => boolean): BigInt {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val, index) }
        return this.findLast(newF)
    }

    /**
     * Finds an index of the last element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: BigInt, index: number, array: BigUint64Array) => boolean): number {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            if (fn(new BigInt(this.getUnsafe(i)), i as number, this)) {
                return i as number
            }
        }
        return -1 as number
    }

    /**
     * Finds an index of the last element in the BigUint64Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: BigInt, index: number) => boolean): number {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => boolean =
            (val: BigInt, index: number, array: BigUint64Array): boolean => { return fn(val, index) }
        return this.findLastIndex(newF) as number
    }

    /**
     * Applies a function over all elements of BigUint64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: BigInt, index: number, array: BigUint64Array) => BigInt): void {
        for (let i = 0; i < this.lengthInt; i++) {
            let tmp = fn(new BigInt(this.getUnsafe(i)), i as number, this)
            this.setUnsafeClamp(i, tmp.getULong())
        }
        //NOTE (ikorobkov): needs check the correctness of this function
        //throw new Error("BigUint64Array.forEach: has to return undefined, but returns void for now")
    }

    /**
     * Applies a function over all elements of BigUint64Array
     *
     * @param fn function to apply
     *
     * @returns undefined
     */
    public forEach(fn: (val: BigInt, index: number) => BigInt): void {
        let newF: (val: BigInt, index: number, array: BigUint64Array) => BigInt =
            (val: BigInt, index: number, array: BigUint64Array): BigInt => { return fn(val, index) }
        this.forEach(newF)
    }

    /**
     * Creates an BigUint64Array from array-like argument
     *
     * @param o array-like object to initialize BigUint64Array
     *
     * @param mapFn function to apply for each
     *
     * @returns new BigUint64Array
     */
    public from(o: Object, mapFn: (e: Object, index: number) => long): BigUint64Array {
        throw new Error("BigUint64Array.from: not implemented")
    }

    /** Byte offset within the underlying Buffer */
    public get byteOffset(): number {
        return this.byteOffsetInt
    }

    /** Number of bytes used */
    public get byteLength(): number {
        return this.byteLengthInt
    }

    /** Number of long stored in BigUint64Array */
    public get length(): number {
        return this.lengthInt
    }

    /** String \"BigUint64Array\" */
    public readonly name = "BigUint64Array"

    private static clamp(val: long): long {
        return val;
    }

    internal setUnsafeClamp(insertPos: int, val: long): void {
        this.setUnsafe(insertPos, val)
    }

    internal getUnsafe(index: int): long {
        index = index * BigUint64Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt
        let res: long = 0
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as ArrayBuffer).at(index + 7 - i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    let el = (this.buffer as SharedArrayBuffer).at(index + 7 - i) as long
                    el &= 0xff
                    res |= el << (8 * i)
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
        return res;
    }

    internal setUnsafe(index: int, val: long): void {
        index = index * BigUint64Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt;
        let res: long = 0;
        if (IS_LITTLE_ENDIAN) {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        } else {
            if (this.buffer instanceof ArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as ArrayBuffer).set(index + 7 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else if (this.buffer instanceof SharedArrayBuffer) {
                for (let i = 0; i < BigUint64Array.BYTES_PER_ELEMENT as int; i++) {
                    (this.buffer as SharedArrayBuffer).set(index + 7 - i, (val & 0xff) as byte);
                    val = val >> 8;
                }
            } else {
                throw new Error("unexpected type of ArrayBufferLike")
            }
        }
    }
}
