From 1f0565cefae51c043f5f98aec38bd426afdd5776 Mon Sep 17 00:00:00 2001
From: Aleksei Sidorov <>
Date: Wed, 1 Jun 2022 19:44:06 +0300
Subject: [PATCH 2/4] Add Panda Allocators, enable MMAP in Code Buffer

---
 src/aarch32/assembler-aarch32.h        |   10 +-
 src/aarch32/disasm-aarch32.h           |   22 +
 src/aarch32/location-aarch32.h         |   98 +-
 src/aarch32/macro-assembler-aarch32.cc |   23 +
 src/aarch32/macro-assembler-aarch32.h  | 2261 +++++++++++++++++++++++-
 src/aarch64/assembler-aarch64.h        |   28 +-
 src/aarch64/decoder-aarch64.cc         |   27 +-
 src/aarch64/decoder-aarch64.h          |   77 +-
 src/aarch64/disasm-aarch64.cc          |   25 +-
 src/aarch64/disasm-aarch64.h           |   21 +
 src/aarch64/macro-assembler-aarch64.cc |  155 +-
 src/aarch64/macro-assembler-aarch64.h  |  148 +-
 src/aarch64/simulator-aarch64.cc       |   23 +-
 src/aarch64/simulator-aarch64.h        |   17 +
 src/code-buffer-vixl.cc                |   29 +-
 src/code-buffer-vixl.h                 |   21 +-
 src/invalset-vixl.h                    |   51 +-
 src/pool-manager-impl.h                |    6 +
 src/pool-manager.h                     |   24 +
 src/utils-vixl.h                       |   13 +
 20 files changed, 3030 insertions(+), 49 deletions(-)

diff --git a/src/aarch32/assembler-aarch32.h b/src/aarch32/assembler-aarch32.h
index bb7df840..cce80690 100644
--- a/src/aarch32/assembler-aarch32.h
+++ b/src/aarch32/assembler-aarch32.h
@@ -99,7 +99,7 @@ class Assembler : public internal::AssemblerBase {
     }
   };
 
-  explicit Assembler(InstructionSet isa = kDefaultISA)
+    explicit Assembler(InstructionSet isa = kDefaultISA)
       : isa_(isa),
         first_condition_(al),
         it_mask_(0),
@@ -115,6 +115,10 @@ class Assembler : public internal::AssemblerBase {
     VIXL_ASSERT(isa == T32);
 #endif
   }
+
+#ifdef PANDA_BUILD
+  explicit Assembler(size_t capacity, InstructionSet isa = kDefaultISA) = delete;
+#else
   explicit Assembler(size_t capacity, InstructionSet isa = kDefaultISA)
       : AssemblerBase(capacity),
         isa_(isa),
@@ -129,6 +133,9 @@ class Assembler : public internal::AssemblerBase {
     VIXL_ASSERT(isa == T32);
 #endif
   }
+#endif
+
+
   Assembler(byte* buffer, size_t capacity, InstructionSet isa = kDefaultISA)
       : AssemblerBase(buffer, capacity),
         isa_(isa),
@@ -142,6 +149,7 @@ class Assembler : public internal::AssemblerBase {
 #elif defined(VIXL_INCLUDE_TARGET_T32_ONLY)
     VIXL_ASSERT(isa == T32);
 #endif
+    USE(isa_);
   }
   virtual ~Assembler() {}
 
diff --git a/src/aarch32/disasm-aarch32.h b/src/aarch32/disasm-aarch32.h
index 679f47ba..6ce0442e 100644
--- a/src/aarch32/disasm-aarch32.h
+++ b/src/aarch32/disasm-aarch32.h
@@ -529,7 +529,9 @@ class Disassembler {
 
   ITBlock it_block_;
   DisassemblerStream* os_;
+#ifndef PANDA_BUILD
   bool owns_os_;
+#endif
   uint32_t code_address_;
   // True if the disassembler always output instructions with all the
   // registers (even if two registers are identical and only one could be
@@ -537,21 +539,32 @@ class Disassembler {
   bool use_short_hand_form_;
 
  public:
+#ifndef PANDA_BUILD
   explicit Disassembler(std::ostream& os,  // NOLINT(runtime/references)
                         uint32_t code_address = 0)
       : os_(new DisassemblerStream(os)),
         owns_os_(true),
+#else
+    explicit Disassembler(std::ostream& os, uint32_t code_address = 0) = delete;
+    explicit Disassembler(panda::ArenaAllocator* allocator, std::ostream& os,  // NOLINT(runtime/references)
+                          uint32_t code_address = 0)
+        : os_(allocator->New<DisassemblerStream>(os)),
+#endif
         code_address_(code_address),
         use_short_hand_form_(true) {}
   explicit Disassembler(DisassemblerStream* os, uint32_t code_address = 0)
       : os_(os),
+#ifndef PANDA_BUILD
         owns_os_(false),
+#endif
         code_address_(code_address),
         use_short_hand_form_(true) {}
   virtual ~Disassembler() {
+#ifndef PANDA_BUILD
     if (owns_os_) {
       delete os_;
     }
+#endif
   }
   DisassemblerStream& os() const { return *os_; }
   void SetIT(Condition first_condition, uint16_t it_mask) {
@@ -2682,9 +2695,18 @@ DataTypeValue Dt_size_17_Decode(uint32_t value);
 
 class PrintDisassembler : public Disassembler {
  public:
+#ifndef PANDA_BUILD
   explicit PrintDisassembler(std::ostream& os,  // NOLINT(runtime/references)
                              uint32_t code_address = 0)
       : Disassembler(os, code_address) {}
+#else
+  explicit PrintDisassembler(std::ostream& os,  // NOLINT(runtime/references)
+                           uint32_t code_address = 0) = delete;
+  PrintDisassembler(panda::ArenaAllocator* allocator, std::ostream& os,  // NOLINT(runtime/references)
+                          uint32_t code_address = 0)
+    : Disassembler(allocator, os, code_address) {}
+
+#endif
   explicit PrintDisassembler(DisassemblerStream* os, uint32_t code_address = 0)
       : Disassembler(os, code_address) {}
 
diff --git a/src/aarch32/location-aarch32.h b/src/aarch32/location-aarch32.h
index 512b9c7c..7da979c5 100644
--- a/src/aarch32/location-aarch32.h
+++ b/src/aarch32/location-aarch32.h
@@ -57,9 +57,17 @@ class Location : public LocationBase<int32_t> {
   // Unbound location that can be used with the assembler bind() method and
   // with the assembler methods for generating instructions, but will never
   // be handled by the pool manager.
+#ifndef PANDA_BUILD
   Location()
       : LocationBase<int32_t>(kRawLocation, 1 /* placeholder size*/),
         referenced_(false) {}
+#else
+  Location() = delete;
+  Location(panda::ArenaAllocator* allocator)
+    : LocationBase<int32_t>(kRawLocation, 1 /* dummy size*/),
+      referenced_(false),
+      forward_(allocator) {}
+#endif
 
   typedef int32_t Offset;
 
@@ -161,8 +169,12 @@ class Location : public LocationBase<int32_t> {
 
   class ForwardRefList : public ForwardRefListBase {
    public:
+#ifndef PANDA_BUILD
     ForwardRefList() : ForwardRefListBase() {}
-
+#else
+    ForwardRefList() = delete;
+    ForwardRefList(panda::ArenaAllocator* allocator) : ForwardRefListBase(allocator) {}
+#endif
     using ForwardRefListBase::Back;
     using ForwardRefListBase::Front;
   };
@@ -226,13 +238,24 @@ class Location : public LocationBase<int32_t> {
   // Contains the references to the unbound label
   ForwardRefList forward_;
 
+#ifndef PANDA_BUILD
   // To be used only by derived classes.
   Location(uint32_t type, int size, int alignment)
       : LocationBase<int32_t>(type, size, alignment), referenced_(false) {}
+#else
+  Location(panda::ArenaAllocator* allocator, uint32_t type, int size, int alignment)
+      : LocationBase<int32_t>(type, size, alignment), referenced_(false), forward_(allocator){}
+#endif
 
+#ifndef PANDA_BUILD
   // To be used only by derived classes.
   explicit Location(Offset location)
       : LocationBase<int32_t>(location), referenced_(false) {}
+#else
+  explicit Location(Offset location) = delete;
+  Location(panda::ArenaAllocator* allocator, Offset location)
+    : LocationBase<int32_t>(location), referenced_(false), forward_(allocator) {}
+#endif
 
   virtual int GetMaxAlignment() const VIXL_OVERRIDE;
   virtual int GetMinLocation() const VIXL_OVERRIDE;
@@ -258,8 +281,15 @@ class Label : public Location {
   static const int kVeneerAlignment = 1;
 
  public:
+#ifndef PANDA_BUILD
   Label() : Location(kVeneerType, kVeneerSize, kVeneerAlignment) {}
   explicit Label(Offset location) : Location(location) {}
+#else
+  Label() = delete;
+  Label(panda::ArenaAllocator* allocator) : Location(allocator, kVeneerType, kVeneerSize, kVeneerAlignment) {}
+  explicit Label(Offset location) = delete;
+  explicit Label(panda::ArenaAllocator* allocator, Offset location) : Location(allocator, location) {}
+#endif
 
  private:
   virtual bool ShouldBeDeletedOnPlacementByPoolManager() const VIXL_OVERRIDE {
@@ -297,6 +327,7 @@ class RawLiteral : public Location {
     kManuallyDeleted
   };
 
+#ifndef PANDA_BUILD
   RawLiteral(const void* addr,
              int size,
              PlacementPolicy placement_policy = kPlacedWhenUsed,
@@ -318,6 +349,36 @@ class RawLiteral : public Location {
         addr_(addr),
         manually_placed_(false),
         deletion_policy_(deletion_policy) {}
+#else
+RawLiteral(const void* addr,
+           int size,
+           PlacementPolicy placement_policy = kPlacedWhenUsed,
+           DeletionPolicy deletion_policy = kManuallyDeleted) = delete;
+RawLiteral(panda::ArenaAllocator* allocator, const void* addr,
+           int size,
+           PlacementPolicy placement_policy = kPlacedWhenUsed,
+           DeletionPolicy deletion_policy = kManuallyDeleted)
+    : Location(allocator, kLiteralType,
+               size,
+               (size < kLiteralAlignment) ? size : kLiteralAlignment),
+      addr_(addr),
+      manually_placed_(placement_policy == kManuallyPlaced),
+      deletion_policy_(deletion_policy) {
+  // We can't have manually placed literals that are not manually deleted.
+  VIXL_ASSERT(!IsManuallyPlaced() ||
+              (GetDeletionPolicy() == kManuallyDeleted));
+}
+RawLiteral(const void* addr, int size, DeletionPolicy deletion_policy) = delete;
+
+RawLiteral(panda::ArenaAllocator* allocator, const void* addr, int size, DeletionPolicy deletion_policy)
+    : Location(allocator, kLiteralType,
+               size,
+               (size < kLiteralAlignment) ? size : kLiteralAlignment),
+      addr_(addr),
+      manually_placed_(false),
+      deletion_policy_(deletion_policy) {}
+
+#endif
   const void* GetDataAddress() const { return addr_; }
   int GetSize() const { return GetPoolObjectSizeInBytes(); }
 
@@ -351,6 +412,7 @@ class RawLiteral : public Location {
 template <typename T>
 class Literal : public RawLiteral {
  public:
+#ifndef PANDA_BUILD
   explicit Literal(const T& value,
                    PlacementPolicy placement_policy = kPlacedWhenUsed,
                    DeletionPolicy deletion_policy = kManuallyDeleted)
@@ -358,6 +420,20 @@ class Literal : public RawLiteral {
         value_(value) {}
   explicit Literal(const T& value, DeletionPolicy deletion_policy)
       : RawLiteral(&value_, sizeof(T), deletion_policy), value_(value) {}
+#else
+explicit Literal(const T& ,
+                 PlacementPolicy placement_policy = kPlacedWhenUsed,
+                 DeletionPolicy deletion_policy = kManuallyDeleted) = delete;
+explicit Literal(const T& value, DeletionPolicy deletion_policy) = delete;
+explicit Literal(panda::ArenaAllocator* allocator, const T& value,
+                 PlacementPolicy placement_policy = kPlacedWhenUsed,
+                 DeletionPolicy deletion_policy = kManuallyDeleted)
+    : RawLiteral(allocator, &value_, sizeof(T), placement_policy, deletion_policy),
+      value_(value) {}
+explicit Literal(panda::ArenaAllocator* allocator, const T& value, DeletionPolicy deletion_policy)
+    : RawLiteral(allocator, &value_, sizeof(T), deletion_policy), value_(value) {}
+
+#endif
   void UpdateValue(const T& value, CodeBuffer* buffer) {
     value_ = value;
     if (IsBound()) {
@@ -371,6 +447,7 @@ class Literal : public RawLiteral {
 
 class StringLiteral : public RawLiteral {
  public:
+#ifndef PANDA_BUILD
   explicit StringLiteral(const char* str,
                          PlacementPolicy placement_policy = kPlacedWhenUsed,
                          DeletionPolicy deletion_policy = kManuallyDeleted)
@@ -384,6 +461,25 @@ class StringLiteral : public RawLiteral {
       : RawLiteral(str, static_cast<int>(strlen(str) + 1), deletion_policy) {
     VIXL_ASSERT((strlen(str) + 1) <= kMaxObjectSize);
   }
+#else
+explicit StringLiteral(const char* str,
+                       PlacementPolicy placement_policy = kPlacedWhenUsed,
+                       DeletionPolicy deletion_policy = kManuallyDeleted) = delete;
+StringLiteral(panda::ArenaAllocator* allocator, const char* str,
+                       PlacementPolicy placement_policy = kPlacedWhenUsed,
+                       DeletionPolicy deletion_policy = kManuallyDeleted)
+    : RawLiteral(allocator, str,
+                 static_cast<int>(strlen(str) + 1),
+                 placement_policy,
+                 deletion_policy) {
+  VIXL_ASSERT((strlen(str) + 1) <= kMaxObjectSize);
+}
+explicit StringLiteral(const char* str, DeletionPolicy deletion_policy) = delete;
+explicit StringLiteral(panda::ArenaAllocator* allocator, const char* str, DeletionPolicy deletion_policy)
+    : RawLiteral(allocator, str, static_cast<int>(strlen(str) + 1), deletion_policy) {
+  VIXL_ASSERT((strlen(str) + 1) <= kMaxObjectSize);
+}
+#endif
 };
 
 }  // namespace aarch32
diff --git a/src/aarch32/macro-assembler-aarch32.cc b/src/aarch32/macro-assembler-aarch32.cc
index 56c0ffbd..e340f971 100644
--- a/src/aarch32/macro-assembler-aarch32.cc
+++ b/src/aarch32/macro-assembler-aarch32.cc
@@ -262,7 +262,11 @@ MemOperand MacroAssembler::MemOperandComputationHelper(
   if ((offset & extra_offset_mask) == offset) return MemOperand(base, offset);
 
   MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
   ITScope it_scope(this, &cond, guard);
+#else
+  ITScope it_scope(allocator_, this, &cond, guard);
+#endif
 
   uint32_t load_store_offset = offset & extra_offset_mask;
   uint32_t add_offset = offset & ~extra_offset_mask;
@@ -460,8 +464,14 @@ void MacroAssembler::Printf(const char* format,
     PushRegister(reg2);
     PushRegister(reg1);
     Push(RegisterList(r0, r1));
+#ifndef PANDA_BUILD
     StringLiteral* format_literal =
         new StringLiteral(format, RawLiteral::kDeletedOnPlacementByPool);
+#else
+    StringLiteral* format_literal = allocator_->New<StringLiteral>(
+        allocator_, format, RawLiteral::kDeletedOnPlacementByPool);
+#endif
+
     Adr(r0, format_literal);
     uint32_t args = (reg4.GetType() << 12) | (reg3.GetType() << 8) |
                     (reg2.GetType() << 4) | reg1.GetType();
@@ -585,8 +595,13 @@ void MacroAssembler::Printf(const char* format,
         address = reinterpret_cast<uintptr_t>(PrintfTrampolineRRRR);
         break;
     }
+#ifndef PANDA_BUILD
     StringLiteral* format_literal =
         new StringLiteral(format, RawLiteral::kDeletedOnPlacementByPool);
+#else
+    StringLiteral* format_literal = allocator_->New<StringLiteral>(
+        allocator_, format, RawLiteral::kDeletedOnPlacementByPool);
+#endif
     Adr(r0, format_literal);
     Mov(ip, Operand::From(address));
     Blx(ip);
@@ -1224,14 +1239,22 @@ void MacroAssembler::Delegate(InstructionType type,
   } else if (rn.IsLow()) {
     switch (type) {
       case kCbnz: {
+#ifndef PANDA_BUILD
         Label done;
+#else
+        Label done(allocator_);
+#endif
         cbz(rn, &done);
         b(location);
         Bind(&done);
         return;
       }
       case kCbz: {
+#ifndef PANDA_BUILD
         Label done;
+#else
+        Label done(allocator_);
+#endif
         cbnz(rn, &done);
         b(location);
         Bind(&done);
diff --git a/src/aarch32/macro-assembler-aarch32.h b/src/aarch32/macro-assembler-aarch32.h
index 390b9088..ceaf7557 100644
--- a/src/aarch32/macro-assembler-aarch32.h
+++ b/src/aarch32/macro-assembler-aarch32.h
@@ -82,7 +82,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       VIXL_ASSERT(GetBuffer()->Is32bitAligned());
     }
     VIXL_ASSERT(pool_end_ == NULL);
+#ifndef PANDA_BUILD
     pool_end_ = new Label();
+#else
+    pool_end_ = allocator_->New<Label>(allocator_);
+#endif
     ExactAssemblyScopeWithoutPoolsCheck guard(this,
                                               kMaxInstructionSizeInBytes,
                                               ExactAssemblyScope::kMaximumSize);
@@ -93,7 +97,9 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     GetBuffer()->Align();
     if (pool_end_ != NULL) {
       Bind(pool_end_);
+#ifndef PANDA_BUILD
       delete pool_end_;
+#endif
       pool_end_ = NULL;
     }
   }
@@ -180,11 +186,21 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
 
   class ITScope {
    public:
+#ifndef PANDA_BUILD
     ITScope(MacroAssembler* masm,
             Condition* cond,
             const MacroEmissionCheckScope& scope,
             bool can_use_it = false)
         : masm_(masm), cond_(*cond), can_use_it_(can_use_it) {
+#else
+ITScope(MacroAssembler* , Condition* , const MacroEmissionCheckScope& ,
+        bool can_use_it = false) = delete;
+ITScope(panda::ArenaAllocator* allocator, MacroAssembler* masm,
+        Condition* cond,
+        const MacroEmissionCheckScope& scope,
+        bool can_use_it = false)
+    : masm_(masm), cond_(*cond), label_(allocator), can_use_it_(can_use_it) {
+#endif
       // The 'scope' argument is used to remind us to only use this scope inside
       // a MacroEmissionCheckScope. This way, we do not need to check whether
       // we need to emit the pools or grow the code buffer when emitting the
@@ -258,15 +274,28 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
   // TODO: If we change the MacroAssembler to disallow setting a different ISA,
   // we can change the alignment of the pool in the pool manager constructor to
   // be 2 bytes for T32.
+#ifdef PANDA_BUILD
+  explicit MacroAssembler(panda::ArenaAllocator* allocator, InstructionSet isa = kDefaultISA)
+#else
   explicit MacroAssembler(InstructionSet isa = kDefaultISA)
+#endif
       : Assembler(isa),
         available_(r12),
         current_scratch_scope_(NULL),
+#ifndef PANDA_BUILD
         pool_manager_(4 /*header_size*/,
                       4 /*alignment*/,
                       4 /*buffer_alignment*/),
         generate_simulator_code_(VIXL_AARCH32_GENERATE_SIMULATOR_CODE),
         pool_end_(NULL) {
+#else
+        pool_manager_(allocator,
+                      4 /*header_size*/,
+                      4 /*alignment*/,
+                      4 /*buffer_alignment*/),
+        generate_simulator_code_(VIXL_AARCH32_GENERATE_SIMULATOR_CODE),
+        pool_end_(NULL), allocator_(allocator) {
+#endif
 #ifdef VIXL_DEBUG
     SetAllowMacroInstructions(  // NOLINT(clang-analyzer-optin.cplusplus.VirtualCall)
         true);
@@ -274,6 +303,10 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     USE(allow_macro_instructions_);
 #endif
   }
+
+#ifdef PANDA_BUILD
+  explicit MacroAssembler(size_t size, InstructionSet isa = kDefaultISA) = delete;
+#else
   explicit MacroAssembler(size_t size, InstructionSet isa = kDefaultISA)
       : Assembler(size, isa),
         available_(r12),
@@ -288,6 +321,9 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         true);
 #endif
   }
+#endif
+
+#ifndef PANDA_BUILD
   MacroAssembler(byte* buffer, size_t size, InstructionSet isa = kDefaultISA)
       : Assembler(buffer, size, isa),
         available_(r12),
@@ -297,6 +333,18 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
                       4 /*buffer_alignment*/),
         generate_simulator_code_(VIXL_AARCH32_GENERATE_SIMULATOR_CODE),
         pool_end_(NULL) {
+#else
+  MacroAssembler(panda::ArenaAllocator* allocator, byte* buffer, size_t size, InstructionSet isa = kDefaultISA)
+      : Assembler(buffer, size, isa),
+        available_(r12),
+        current_scratch_scope_(NULL),
+        pool_manager_(allocator,
+                      4 /*header_size*/,
+                      4 /*alignment*/,
+                      4 /*buffer_alignment*/),
+        generate_simulator_code_(VIXL_AARCH32_GENERATE_SIMULATOR_CODE),
+        pool_end_(NULL), allocator_(allocator) {
+#endif
 #ifdef VIXL_DEBUG
     SetAllowMacroInstructions(  // NOLINT(clang-analyzer-optin.cplusplus.VirtualCall)
         true);
@@ -490,7 +538,6 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
 
   void EnsureEmitFor(uint32_t size) {
     EnsureEmitPoolsFor(size);
-    VIXL_ASSERT(GetBuffer()->HasSpaceFor(size) || GetBuffer()->IsManaged());
     GetBuffer()->EnsureSpaceFor(size);
   }
 
@@ -567,7 +614,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     adr(cond, Best, rd, literal);
     RegisterLiteralReference(literal);
   }
@@ -590,7 +641,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldr(cond, rt, literal);
     RegisterLiteralReference(literal);
   }
@@ -611,7 +666,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrb(cond, rt, literal);
     RegisterLiteralReference(literal);
   }
@@ -633,7 +692,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrd(cond, rt, rt2, literal);
     RegisterLiteralReference(literal);
   }
@@ -656,7 +719,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrh(cond, rt, literal);
     RegisterLiteralReference(literal);
   }
@@ -677,7 +744,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrsb(cond, rt, literal);
     RegisterLiteralReference(literal);
   }
@@ -698,7 +769,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrsh(cond, rt, literal);
     RegisterLiteralReference(literal);
   }
@@ -719,7 +794,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldr(cond, dt, rd, literal);
     RegisterLiteralReference(literal);
   }
@@ -748,7 +827,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldr(cond, dt, rd, literal);
     RegisterLiteralReference(literal);
   }
@@ -767,8 +850,13 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(!AliasesAvailableScratchRegister(rt));
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
+#ifndef PANDA_BUILD
     RawLiteral* literal =
         new Literal<uint32_t>(v, RawLiteral::kDeletedOnPlacementByPool);
+#else
+    RawLiteral* literal = allocator_->New<Literal<uint32_t>>(
+        allocator_, v, RawLiteral::kDeletedOnPlacementByPool);
+#endif
     Ldr(cond, rt, literal);
   }
   template <typename T>
@@ -782,8 +870,13 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(!AliasesAvailableScratchRegister(rt2));
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
+#ifndef PANDA_BUILD
     RawLiteral* literal =
         new Literal<uint64_t>(v, RawLiteral::kDeletedOnPlacementByPool);
+#else
+    RawLiteral* literal = allocator_->New<Literal<uint64_t>>(
+        allocator_, v, RawLiteral::kDeletedOnPlacementByPool);
+#endif
     Ldrd(cond, rt, rt2, literal);
   }
   template <typename T>
@@ -795,8 +888,13 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(!AliasesAvailableScratchRegister(rd));
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
+#ifndef PANDA_BUILD
     RawLiteral* literal =
         new Literal<float>(v, RawLiteral::kDeletedOnPlacementByPool);
+#else
+    RawLiteral* literal = allocator_->New<Literal<float>>(
+        allocator_, v, RawLiteral::kDeletedOnPlacementByPool);
+#endif
     Vldr(cond, rd, literal);
   }
   void Vldr(SRegister rd, float v) { Vldr(al, rd, v); }
@@ -805,8 +903,13 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(!AliasesAvailableScratchRegister(rd));
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
+#ifndef PANDA_BUILD
     RawLiteral* literal =
         new Literal<double>(v, RawLiteral::kDeletedOnPlacementByPool);
+#else
+    RawLiteral* literal = allocator_->New<Literal<double>>(
+        allocator_, v, RawLiteral::kDeletedOnPlacementByPool);
+#endif
     Vldr(cond, rd, literal);
   }
   void Vldr(DRegister rd, double v) { Vldr(al, rd, v); }
@@ -1000,7 +1103,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // ADC<c>{<q>} {<Rdn>,} <Rdn>, <Rm> ; T1
         operand.IsPlainRegister() && rn.IsLow() && rd.Is(rn) &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     adc(cond, rd, rn, operand);
   }
   void Adc(Register rd, Register rn, const Operand& operand) {
@@ -1044,7 +1151,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     adcs(cond, rd, rn, operand);
   }
   void Adcs(Register rd, Register rn, const Operand& operand) {
@@ -1084,7 +1195,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // ADD{<c>}{<q>} {<Rdm>,} SP, <Rdm> ; T1
         (operand.IsPlainRegister() && !rd.IsPC() && rn.IsSP() &&
          operand.GetBaseRegister().Is(rd));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     add(cond, rd, rn, operand);
   }
   void Add(Register rd, Register rn, const Operand& operand) {
@@ -1142,7 +1257,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     adds(cond, rd, rn, operand);
   }
   void Adds(Register rd, Register rn, const Operand& operand) {
@@ -1174,7 +1293,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // AND<c>{<q>} {<Rdn>,} <Rdn>, <Rm> ; T1
         operand.IsPlainRegister() && rd.Is(rn) && rn.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     and_(cond, rd, rn, operand);
   }
   void And(Register rd, Register rn, const Operand& operand) {
@@ -1222,7 +1345,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ands(cond, rd, rn, operand);
   }
   void Ands(Register rd, Register rn, const Operand& operand) {
@@ -1243,7 +1370,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // ASR<c>{<q>} {<Rdm>,} <Rdm>, <Rs> ; T1
         (operand.IsPlainRegister() && rd.Is(rm) && rd.IsLow() &&
          operand.GetBaseRegister().IsLow());
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     asr(cond, rd, rm, operand);
   }
   void Asr(Register rd, Register rm, const Operand& operand) {
@@ -1289,7 +1420,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     asrs(cond, rd, rm, operand);
   }
   void Asrs(Register rd, Register rm, const Operand& operand) {
@@ -1326,7 +1461,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     bfc(cond, rd, lsb, width);
   }
   void Bfc(Register rd, uint32_t lsb, uint32_t width) {
@@ -1340,7 +1479,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     bfi(cond, rd, rn, lsb, width);
   }
   void Bfi(Register rd, Register rn, uint32_t lsb, uint32_t width) {
@@ -1368,7 +1511,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // BIC<c>{<q>} {<Rdn>,} <Rdn>, <Rm> ; T1
         operand.IsPlainRegister() && rd.Is(rn) && rn.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     bic(cond, rd, rn, operand);
   }
   void Bic(Register rd, Register rn, const Operand& operand) {
@@ -1412,7 +1559,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     bics(cond, rd, rn, operand);
   }
   void Bics(Register rd, Register rn, const Operand& operand) {
@@ -1423,7 +1574,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     bkpt(cond, imm);
   }
   void Bkpt(uint32_t imm) { Bkpt(al, imm); }
@@ -1442,7 +1597,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     bl(cond, label);
     RegisterForwardReference(label);
   }
@@ -1462,7 +1621,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
       pool_policy = MacroEmissionCheckScope::kIgnorePools;
     }
     MacroEmissionCheckScope guard(this, pool_policy);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     blx(cond, label);
     RegisterForwardReference(label);
   }
@@ -1476,7 +1639,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     bool can_use_it =
         // BLX{<c>}{<q>} <Rm> ; T1
         !rm.IsPC();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     blx(cond, rm);
   }
   void Blx(Register rm) { Blx(al, rm); }
@@ -1489,7 +1656,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     bool can_use_it =
         // BX{<c>}{<q>} <Rm> ; T1
         !rm.IsPC();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     bx(cond, rm);
   }
   void Bx(Register rm) { Bx(al, rm); }
@@ -1499,7 +1670,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     bxj(cond, rm);
   }
   void Bxj(Register rm) { Bxj(al, rm); }
@@ -1546,7 +1721,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     clrex(cond);
   }
   void Clrex() { Clrex(al); }
@@ -1557,7 +1736,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     clz(cond, rd, rm);
   }
   void Clz(Register rd, Register rm) { Clz(al, rd, rm); }
@@ -1572,7 +1755,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // CMN{<c>}{<q>} <Rn>, <Rm> ; T1
         operand.IsPlainRegister() && rn.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     cmn(cond, rn, operand);
   }
   void Cmn(Register rn, const Operand& operand) { Cmn(al, rn, operand); }
@@ -1590,7 +1777,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // CMP{<c>}{<q>} <Rn>, <Rm> ; T1 T2
         (operand.IsPlainRegister() && !rn.IsPC() &&
          !operand.GetBaseRegister().IsPC());
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     cmp(cond, rn, operand);
   }
   void Cmp(Register rn, const Operand& operand) { Cmp(al, rn, operand); }
@@ -1602,7 +1793,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     crc32b(cond, rd, rn, rm);
   }
   void Crc32b(Register rd, Register rn, Register rm) { Crc32b(al, rd, rn, rm); }
@@ -1614,7 +1809,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     crc32cb(cond, rd, rn, rm);
   }
   void Crc32cb(Register rd, Register rn, Register rm) {
@@ -1628,7 +1827,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     crc32ch(cond, rd, rn, rm);
   }
   void Crc32ch(Register rd, Register rn, Register rm) {
@@ -1642,7 +1845,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     crc32cw(cond, rd, rn, rm);
   }
   void Crc32cw(Register rd, Register rn, Register rm) {
@@ -1656,7 +1863,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     crc32h(cond, rd, rn, rm);
   }
   void Crc32h(Register rd, Register rn, Register rm) { Crc32h(al, rd, rn, rm); }
@@ -1668,7 +1879,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     crc32w(cond, rd, rn, rm);
   }
   void Crc32w(Register rd, Register rn, Register rm) { Crc32w(al, rd, rn, rm); }
@@ -1677,7 +1892,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     dmb(cond, option);
   }
   void Dmb(MemoryBarrier option) { Dmb(al, option); }
@@ -1686,7 +1905,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     dsb(cond, option);
   }
   void Dsb(MemoryBarrier option) { Dsb(al, option); }
@@ -1712,7 +1935,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // EOR<c>{<q>} {<Rdn>,} <Rdn>, <Rm> ; T1
         operand.IsPlainRegister() && rd.Is(rn) && rn.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     eor(cond, rd, rn, operand);
   }
   void Eor(Register rd, Register rn, const Operand& operand) {
@@ -1756,7 +1983,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     eors(cond, rd, rn, operand);
   }
   void Eors(Register rd, Register rn, const Operand& operand) {
@@ -1772,7 +2003,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     fldmdbx(cond, rn, write_back, dreglist);
   }
   void Fldmdbx(Register rn, WriteBack write_back, DRegisterList dreglist) {
@@ -1788,7 +2023,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     fldmiax(cond, rn, write_back, dreglist);
   }
   void Fldmiax(Register rn, WriteBack write_back, DRegisterList dreglist) {
@@ -1804,7 +2043,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     fstmdbx(cond, rn, write_back, dreglist);
   }
   void Fstmdbx(Register rn, WriteBack write_back, DRegisterList dreglist) {
@@ -1820,7 +2063,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     fstmiax(cond, rn, write_back, dreglist);
   }
   void Fstmiax(Register rn, WriteBack write_back, DRegisterList dreglist) {
@@ -1831,7 +2078,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     hlt(cond, imm);
   }
   void Hlt(uint32_t imm) { Hlt(al, imm); }
@@ -1840,7 +2091,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     hvc(cond, imm);
   }
   void Hvc(uint32_t imm) { Hvc(al, imm); }
@@ -1849,7 +2104,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     isb(cond, option);
   }
   void Isb(MemoryBarrier option) { Isb(al, option); }
@@ -1860,7 +2119,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     lda(cond, rt, operand);
   }
   void Lda(Register rt, const MemOperand& operand) { Lda(al, rt, operand); }
@@ -1871,7 +2134,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldab(cond, rt, operand);
   }
   void Ldab(Register rt, const MemOperand& operand) { Ldab(al, rt, operand); }
@@ -1882,7 +2149,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldaex(cond, rt, operand);
   }
   void Ldaex(Register rt, const MemOperand& operand) { Ldaex(al, rt, operand); }
@@ -1893,7 +2164,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldaexb(cond, rt, operand);
   }
   void Ldaexb(Register rt, const MemOperand& operand) {
@@ -1910,7 +2185,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldaexd(cond, rt, rt2, operand);
   }
   void Ldaexd(Register rt, Register rt2, const MemOperand& operand) {
@@ -1923,7 +2202,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldaexh(cond, rt, operand);
   }
   void Ldaexh(Register rt, const MemOperand& operand) {
@@ -1936,7 +2219,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldah(cond, rt, operand);
   }
   void Ldah(Register rt, const MemOperand& operand) { Ldah(al, rt, operand); }
@@ -1950,7 +2237,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldm(cond, rn, write_back, registers);
   }
   void Ldm(Register rn, WriteBack write_back, RegisterList registers) {
@@ -1966,7 +2257,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmda(cond, rn, write_back, registers);
   }
   void Ldmda(Register rn, WriteBack write_back, RegisterList registers) {
@@ -1982,7 +2277,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmdb(cond, rn, write_back, registers);
   }
   void Ldmdb(Register rn, WriteBack write_back, RegisterList registers) {
@@ -1998,7 +2297,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmea(cond, rn, write_back, registers);
   }
   void Ldmea(Register rn, WriteBack write_back, RegisterList registers) {
@@ -2014,7 +2317,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmed(cond, rn, write_back, registers);
   }
   void Ldmed(Register rn, WriteBack write_back, RegisterList registers) {
@@ -2030,7 +2337,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmfa(cond, rn, write_back, registers);
   }
   void Ldmfa(Register rn, WriteBack write_back, RegisterList registers) {
@@ -2046,7 +2357,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmfd(cond, rn, write_back, registers);
   }
   void Ldmfd(Register rn, WriteBack write_back, RegisterList registers) {
@@ -2062,7 +2377,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldmib(cond, rn, write_back, registers);
   }
   void Ldmib(Register rn, WriteBack write_back, RegisterList registers) {
@@ -2091,7 +2410,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          operand.GetBaseRegister().IsLow() &&
          operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
          (operand.GetAddrMode() == Offset));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     ldr(cond, rt, operand);
   }
   void Ldr(Register rt, const MemOperand& operand) { Ldr(al, rt, operand); }
@@ -2114,7 +2437,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          operand.GetBaseRegister().IsLow() &&
          operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
          (operand.GetAddrMode() == Offset));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     ldrb(cond, rt, operand);
   }
   void Ldrb(Register rt, const MemOperand& operand) { Ldrb(al, rt, operand); }
@@ -2130,7 +2457,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrd(cond, rt, rt2, operand);
   }
   void Ldrd(Register rt, Register rt2, const MemOperand& operand) {
@@ -2144,7 +2475,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrex(cond, rt, operand);
   }
   void Ldrex(Register rt, const MemOperand& operand) { Ldrex(al, rt, operand); }
@@ -2155,7 +2490,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrexb(cond, rt, operand);
   }
   void Ldrexb(Register rt, const MemOperand& operand) {
@@ -2172,7 +2511,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrexd(cond, rt, rt2, operand);
   }
   void Ldrexd(Register rt, Register rt2, const MemOperand& operand) {
@@ -2185,7 +2528,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ldrexh(cond, rt, operand);
   }
   void Ldrexh(Register rt, const MemOperand& operand) {
@@ -2209,7 +2556,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          operand.GetBaseRegister().IsLow() &&
          operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
          (operand.GetAddrMode() == Offset));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     ldrh(cond, rt, operand);
   }
   void Ldrh(Register rt, const MemOperand& operand) { Ldrh(al, rt, operand); }
@@ -2227,7 +2578,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         operand.GetBaseRegister().IsLow() &&
         operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
         (operand.GetAddrMode() == Offset);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     ldrsb(cond, rt, operand);
   }
   void Ldrsb(Register rt, const MemOperand& operand) { Ldrsb(al, rt, operand); }
@@ -2245,7 +2600,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         operand.GetBaseRegister().IsLow() &&
         operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
         (operand.GetAddrMode() == Offset);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     ldrsh(cond, rt, operand);
   }
   void Ldrsh(Register rt, const MemOperand& operand) { Ldrsh(al, rt, operand); }
@@ -2265,7 +2624,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // LSL<c>{<q>} {<Rdm>,} <Rdm>, <Rs> ; T1
         (operand.IsPlainRegister() && rd.Is(rm) && rd.IsLow() &&
          operand.GetBaseRegister().IsLow());
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     lsl(cond, rd, rm, operand);
   }
   void Lsl(Register rd, Register rm, const Operand& operand) {
@@ -2311,7 +2674,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     lsls(cond, rd, rm, operand);
   }
   void Lsls(Register rd, Register rm, const Operand& operand) {
@@ -2332,7 +2699,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // LSR<c>{<q>} {<Rdm>,} <Rdm>, <Rs> ; T1
         (operand.IsPlainRegister() && rd.Is(rm) && rd.IsLow() &&
          operand.GetBaseRegister().IsLow());
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     lsr(cond, rd, rm, operand);
   }
   void Lsr(Register rd, Register rm, const Operand& operand) {
@@ -2378,7 +2749,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     lsrs(cond, rd, rm, operand);
   }
   void Lsrs(Register rd, Register rm, const Operand& operand) {
@@ -2393,7 +2768,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     mla(cond, rd, rn, rm, ra);
   }
   void Mla(Register rd, Register rn, Register rm, Register ra) {
@@ -2431,7 +2810,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     mlas(cond, rd, rn, rm, ra);
   }
   void Mlas(Register rd, Register rn, Register rm, Register ra) {
@@ -2446,7 +2829,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     mls(cond, rd, rn, rm, ra);
   }
   void Mls(Register rd, Register rn, Register rm, Register ra) {
@@ -2483,7 +2870,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          (operand.GetShift().Is(LSL) || operand.GetShift().Is(LSR) ||
           operand.GetShift().Is(ASR) || operand.GetShift().Is(ROR)) &&
          operand.GetShiftRegister().IsLow());
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     mov(cond, rd, operand);
   }
   void Mov(Register rd, const Operand& operand) { Mov(al, rd, operand); }
@@ -2536,7 +2927,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     movs(cond, rd, operand);
   }
   void Movs(Register rd, const Operand& operand) { Movs(al, rd, operand); }
@@ -2547,7 +2942,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     movt(cond, rd, operand);
   }
   void Movt(Register rd, const Operand& operand) { Movt(al, rd, operand); }
@@ -2557,7 +2956,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     mrs(cond, rd, spec_reg);
   }
   void Mrs(Register rd, SpecialRegister spec_reg) { Mrs(al, rd, spec_reg); }
@@ -2569,7 +2972,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     msr(cond, spec_reg, operand);
   }
   void Msr(MaskedSpecialRegister spec_reg, const Operand& operand) {
@@ -2586,7 +2993,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     bool can_use_it =
         // MUL<c>{<q>} <Rdm>, <Rn>{, <Rdm>} ; T1
         rd.Is(rm) && rn.IsLow() && rm.IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     mul(cond, rd, rn, rm);
   }
   void Mul(Register rd, Register rn, Register rm) { Mul(al, rd, rn, rm); }
@@ -2624,7 +3035,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     muls(cond, rd, rn, rm);
   }
   void Muls(Register rd, Register rn, Register rm) { Muls(al, rd, rn, rm); }
@@ -2639,7 +3054,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // MVN<c>{<q>} <Rd>, <Rm> ; T1
         operand.IsPlainRegister() && rd.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     mvn(cond, rd, operand);
   }
   void Mvn(Register rd, const Operand& operand) { Mvn(al, rd, operand); }
@@ -2676,7 +3095,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     mvns(cond, rd, operand);
   }
   void Mvns(Register rd, const Operand& operand) { Mvns(al, rd, operand); }
@@ -2685,7 +3108,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     nop(cond);
   }
   void Nop() { Nop(al); }
@@ -2707,7 +3134,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         return;
       }
     }
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     orn(cond, rd, rn, operand);
   }
   void Orn(Register rd, Register rn, const Operand& operand) {
@@ -2744,7 +3175,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     orns(cond, rd, rn, operand);
   }
   void Orns(Register rd, Register rn, const Operand& operand) {
@@ -2776,7 +3211,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // ORR<c>{<q>} {<Rdn>,} <Rdn>, <Rm> ; T1
         operand.IsPlainRegister() && rd.Is(rn) && rn.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     orr(cond, rd, rn, operand);
   }
   void Orr(Register rd, Register rn, const Operand& operand) {
@@ -2824,7 +3263,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     orrs(cond, rd, rn, operand);
   }
   void Orrs(Register rd, Register rn, const Operand& operand) {
@@ -2838,7 +3281,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     pkhbt(cond, rd, rn, operand);
   }
   void Pkhbt(Register rd, Register rn, const Operand& operand) {
@@ -2852,7 +3299,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     pkhtb(cond, rd, rn, operand);
   }
   void Pkhtb(Register rd, Register rn, const Operand& operand) {
@@ -2865,7 +3316,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     pld(cond, operand);
   }
   void Pld(const MemOperand& operand) { Pld(al, operand); }
@@ -2875,7 +3330,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     pldw(cond, operand);
   }
   void Pldw(const MemOperand& operand) { Pldw(al, operand); }
@@ -2885,7 +3344,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     pli(cond, operand);
   }
   void Pli(const MemOperand& operand) { Pli(al, operand); }
@@ -2896,7 +3359,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     if (registers.IsSingleRegister() &&
         (!IsUsingT32() || !registers.IsR0toR7orPC())) {
       pop(cond, registers.GetFirstAvailableRegister());
@@ -2911,7 +3378,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     pop(cond, rt);
   }
   void Pop(Register rt) { Pop(al, rt); }
@@ -2921,7 +3392,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     if (registers.IsSingleRegister() && !registers.Includes(sp) &&
         (!IsUsingT32() || !registers.IsR0toR7orLR())) {
       push(cond, registers.GetFirstAvailableRegister());
@@ -2936,7 +3411,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     if (IsUsingA32() && rt.IsSP()) {
       // Only the A32 multiple-register form can push sp.
       push(cond, RegisterList(rt));
@@ -2953,7 +3432,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qadd(cond, rd, rm, rn);
   }
   void Qadd(Register rd, Register rm, Register rn) { Qadd(al, rd, rm, rn); }
@@ -2965,7 +3448,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qadd16(cond, rd, rn, rm);
   }
   void Qadd16(Register rd, Register rn, Register rm) { Qadd16(al, rd, rn, rm); }
@@ -2977,7 +3464,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qadd8(cond, rd, rn, rm);
   }
   void Qadd8(Register rd, Register rn, Register rm) { Qadd8(al, rd, rn, rm); }
@@ -2989,7 +3480,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qasx(cond, rd, rn, rm);
   }
   void Qasx(Register rd, Register rn, Register rm) { Qasx(al, rd, rn, rm); }
@@ -3001,7 +3496,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qdadd(cond, rd, rm, rn);
   }
   void Qdadd(Register rd, Register rm, Register rn) { Qdadd(al, rd, rm, rn); }
@@ -3013,7 +3512,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qdsub(cond, rd, rm, rn);
   }
   void Qdsub(Register rd, Register rm, Register rn) { Qdsub(al, rd, rm, rn); }
@@ -3025,7 +3528,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qsax(cond, rd, rn, rm);
   }
   void Qsax(Register rd, Register rn, Register rm) { Qsax(al, rd, rn, rm); }
@@ -3037,7 +3544,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qsub(cond, rd, rm, rn);
   }
   void Qsub(Register rd, Register rm, Register rn) { Qsub(al, rd, rm, rn); }
@@ -3049,7 +3560,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qsub16(cond, rd, rn, rm);
   }
   void Qsub16(Register rd, Register rn, Register rm) { Qsub16(al, rd, rn, rm); }
@@ -3061,7 +3576,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     qsub8(cond, rd, rn, rm);
   }
   void Qsub8(Register rd, Register rn, Register rm) { Qsub8(al, rd, rn, rm); }
@@ -3072,7 +3591,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rbit(cond, rd, rm);
   }
   void Rbit(Register rd, Register rm) { Rbit(al, rd, rm); }
@@ -3083,7 +3606,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rev(cond, rd, rm);
   }
   void Rev(Register rd, Register rm) { Rev(al, rd, rm); }
@@ -3094,7 +3621,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rev16(cond, rd, rm);
   }
   void Rev16(Register rd, Register rm) { Rev16(al, rd, rm); }
@@ -3105,7 +3636,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     revsh(cond, rd, rm);
   }
   void Revsh(Register rd, Register rm) { Revsh(al, rd, rm); }
@@ -3121,7 +3656,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // ROR<c>{<q>} {<Rdm>,} <Rdm>, <Rs> ; T1
         operand.IsPlainRegister() && rd.Is(rm) && rd.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     ror(cond, rd, rm, operand);
   }
   void Ror(Register rd, Register rm, const Operand& operand) {
@@ -3165,7 +3704,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rors(cond, rd, rm, operand);
   }
   void Rors(Register rd, Register rm, const Operand& operand) {
@@ -3178,7 +3721,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rrx(cond, rd, rm);
   }
   void Rrx(Register rd, Register rm) { Rrx(al, rd, rm); }
@@ -3205,7 +3752,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rrxs(cond, rd, rm);
   }
   void Rrxs(Register rd, Register rm) { Rrxs(al, rd, rm); }
@@ -3221,7 +3772,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // RSB<c>{<q>} {<Rd>, }<Rn>, #0 ; T1
         operand.IsImmediate() && rd.IsLow() && rn.IsLow() &&
         (operand.GetImmediate() == 0);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     rsb(cond, rd, rn, operand);
   }
   void Rsb(Register rd, Register rn, const Operand& operand) {
@@ -3265,7 +3820,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rsbs(cond, rd, rn, operand);
   }
   void Rsbs(Register rd, Register rn, const Operand& operand) {
@@ -3279,7 +3838,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rsc(cond, rd, rn, operand);
   }
   void Rsc(Register rd, Register rn, const Operand& operand) {
@@ -3316,7 +3879,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     rscs(cond, rd, rn, operand);
   }
   void Rscs(Register rd, Register rn, const Operand& operand) {
@@ -3330,7 +3897,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sadd16(cond, rd, rn, rm);
   }
   void Sadd16(Register rd, Register rn, Register rm) { Sadd16(al, rd, rn, rm); }
@@ -3342,7 +3913,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sadd8(cond, rd, rn, rm);
   }
   void Sadd8(Register rd, Register rn, Register rm) { Sadd8(al, rd, rn, rm); }
@@ -3354,7 +3929,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sasx(cond, rd, rn, rm);
   }
   void Sasx(Register rd, Register rn, Register rm) { Sasx(al, rd, rn, rm); }
@@ -3370,7 +3949,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // SBC<c>{<q>} {<Rdn>,} <Rdn>, <Rm> ; T1
         operand.IsPlainRegister() && rn.IsLow() && rd.Is(rn) &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     sbc(cond, rd, rn, operand);
   }
   void Sbc(Register rd, Register rn, const Operand& operand) {
@@ -3414,7 +3997,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sbcs(cond, rd, rn, operand);
   }
   void Sbcs(Register rd, Register rn, const Operand& operand) {
@@ -3428,7 +4015,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sbfx(cond, rd, rn, lsb, width);
   }
   void Sbfx(Register rd, Register rn, uint32_t lsb, uint32_t width) {
@@ -3442,7 +4033,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sdiv(cond, rd, rn, rm);
   }
   void Sdiv(Register rd, Register rn, Register rm) { Sdiv(al, rd, rn, rm); }
@@ -3454,7 +4049,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sel(cond, rd, rn, rm);
   }
   void Sel(Register rd, Register rn, Register rm) { Sel(al, rd, rn, rm); }
@@ -3466,7 +4065,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     shadd16(cond, rd, rn, rm);
   }
   void Shadd16(Register rd, Register rn, Register rm) {
@@ -3480,7 +4083,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     shadd8(cond, rd, rn, rm);
   }
   void Shadd8(Register rd, Register rn, Register rm) { Shadd8(al, rd, rn, rm); }
@@ -3492,7 +4099,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     shasx(cond, rd, rn, rm);
   }
   void Shasx(Register rd, Register rn, Register rm) { Shasx(al, rd, rn, rm); }
@@ -3504,7 +4115,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     shsax(cond, rd, rn, rm);
   }
   void Shsax(Register rd, Register rn, Register rm) { Shsax(al, rd, rn, rm); }
@@ -3516,7 +4131,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     shsub16(cond, rd, rn, rm);
   }
   void Shsub16(Register rd, Register rn, Register rm) {
@@ -3530,7 +4149,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     shsub8(cond, rd, rn, rm);
   }
   void Shsub8(Register rd, Register rn, Register rm) { Shsub8(al, rd, rn, rm); }
@@ -3544,7 +4167,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlabb(cond, rd, rn, rm, ra);
   }
   void Smlabb(Register rd, Register rn, Register rm, Register ra) {
@@ -3560,7 +4187,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlabt(cond, rd, rn, rm, ra);
   }
   void Smlabt(Register rd, Register rn, Register rm, Register ra) {
@@ -3576,7 +4207,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlad(cond, rd, rn, rm, ra);
   }
   void Smlad(Register rd, Register rn, Register rm, Register ra) {
@@ -3592,7 +4227,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smladx(cond, rd, rn, rm, ra);
   }
   void Smladx(Register rd, Register rn, Register rm, Register ra) {
@@ -3608,7 +4247,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlal(cond, rdlo, rdhi, rn, rm);
   }
   void Smlal(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3624,7 +4267,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlalbb(cond, rdlo, rdhi, rn, rm);
   }
   void Smlalbb(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3640,7 +4287,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlalbt(cond, rdlo, rdhi, rn, rm);
   }
   void Smlalbt(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3656,7 +4307,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlald(cond, rdlo, rdhi, rn, rm);
   }
   void Smlald(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3672,7 +4327,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlaldx(cond, rdlo, rdhi, rn, rm);
   }
   void Smlaldx(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3688,7 +4347,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlals(cond, rdlo, rdhi, rn, rm);
   }
   void Smlals(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3704,7 +4367,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlaltb(cond, rdlo, rdhi, rn, rm);
   }
   void Smlaltb(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3720,7 +4387,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlaltt(cond, rdlo, rdhi, rn, rm);
   }
   void Smlaltt(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3736,7 +4407,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlatb(cond, rd, rn, rm, ra);
   }
   void Smlatb(Register rd, Register rn, Register rm, Register ra) {
@@ -3752,7 +4427,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlatt(cond, rd, rn, rm, ra);
   }
   void Smlatt(Register rd, Register rn, Register rm, Register ra) {
@@ -3768,7 +4447,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlawb(cond, rd, rn, rm, ra);
   }
   void Smlawb(Register rd, Register rn, Register rm, Register ra) {
@@ -3784,7 +4467,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlawt(cond, rd, rn, rm, ra);
   }
   void Smlawt(Register rd, Register rn, Register rm, Register ra) {
@@ -3800,7 +4487,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlsd(cond, rd, rn, rm, ra);
   }
   void Smlsd(Register rd, Register rn, Register rm, Register ra) {
@@ -3816,7 +4507,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlsdx(cond, rd, rn, rm, ra);
   }
   void Smlsdx(Register rd, Register rn, Register rm, Register ra) {
@@ -3832,7 +4527,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlsld(cond, rdlo, rdhi, rn, rm);
   }
   void Smlsld(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3848,7 +4547,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smlsldx(cond, rdlo, rdhi, rn, rm);
   }
   void Smlsldx(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -3864,7 +4567,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smmla(cond, rd, rn, rm, ra);
   }
   void Smmla(Register rd, Register rn, Register rm, Register ra) {
@@ -3880,7 +4587,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smmlar(cond, rd, rn, rm, ra);
   }
   void Smmlar(Register rd, Register rn, Register rm, Register ra) {
@@ -3896,7 +4607,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smmls(cond, rd, rn, rm, ra);
   }
   void Smmls(Register rd, Register rn, Register rm, Register ra) {
@@ -3912,7 +4627,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smmlsr(cond, rd, rn, rm, ra);
   }
   void Smmlsr(Register rd, Register rn, Register rm, Register ra) {
@@ -3926,7 +4645,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smmul(cond, rd, rn, rm);
   }
   void Smmul(Register rd, Register rn, Register rm) { Smmul(al, rd, rn, rm); }
@@ -3938,7 +4661,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smmulr(cond, rd, rn, rm);
   }
   void Smmulr(Register rd, Register rn, Register rm) { Smmulr(al, rd, rn, rm); }
@@ -3950,7 +4677,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smuad(cond, rd, rn, rm);
   }
   void Smuad(Register rd, Register rn, Register rm) { Smuad(al, rd, rn, rm); }
@@ -3962,7 +4693,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smuadx(cond, rd, rn, rm);
   }
   void Smuadx(Register rd, Register rn, Register rm) { Smuadx(al, rd, rn, rm); }
@@ -3974,7 +4709,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smulbb(cond, rd, rn, rm);
   }
   void Smulbb(Register rd, Register rn, Register rm) { Smulbb(al, rd, rn, rm); }
@@ -3986,7 +4725,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smulbt(cond, rd, rn, rm);
   }
   void Smulbt(Register rd, Register rn, Register rm) { Smulbt(al, rd, rn, rm); }
@@ -4000,7 +4743,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smull(cond, rdlo, rdhi, rn, rm);
   }
   void Smull(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -4041,7 +4788,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smulls(cond, rdlo, rdhi, rn, rm);
   }
   void Smulls(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -4055,7 +4806,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smultb(cond, rd, rn, rm);
   }
   void Smultb(Register rd, Register rn, Register rm) { Smultb(al, rd, rn, rm); }
@@ -4067,7 +4822,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smultt(cond, rd, rn, rm);
   }
   void Smultt(Register rd, Register rn, Register rm) { Smultt(al, rd, rn, rm); }
@@ -4079,7 +4838,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smulwb(cond, rd, rn, rm);
   }
   void Smulwb(Register rd, Register rn, Register rm) { Smulwb(al, rd, rn, rm); }
@@ -4091,7 +4854,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smulwt(cond, rd, rn, rm);
   }
   void Smulwt(Register rd, Register rn, Register rm) { Smulwt(al, rd, rn, rm); }
@@ -4103,7 +4870,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smusd(cond, rd, rn, rm);
   }
   void Smusd(Register rd, Register rn, Register rm) { Smusd(al, rd, rn, rm); }
@@ -4115,7 +4886,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     smusdx(cond, rd, rn, rm);
   }
   void Smusdx(Register rd, Register rn, Register rm) { Smusdx(al, rd, rn, rm); }
@@ -4126,7 +4901,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ssat(cond, rd, imm, operand);
   }
   void Ssat(Register rd, uint32_t imm, const Operand& operand) {
@@ -4139,7 +4918,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ssat16(cond, rd, imm, rn);
   }
   void Ssat16(Register rd, uint32_t imm, Register rn) {
@@ -4153,7 +4936,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ssax(cond, rd, rn, rm);
   }
   void Ssax(Register rd, Register rn, Register rm) { Ssax(al, rd, rn, rm); }
@@ -4165,7 +4952,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ssub16(cond, rd, rn, rm);
   }
   void Ssub16(Register rd, Register rn, Register rm) { Ssub16(al, rd, rn, rm); }
@@ -4177,7 +4968,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ssub8(cond, rd, rn, rm);
   }
   void Ssub8(Register rd, Register rn, Register rm) { Ssub8(al, rd, rn, rm); }
@@ -4188,7 +4983,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stl(cond, rt, operand);
   }
   void Stl(Register rt, const MemOperand& operand) { Stl(al, rt, operand); }
@@ -4199,7 +4998,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stlb(cond, rt, operand);
   }
   void Stlb(Register rt, const MemOperand& operand) { Stlb(al, rt, operand); }
@@ -4214,7 +5017,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stlex(cond, rd, rt, operand);
   }
   void Stlex(Register rd, Register rt, const MemOperand& operand) {
@@ -4231,7 +5038,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stlexb(cond, rd, rt, operand);
   }
   void Stlexb(Register rd, Register rt, const MemOperand& operand) {
@@ -4250,7 +5061,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stlexd(cond, rd, rt, rt2, operand);
   }
   void Stlexd(Register rd,
@@ -4270,7 +5085,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stlexh(cond, rd, rt, operand);
   }
   void Stlexh(Register rd, Register rt, const MemOperand& operand) {
@@ -4283,7 +5102,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stlh(cond, rt, operand);
   }
   void Stlh(Register rt, const MemOperand& operand) { Stlh(al, rt, operand); }
@@ -4297,7 +5120,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stm(cond, rn, write_back, registers);
   }
   void Stm(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4313,7 +5140,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmda(cond, rn, write_back, registers);
   }
   void Stmda(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4329,7 +5160,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmdb(cond, rn, write_back, registers);
   }
   void Stmdb(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4345,7 +5180,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmea(cond, rn, write_back, registers);
   }
   void Stmea(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4361,7 +5200,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmed(cond, rn, write_back, registers);
   }
   void Stmed(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4377,7 +5220,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmfa(cond, rn, write_back, registers);
   }
   void Stmfa(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4393,7 +5240,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmfd(cond, rn, write_back, registers);
   }
   void Stmfd(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4409,7 +5260,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     stmib(cond, rn, write_back, registers);
   }
   void Stmib(Register rn, WriteBack write_back, RegisterList registers) {
@@ -4438,7 +5293,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          operand.GetBaseRegister().IsLow() &&
          operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
          (operand.GetAddrMode() == Offset));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     str(cond, rt, operand);
   }
   void Str(Register rt, const MemOperand& operand) { Str(al, rt, operand); }
@@ -4460,7 +5319,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          operand.GetBaseRegister().IsLow() &&
          operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
          (operand.GetAddrMode() == Offset));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     strb(cond, rt, operand);
   }
   void Strb(Register rt, const MemOperand& operand) { Strb(al, rt, operand); }
@@ -4475,7 +5338,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     strd(cond, rt, rt2, operand);
   }
   void Strd(Register rt, Register rt2, const MemOperand& operand) {
@@ -4492,7 +5359,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     strex(cond, rd, rt, operand);
   }
   void Strex(Register rd, Register rt, const MemOperand& operand) {
@@ -4509,7 +5380,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     strexb(cond, rd, rt, operand);
   }
   void Strexb(Register rd, Register rt, const MemOperand& operand) {
@@ -4528,7 +5403,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     strexd(cond, rd, rt, rt2, operand);
   }
   void Strexd(Register rd,
@@ -4548,7 +5427,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     strexh(cond, rd, rt, operand);
   }
   void Strexh(Register rd, Register rt, const MemOperand& operand) {
@@ -4572,7 +5455,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
          operand.GetBaseRegister().IsLow() &&
          operand.GetOffsetRegister().IsLow() && operand.GetSign().IsPlus() &&
          (operand.GetAddrMode() == Offset));
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     strh(cond, rt, operand);
   }
   void Strh(Register rt, const MemOperand& operand) { Strh(al, rt, operand); }
@@ -4600,7 +5487,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // SUB<c>{<q>} <Rd>, <Rn>, <Rm>
         (operand.IsPlainRegister() && rd.IsLow() && rn.IsLow() &&
          operand.GetBaseRegister().IsLow());
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     sub(cond, rd, rn, operand);
   }
   void Sub(Register rd, Register rn, const Operand& operand) {
@@ -4658,7 +5549,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     subs(cond, rd, rn, operand);
   }
   void Subs(Register rd, Register rn, const Operand& operand) {
@@ -4669,7 +5564,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     svc(cond, imm);
   }
   void Svc(uint32_t imm) { Svc(al, imm); }
@@ -4681,7 +5580,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sxtab(cond, rd, rn, operand);
   }
   void Sxtab(Register rd, Register rn, const Operand& operand) {
@@ -4698,7 +5601,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sxtab16(cond, rd, rn, operand);
   }
   void Sxtab16(Register rd, Register rn, const Operand& operand) {
@@ -4712,7 +5619,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sxtah(cond, rd, rn, operand);
   }
   void Sxtah(Register rd, Register rn, const Operand& operand) {
@@ -4725,7 +5636,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sxtb(cond, rd, operand);
   }
   void Sxtb(Register rd, const Operand& operand) { Sxtb(al, rd, operand); }
@@ -4736,7 +5651,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sxtb16(cond, rd, operand);
   }
   void Sxtb16(Register rd, const Operand& operand) { Sxtb16(al, rd, operand); }
@@ -4747,7 +5666,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     sxth(cond, rd, operand);
   }
   void Sxth(Register rd, const Operand& operand) { Sxth(al, rd, operand); }
@@ -4758,7 +5681,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     teq(cond, rn, operand);
   }
   void Teq(Register rn, const Operand& operand) { Teq(al, rn, operand); }
@@ -4773,7 +5700,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
         // TST{<c>}{<q>} <Rn>, <Rm> ; T1
         operand.IsPlainRegister() && rn.IsLow() &&
         operand.GetBaseRegister().IsLow();
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard, can_use_it);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard, can_use_it);
+#endif
     tst(cond, rn, operand);
   }
   void Tst(Register rn, const Operand& operand) { Tst(al, rn, operand); }
@@ -4785,7 +5716,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uadd16(cond, rd, rn, rm);
   }
   void Uadd16(Register rd, Register rn, Register rm) { Uadd16(al, rd, rn, rm); }
@@ -4797,7 +5732,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uadd8(cond, rd, rn, rm);
   }
   void Uadd8(Register rd, Register rn, Register rm) { Uadd8(al, rd, rn, rm); }
@@ -4809,7 +5748,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uasx(cond, rd, rn, rm);
   }
   void Uasx(Register rd, Register rn, Register rm) { Uasx(al, rd, rn, rm); }
@@ -4821,7 +5764,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     ubfx(cond, rd, rn, lsb, width);
   }
   void Ubfx(Register rd, Register rn, uint32_t lsb, uint32_t width) {
@@ -4832,7 +5779,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     udf(cond, imm);
   }
   void Udf(uint32_t imm) { Udf(al, imm); }
@@ -4844,7 +5795,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     udiv(cond, rd, rn, rm);
   }
   void Udiv(Register rd, Register rn, Register rm) { Udiv(al, rd, rn, rm); }
@@ -4856,7 +5811,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uhadd16(cond, rd, rn, rm);
   }
   void Uhadd16(Register rd, Register rn, Register rm) {
@@ -4870,7 +5829,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uhadd8(cond, rd, rn, rm);
   }
   void Uhadd8(Register rd, Register rn, Register rm) { Uhadd8(al, rd, rn, rm); }
@@ -4882,7 +5845,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uhasx(cond, rd, rn, rm);
   }
   void Uhasx(Register rd, Register rn, Register rm) { Uhasx(al, rd, rn, rm); }
@@ -4894,7 +5861,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uhsax(cond, rd, rn, rm);
   }
   void Uhsax(Register rd, Register rn, Register rm) { Uhsax(al, rd, rn, rm); }
@@ -4906,7 +5877,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uhsub16(cond, rd, rn, rm);
   }
   void Uhsub16(Register rd, Register rn, Register rm) {
@@ -4920,7 +5895,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uhsub8(cond, rd, rn, rm);
   }
   void Uhsub8(Register rd, Register rn, Register rm) { Uhsub8(al, rd, rn, rm); }
@@ -4934,7 +5913,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     umaal(cond, rdlo, rdhi, rn, rm);
   }
   void Umaal(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -4950,7 +5933,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     umlal(cond, rdlo, rdhi, rn, rm);
   }
   void Umlal(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -4991,7 +5978,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     umlals(cond, rdlo, rdhi, rn, rm);
   }
   void Umlals(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -5007,7 +5998,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     umull(cond, rdlo, rdhi, rn, rm);
   }
   void Umull(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -5048,7 +6043,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     umulls(cond, rdlo, rdhi, rn, rm);
   }
   void Umulls(Register rdlo, Register rdhi, Register rn, Register rm) {
@@ -5062,7 +6061,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uqadd16(cond, rd, rn, rm);
   }
   void Uqadd16(Register rd, Register rn, Register rm) {
@@ -5076,7 +6079,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uqadd8(cond, rd, rn, rm);
   }
   void Uqadd8(Register rd, Register rn, Register rm) { Uqadd8(al, rd, rn, rm); }
@@ -5088,7 +6095,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uqasx(cond, rd, rn, rm);
   }
   void Uqasx(Register rd, Register rn, Register rm) { Uqasx(al, rd, rn, rm); }
@@ -5100,7 +6111,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uqsax(cond, rd, rn, rm);
   }
   void Uqsax(Register rd, Register rn, Register rm) { Uqsax(al, rd, rn, rm); }
@@ -5112,7 +6127,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uqsub16(cond, rd, rn, rm);
   }
   void Uqsub16(Register rd, Register rn, Register rm) {
@@ -5126,7 +6145,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uqsub8(cond, rd, rn, rm);
   }
   void Uqsub8(Register rd, Register rn, Register rm) { Uqsub8(al, rd, rn, rm); }
@@ -5138,7 +6161,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usad8(cond, rd, rn, rm);
   }
   void Usad8(Register rd, Register rn, Register rm) { Usad8(al, rd, rn, rm); }
@@ -5152,7 +6179,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usada8(cond, rd, rn, rm, ra);
   }
   void Usada8(Register rd, Register rn, Register rm, Register ra) {
@@ -5165,7 +6196,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usat(cond, rd, imm, operand);
   }
   void Usat(Register rd, uint32_t imm, const Operand& operand) {
@@ -5178,7 +6213,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usat16(cond, rd, imm, rn);
   }
   void Usat16(Register rd, uint32_t imm, Register rn) {
@@ -5192,7 +6231,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usax(cond, rd, rn, rm);
   }
   void Usax(Register rd, Register rn, Register rm) { Usax(al, rd, rn, rm); }
@@ -5204,7 +6247,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usub16(cond, rd, rn, rm);
   }
   void Usub16(Register rd, Register rn, Register rm) { Usub16(al, rd, rn, rm); }
@@ -5216,7 +6263,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     usub8(cond, rd, rn, rm);
   }
   void Usub8(Register rd, Register rn, Register rm) { Usub8(al, rd, rn, rm); }
@@ -5228,7 +6279,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uxtab(cond, rd, rn, operand);
   }
   void Uxtab(Register rd, Register rn, const Operand& operand) {
@@ -5245,7 +6300,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uxtab16(cond, rd, rn, operand);
   }
   void Uxtab16(Register rd, Register rn, const Operand& operand) {
@@ -5259,7 +6318,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uxtah(cond, rd, rn, operand);
   }
   void Uxtah(Register rd, Register rn, const Operand& operand) {
@@ -5272,7 +6335,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uxtb(cond, rd, operand);
   }
   void Uxtb(Register rd, const Operand& operand) { Uxtb(al, rd, operand); }
@@ -5283,7 +6350,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uxtb16(cond, rd, operand);
   }
   void Uxtb16(Register rd, const Operand& operand) { Uxtb16(al, rd, operand); }
@@ -5294,7 +6365,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     uxth(cond, rd, operand);
   }
   void Uxth(Register rd, const Operand& operand) { Uxth(al, rd, operand); }
@@ -5307,7 +6382,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaba(cond, dt, rd, rn, rm);
   }
   void Vaba(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5322,7 +6401,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaba(cond, dt, rd, rn, rm);
   }
   void Vaba(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5337,7 +6420,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabal(cond, dt, rd, rn, rm);
   }
   void Vabal(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -5352,7 +6439,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabd(cond, dt, rd, rn, rm);
   }
   void Vabd(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5367,7 +6458,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabd(cond, dt, rd, rn, rm);
   }
   void Vabd(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5382,7 +6477,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabdl(cond, dt, rd, rn, rm);
   }
   void Vabdl(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -5395,7 +6494,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabs(cond, dt, rd, rm);
   }
   void Vabs(DataType dt, DRegister rd, DRegister rm) { Vabs(al, dt, rd, rm); }
@@ -5406,7 +6509,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabs(cond, dt, rd, rm);
   }
   void Vabs(DataType dt, QRegister rd, QRegister rm) { Vabs(al, dt, rd, rm); }
@@ -5417,7 +6524,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vabs(cond, dt, rd, rm);
   }
   void Vabs(DataType dt, SRegister rd, SRegister rm) { Vabs(al, dt, rd, rm); }
@@ -5430,7 +6541,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vacge(cond, dt, rd, rn, rm);
   }
   void Vacge(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5445,7 +6560,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vacge(cond, dt, rd, rn, rm);
   }
   void Vacge(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5460,7 +6579,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vacgt(cond, dt, rd, rn, rm);
   }
   void Vacgt(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5475,7 +6598,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vacgt(cond, dt, rd, rn, rm);
   }
   void Vacgt(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5490,7 +6617,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vacle(cond, dt, rd, rn, rm);
   }
   void Vacle(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5505,7 +6636,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vacle(cond, dt, rd, rn, rm);
   }
   void Vacle(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5520,7 +6655,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaclt(cond, dt, rd, rn, rm);
   }
   void Vaclt(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5535,7 +6674,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaclt(cond, dt, rd, rn, rm);
   }
   void Vaclt(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5550,7 +6693,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vadd(cond, dt, rd, rn, rm);
   }
   void Vadd(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5565,7 +6712,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vadd(cond, dt, rd, rn, rm);
   }
   void Vadd(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5580,7 +6731,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vadd(cond, dt, rd, rn, rm);
   }
   void Vadd(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -5595,7 +6750,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaddhn(cond, dt, rd, rn, rm);
   }
   void Vaddhn(DataType dt, DRegister rd, QRegister rn, QRegister rm) {
@@ -5610,7 +6769,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaddl(cond, dt, rd, rn, rm);
   }
   void Vaddl(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -5625,7 +6788,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vaddw(cond, dt, rd, rn, rm);
   }
   void Vaddw(DataType dt, QRegister rd, QRegister rn, DRegister rm) {
@@ -5643,7 +6810,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vand(cond, dt, rd, rn, operand);
   }
   void Vand(DataType dt, DRegister rd, DRegister rn, const DOperand& operand) {
@@ -5661,7 +6832,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vand(cond, dt, rd, rn, operand);
   }
   void Vand(DataType dt, QRegister rd, QRegister rn, const QOperand& operand) {
@@ -5679,7 +6854,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbic(cond, dt, rd, rn, operand);
   }
   void Vbic(DataType dt, DRegister rd, DRegister rn, const DOperand& operand) {
@@ -5697,7 +6876,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbic(cond, dt, rd, rn, operand);
   }
   void Vbic(DataType dt, QRegister rd, QRegister rn, const QOperand& operand) {
@@ -5712,7 +6895,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbif(cond, dt, rd, rn, rm);
   }
   void Vbif(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5733,7 +6920,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbif(cond, dt, rd, rn, rm);
   }
   void Vbif(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5754,7 +6945,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbit(cond, dt, rd, rn, rm);
   }
   void Vbit(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5775,7 +6970,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbit(cond, dt, rd, rn, rm);
   }
   void Vbit(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5796,7 +6995,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbsl(cond, dt, rd, rn, rm);
   }
   void Vbsl(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5817,7 +7020,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vbsl(cond, dt, rd, rn, rm);
   }
   void Vbsl(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5841,7 +7048,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vceq(cond, dt, rd, rm, operand);
   }
   void Vceq(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -5859,7 +7070,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vceq(cond, dt, rd, rm, operand);
   }
   void Vceq(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -5874,7 +7089,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vceq(cond, dt, rd, rn, rm);
   }
   void Vceq(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5889,7 +7108,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vceq(cond, dt, rd, rn, rm);
   }
   void Vceq(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5907,7 +7130,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcge(cond, dt, rd, rm, operand);
   }
   void Vcge(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -5925,7 +7152,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcge(cond, dt, rd, rm, operand);
   }
   void Vcge(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -5940,7 +7171,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcge(cond, dt, rd, rn, rm);
   }
   void Vcge(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -5955,7 +7190,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcge(cond, dt, rd, rn, rm);
   }
   void Vcge(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -5973,7 +7212,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcgt(cond, dt, rd, rm, operand);
   }
   void Vcgt(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -5991,7 +7234,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcgt(cond, dt, rd, rm, operand);
   }
   void Vcgt(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -6006,7 +7253,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcgt(cond, dt, rd, rn, rm);
   }
   void Vcgt(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6021,7 +7272,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcgt(cond, dt, rd, rn, rm);
   }
   void Vcgt(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -6039,7 +7294,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcle(cond, dt, rd, rm, operand);
   }
   void Vcle(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -6057,7 +7316,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcle(cond, dt, rd, rm, operand);
   }
   void Vcle(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -6072,7 +7335,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcle(cond, dt, rd, rn, rm);
   }
   void Vcle(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6087,7 +7354,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcle(cond, dt, rd, rn, rm);
   }
   void Vcle(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -6100,7 +7371,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcls(cond, dt, rd, rm);
   }
   void Vcls(DataType dt, DRegister rd, DRegister rm) { Vcls(al, dt, rd, rm); }
@@ -6111,7 +7386,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcls(cond, dt, rd, rm);
   }
   void Vcls(DataType dt, QRegister rd, QRegister rm) { Vcls(al, dt, rd, rm); }
@@ -6127,7 +7406,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vclt(cond, dt, rd, rm, operand);
   }
   void Vclt(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -6145,7 +7428,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vclt(cond, dt, rd, rm, operand);
   }
   void Vclt(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -6160,7 +7447,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vclt(cond, dt, rd, rn, rm);
   }
   void Vclt(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6175,7 +7466,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vclt(cond, dt, rd, rn, rm);
   }
   void Vclt(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -6188,7 +7483,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vclz(cond, dt, rd, rm);
   }
   void Vclz(DataType dt, DRegister rd, DRegister rm) { Vclz(al, dt, rd, rm); }
@@ -6199,7 +7498,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vclz(cond, dt, rd, rm);
   }
   void Vclz(DataType dt, QRegister rd, QRegister rm) { Vclz(al, dt, rd, rm); }
@@ -6213,7 +7516,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcmp(cond, dt, rd, operand);
   }
   void Vcmp(DataType dt, SRegister rd, const SOperand& operand) {
@@ -6229,7 +7536,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcmp(cond, dt, rd, operand);
   }
   void Vcmp(DataType dt, DRegister rd, const DOperand& operand) {
@@ -6245,7 +7556,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcmpe(cond, dt, rd, operand);
   }
   void Vcmpe(DataType dt, SRegister rd, const SOperand& operand) {
@@ -6261,7 +7576,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcmpe(cond, dt, rd, operand);
   }
   void Vcmpe(DataType dt, DRegister rd, const DOperand& operand) {
@@ -6274,7 +7593,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcnt(cond, dt, rd, rm);
   }
   void Vcnt(DataType dt, DRegister rd, DRegister rm) { Vcnt(al, dt, rd, rm); }
@@ -6285,7 +7608,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcnt(cond, dt, rd, rm);
   }
   void Vcnt(DataType dt, QRegister rd, QRegister rm) { Vcnt(al, dt, rd, rm); }
@@ -6297,7 +7624,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, DRegister rd, SRegister rm) {
@@ -6311,7 +7642,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, SRegister rd, DRegister rm) {
@@ -6329,7 +7664,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm, fbits);
   }
   void Vcvt(
@@ -6348,7 +7687,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm, fbits);
   }
   void Vcvt(
@@ -6367,7 +7710,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm, fbits);
   }
   void Vcvt(
@@ -6382,7 +7729,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, DRegister rd, DRegister rm) {
@@ -6396,7 +7747,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, QRegister rd, QRegister rm) {
@@ -6410,7 +7765,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, DRegister rd, QRegister rm) {
@@ -6424,7 +7783,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, QRegister rd, DRegister rm) {
@@ -6438,7 +7801,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvt(cond, dt1, dt2, rd, rm);
   }
   void Vcvt(DataType dt1, DataType dt2, SRegister rd, SRegister rm) {
@@ -6488,7 +7855,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtb(cond, dt1, dt2, rd, rm);
   }
   void Vcvtb(DataType dt1, DataType dt2, SRegister rd, SRegister rm) {
@@ -6502,7 +7873,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtb(cond, dt1, dt2, rd, rm);
   }
   void Vcvtb(DataType dt1, DataType dt2, DRegister rd, SRegister rm) {
@@ -6516,7 +7891,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtb(cond, dt1, dt2, rd, rm);
   }
   void Vcvtb(DataType dt1, DataType dt2, SRegister rd, DRegister rm) {
@@ -6638,7 +8017,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtr(cond, dt1, dt2, rd, rm);
   }
   void Vcvtr(DataType dt1, DataType dt2, SRegister rd, SRegister rm) {
@@ -6652,7 +8035,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtr(cond, dt1, dt2, rd, rm);
   }
   void Vcvtr(DataType dt1, DataType dt2, SRegister rd, DRegister rm) {
@@ -6666,7 +8053,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtt(cond, dt1, dt2, rd, rm);
   }
   void Vcvtt(DataType dt1, DataType dt2, SRegister rd, SRegister rm) {
@@ -6680,7 +8071,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtt(cond, dt1, dt2, rd, rm);
   }
   void Vcvtt(DataType dt1, DataType dt2, DRegister rd, SRegister rm) {
@@ -6694,7 +8089,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vcvtt(cond, dt1, dt2, rd, rm);
   }
   void Vcvtt(DataType dt1, DataType dt2, SRegister rd, DRegister rm) {
@@ -6709,7 +8108,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vdiv(cond, dt, rd, rn, rm);
   }
   void Vdiv(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -6724,7 +8127,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vdiv(cond, dt, rd, rn, rm);
   }
   void Vdiv(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6737,7 +8144,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vdup(cond, dt, rd, rt);
   }
   void Vdup(DataType dt, QRegister rd, Register rt) { Vdup(al, dt, rd, rt); }
@@ -6748,7 +8159,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vdup(cond, dt, rd, rt);
   }
   void Vdup(DataType dt, DRegister rd, Register rt) { Vdup(al, dt, rd, rt); }
@@ -6759,7 +8174,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vdup(cond, dt, rd, rm);
   }
   void Vdup(DataType dt, DRegister rd, DRegisterLane rm) {
@@ -6772,7 +8191,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vdup(cond, dt, rd, rm);
   }
   void Vdup(DataType dt, QRegister rd, DRegisterLane rm) {
@@ -6787,7 +8210,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     veor(cond, dt, rd, rn, rm);
   }
   void Veor(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6808,7 +8235,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     veor(cond, dt, rd, rn, rm);
   }
   void Veor(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -6834,7 +8265,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vext(cond, dt, rd, rn, rm, operand);
   }
   void Vext(DataType dt,
@@ -6858,7 +8293,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vext(cond, dt, rd, rn, rm, operand);
   }
   void Vext(DataType dt,
@@ -6877,7 +8316,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfma(cond, dt, rd, rn, rm);
   }
   void Vfma(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6892,7 +8335,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfma(cond, dt, rd, rn, rm);
   }
   void Vfma(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -6907,7 +8354,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfma(cond, dt, rd, rn, rm);
   }
   void Vfma(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -6922,7 +8373,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfms(cond, dt, rd, rn, rm);
   }
   void Vfms(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6937,7 +8392,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfms(cond, dt, rd, rn, rm);
   }
   void Vfms(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -6952,7 +8411,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfms(cond, dt, rd, rn, rm);
   }
   void Vfms(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -6967,7 +8430,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfnma(cond, dt, rd, rn, rm);
   }
   void Vfnma(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -6982,7 +8449,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfnma(cond, dt, rd, rn, rm);
   }
   void Vfnma(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -6997,7 +8468,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfnms(cond, dt, rd, rn, rm);
   }
   void Vfnms(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -7012,7 +8487,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vfnms(cond, dt, rd, rn, rm);
   }
   void Vfnms(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7027,7 +8506,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vhadd(cond, dt, rd, rn, rm);
   }
   void Vhadd(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7042,7 +8525,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vhadd(cond, dt, rd, rn, rm);
   }
   void Vhadd(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -7057,7 +8544,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vhsub(cond, dt, rd, rn, rm);
   }
   void Vhsub(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7072,7 +8563,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vhsub(cond, dt, rd, rn, rm);
   }
   void Vhsub(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -7088,7 +8583,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vld1(cond, dt, nreglist, operand);
   }
   void Vld1(DataType dt,
@@ -7106,7 +8605,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vld2(cond, dt, nreglist, operand);
   }
   void Vld2(DataType dt,
@@ -7124,7 +8627,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vld3(cond, dt, nreglist, operand);
   }
   void Vld3(DataType dt,
@@ -7142,7 +8649,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vld3(cond, dt, nreglist, operand);
   }
   void Vld3(DataType dt,
@@ -7160,7 +8671,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vld4(cond, dt, nreglist, operand);
   }
   void Vld4(DataType dt,
@@ -7179,7 +8694,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldm(cond, dt, rn, write_back, dreglist);
   }
   void Vldm(DataType dt,
@@ -7208,7 +8727,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldm(cond, dt, rn, write_back, sreglist);
   }
   void Vldm(DataType dt,
@@ -7237,7 +8760,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldmdb(cond, dt, rn, write_back, dreglist);
   }
   void Vldmdb(DataType dt,
@@ -7266,7 +8793,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldmdb(cond, dt, rn, write_back, sreglist);
   }
   void Vldmdb(DataType dt,
@@ -7295,7 +8826,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldmia(cond, dt, rn, write_back, dreglist);
   }
   void Vldmia(DataType dt,
@@ -7324,7 +8859,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldmia(cond, dt, rn, write_back, sreglist);
   }
   void Vldmia(DataType dt,
@@ -7353,7 +8892,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldr(cond, dt, rd, operand);
   }
   void Vldr(DataType dt, DRegister rd, const MemOperand& operand) {
@@ -7376,7 +8919,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vldr(cond, dt, rd, operand);
   }
   void Vldr(DataType dt, SRegister rd, const MemOperand& operand) {
@@ -7397,7 +8944,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmax(cond, dt, rd, rn, rm);
   }
   void Vmax(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7412,7 +8963,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmax(cond, dt, rd, rn, rm);
   }
   void Vmax(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -7457,7 +9012,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmin(cond, dt, rd, rn, rm);
   }
   void Vmin(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7472,7 +9031,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmin(cond, dt, rd, rn, rm);
   }
   void Vmin(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -7520,7 +9083,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmla(cond, dt, rd, rn, rm);
   }
   void Vmla(DataType dt, DRegister rd, DRegister rn, DRegisterLane rm) {
@@ -7538,7 +9105,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmla(cond, dt, rd, rn, rm);
   }
   void Vmla(DataType dt, QRegister rd, QRegister rn, DRegisterLane rm) {
@@ -7553,7 +9124,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmla(cond, dt, rd, rn, rm);
   }
   void Vmla(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7568,7 +9143,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmla(cond, dt, rd, rn, rm);
   }
   void Vmla(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -7583,7 +9162,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmla(cond, dt, rd, rn, rm);
   }
   void Vmla(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -7601,7 +9184,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmlal(cond, dt, rd, rn, rm);
   }
   void Vmlal(DataType dt, QRegister rd, DRegister rn, DRegisterLane rm) {
@@ -7616,7 +9203,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmlal(cond, dt, rd, rn, rm);
   }
   void Vmlal(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -7634,7 +9225,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmls(cond, dt, rd, rn, rm);
   }
   void Vmls(DataType dt, DRegister rd, DRegister rn, DRegisterLane rm) {
@@ -7652,7 +9247,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmls(cond, dt, rd, rn, rm);
   }
   void Vmls(DataType dt, QRegister rd, QRegister rn, DRegisterLane rm) {
@@ -7667,7 +9266,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmls(cond, dt, rd, rn, rm);
   }
   void Vmls(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -7682,7 +9285,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmls(cond, dt, rd, rn, rm);
   }
   void Vmls(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -7697,7 +9304,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmls(cond, dt, rd, rn, rm);
   }
   void Vmls(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -7715,7 +9326,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmlsl(cond, dt, rd, rn, rm);
   }
   void Vmlsl(DataType dt, QRegister rd, DRegister rn, DRegisterLane rm) {
@@ -7730,7 +9345,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmlsl(cond, dt, rd, rn, rm);
   }
   void Vmlsl(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -7743,7 +9362,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, rt, rn);
   }
   void Vmov(Register rt, SRegister rn) { Vmov(al, rt, rn); }
@@ -7754,7 +9377,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, rn, rt);
   }
   void Vmov(SRegister rn, Register rt) { Vmov(al, rn, rt); }
@@ -7766,7 +9393,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, rt, rt2, rm);
   }
   void Vmov(Register rt, Register rt2, DRegister rm) { Vmov(al, rt, rt2, rm); }
@@ -7778,7 +9409,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, rm, rt, rt2);
   }
   void Vmov(DRegister rm, Register rt, Register rt2) { Vmov(al, rm, rt, rt2); }
@@ -7792,7 +9427,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, rt, rt2, rm, rm1);
   }
   void Vmov(Register rt, Register rt2, SRegister rm, SRegister rm1) {
@@ -7808,7 +9447,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, rm, rm1, rt, rt2);
   }
   void Vmov(SRegister rm, SRegister rm1, Register rt, Register rt2) {
@@ -7821,7 +9464,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, dt, rd, rt);
   }
   void Vmov(DataType dt, DRegisterLane rd, Register rt) {
@@ -7843,7 +9490,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, dt, rd, operand);
   }
   void Vmov(DataType dt, DRegister rd, const DOperand& operand) {
@@ -7859,7 +9510,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, dt, rd, operand);
   }
   void Vmov(DataType dt, QRegister rd, const QOperand& operand) {
@@ -7875,7 +9530,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, dt, rd, operand);
   }
   void Vmov(DataType dt, SRegister rd, const SOperand& operand) {
@@ -7888,7 +9547,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmov(cond, dt, rt, rn);
   }
   void Vmov(DataType dt, Register rt, DRegisterLane rn) {
@@ -7907,7 +9570,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmovl(cond, dt, rd, rm);
   }
   void Vmovl(DataType dt, QRegister rd, DRegister rm) { Vmovl(al, dt, rd, rm); }
@@ -7918,7 +9585,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmovn(cond, dt, rd, rm);
   }
   void Vmovn(DataType dt, DRegister rd, QRegister rm) { Vmovn(al, dt, rd, rm); }
@@ -7930,7 +9601,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmrs(cond, rt, spec_reg);
   }
   void Vmrs(RegisterOrAPSR_nzcv rt, SpecialFPRegister spec_reg) {
@@ -7942,7 +9617,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmsr(cond, spec_reg, rt);
   }
   void Vmsr(SpecialFPRegister spec_reg, Register rt) { Vmsr(al, spec_reg, rt); }
@@ -7959,7 +9638,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmul(cond, dt, rd, rn, dm, index);
   }
   void Vmul(
@@ -7979,7 +9662,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmul(cond, dt, rd, rn, dm, index);
   }
   void Vmul(
@@ -7995,7 +9682,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmul(cond, dt, rd, rn, rm);
   }
   void Vmul(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8010,7 +9701,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmul(cond, dt, rd, rn, rm);
   }
   void Vmul(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -8025,7 +9720,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmul(cond, dt, rd, rn, rm);
   }
   void Vmul(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -8044,7 +9743,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmull(cond, dt, rd, rn, dm, index);
   }
   void Vmull(
@@ -8060,7 +9763,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmull(cond, dt, rd, rn, rm);
   }
   void Vmull(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -8076,7 +9783,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmvn(cond, dt, rd, operand);
   }
   void Vmvn(DataType dt, DRegister rd, const DOperand& operand) {
@@ -8092,7 +9803,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vmvn(cond, dt, rd, operand);
   }
   void Vmvn(DataType dt, QRegister rd, const QOperand& operand) {
@@ -8105,7 +9820,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vneg(cond, dt, rd, rm);
   }
   void Vneg(DataType dt, DRegister rd, DRegister rm) { Vneg(al, dt, rd, rm); }
@@ -8116,7 +9835,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vneg(cond, dt, rd, rm);
   }
   void Vneg(DataType dt, QRegister rd, QRegister rm) { Vneg(al, dt, rd, rm); }
@@ -8127,7 +9850,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vneg(cond, dt, rd, rm);
   }
   void Vneg(DataType dt, SRegister rd, SRegister rm) { Vneg(al, dt, rd, rm); }
@@ -8140,7 +9867,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vnmla(cond, dt, rd, rn, rm);
   }
   void Vnmla(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -8155,7 +9886,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vnmla(cond, dt, rd, rn, rm);
   }
   void Vnmla(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8170,7 +9905,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vnmls(cond, dt, rd, rn, rm);
   }
   void Vnmls(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -8185,7 +9924,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vnmls(cond, dt, rd, rn, rm);
   }
   void Vnmls(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8200,7 +9943,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vnmul(cond, dt, rd, rn, rm);
   }
   void Vnmul(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -8215,7 +9962,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vnmul(cond, dt, rd, rn, rm);
   }
   void Vnmul(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8233,7 +9984,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vorn(cond, dt, rd, rn, operand);
   }
   void Vorn(DataType dt, DRegister rd, DRegister rn, const DOperand& operand) {
@@ -8251,7 +10006,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vorn(cond, dt, rd, rn, operand);
   }
   void Vorn(DataType dt, QRegister rd, QRegister rn, const QOperand& operand) {
@@ -8269,7 +10028,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vorr(cond, dt, rd, rn, operand);
   }
   void Vorr(DataType dt, DRegister rd, DRegister rn, const DOperand& operand) {
@@ -8296,7 +10059,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vorr(cond, dt, rd, rn, operand);
   }
   void Vorr(DataType dt, QRegister rd, QRegister rn, const QOperand& operand) {
@@ -8318,7 +10085,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpadal(cond, dt, rd, rm);
   }
   void Vpadal(DataType dt, DRegister rd, DRegister rm) {
@@ -8331,7 +10102,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpadal(cond, dt, rd, rm);
   }
   void Vpadal(DataType dt, QRegister rd, QRegister rm) {
@@ -8346,7 +10121,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpadd(cond, dt, rd, rn, rm);
   }
   void Vpadd(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8359,7 +10138,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpaddl(cond, dt, rd, rm);
   }
   void Vpaddl(DataType dt, DRegister rd, DRegister rm) {
@@ -8372,7 +10155,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpaddl(cond, dt, rd, rm);
   }
   void Vpaddl(DataType dt, QRegister rd, QRegister rm) {
@@ -8387,7 +10174,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpmax(cond, dt, rd, rn, rm);
   }
   void Vpmax(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8402,7 +10193,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpmin(cond, dt, rd, rn, rm);
   }
   void Vpmin(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8414,7 +10209,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpop(cond, dt, dreglist);
   }
   void Vpop(DataType dt, DRegisterList dreglist) { Vpop(al, dt, dreglist); }
@@ -8428,7 +10227,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpop(cond, dt, sreglist);
   }
   void Vpop(DataType dt, SRegisterList sreglist) { Vpop(al, dt, sreglist); }
@@ -8442,7 +10245,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpush(cond, dt, dreglist);
   }
   void Vpush(DataType dt, DRegisterList dreglist) { Vpush(al, dt, dreglist); }
@@ -8458,7 +10265,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vpush(cond, dt, sreglist);
   }
   void Vpush(DataType dt, SRegisterList sreglist) { Vpush(al, dt, sreglist); }
@@ -8475,7 +10286,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqabs(cond, dt, rd, rm);
   }
   void Vqabs(DataType dt, DRegister rd, DRegister rm) { Vqabs(al, dt, rd, rm); }
@@ -8486,7 +10301,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqabs(cond, dt, rd, rm);
   }
   void Vqabs(DataType dt, QRegister rd, QRegister rm) { Vqabs(al, dt, rd, rm); }
@@ -8499,7 +10318,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqadd(cond, dt, rd, rn, rm);
   }
   void Vqadd(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8514,7 +10337,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqadd(cond, dt, rd, rn, rm);
   }
   void Vqadd(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -8529,7 +10356,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmlal(cond, dt, rd, rn, rm);
   }
   void Vqdmlal(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -8548,7 +10379,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmlal(cond, dt, rd, rn, dm, index);
   }
   void Vqdmlal(
@@ -8564,7 +10399,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmlsl(cond, dt, rd, rn, rm);
   }
   void Vqdmlsl(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -8583,7 +10422,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmlsl(cond, dt, rd, rn, dm, index);
   }
   void Vqdmlsl(
@@ -8599,7 +10442,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmulh(cond, dt, rd, rn, rm);
   }
   void Vqdmulh(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8614,7 +10461,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmulh(cond, dt, rd, rn, rm);
   }
   void Vqdmulh(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -8632,7 +10483,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmulh(cond, dt, rd, rn, rm);
   }
   void Vqdmulh(DataType dt, DRegister rd, DRegister rn, DRegisterLane rm) {
@@ -8650,7 +10505,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmulh(cond, dt, rd, rn, rm);
   }
   void Vqdmulh(DataType dt, QRegister rd, QRegister rn, DRegisterLane rm) {
@@ -8665,7 +10524,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmull(cond, dt, rd, rn, rm);
   }
   void Vqdmull(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -8683,7 +10546,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqdmull(cond, dt, rd, rn, rm);
   }
   void Vqdmull(DataType dt, QRegister rd, DRegister rn, DRegisterLane rm) {
@@ -8696,7 +10563,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqmovn(cond, dt, rd, rm);
   }
   void Vqmovn(DataType dt, DRegister rd, QRegister rm) {
@@ -8709,7 +10580,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqmovun(cond, dt, rd, rm);
   }
   void Vqmovun(DataType dt, DRegister rd, QRegister rm) {
@@ -8722,7 +10597,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqneg(cond, dt, rd, rm);
   }
   void Vqneg(DataType dt, DRegister rd, DRegister rm) { Vqneg(al, dt, rd, rm); }
@@ -8733,7 +10612,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqneg(cond, dt, rd, rm);
   }
   void Vqneg(DataType dt, QRegister rd, QRegister rm) { Vqneg(al, dt, rd, rm); }
@@ -8746,7 +10629,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrdmulh(cond, dt, rd, rn, rm);
   }
   void Vqrdmulh(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -8761,7 +10648,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrdmulh(cond, dt, rd, rn, rm);
   }
   void Vqrdmulh(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -8779,7 +10670,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrdmulh(cond, dt, rd, rn, rm);
   }
   void Vqrdmulh(DataType dt, DRegister rd, DRegister rn, DRegisterLane rm) {
@@ -8797,7 +10692,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrdmulh(cond, dt, rd, rn, rm);
   }
   void Vqrdmulh(DataType dt, QRegister rd, QRegister rn, DRegisterLane rm) {
@@ -8812,7 +10711,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrshl(cond, dt, rd, rm, rn);
   }
   void Vqrshl(DataType dt, DRegister rd, DRegister rm, DRegister rn) {
@@ -8827,7 +10730,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrshl(cond, dt, rd, rm, rn);
   }
   void Vqrshl(DataType dt, QRegister rd, QRegister rm, QRegister rn) {
@@ -8845,7 +10752,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrshrn(cond, dt, rd, rm, operand);
   }
   void Vqrshrn(DataType dt,
@@ -8866,7 +10777,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqrshrun(cond, dt, rd, rm, operand);
   }
   void Vqrshrun(DataType dt,
@@ -8887,7 +10802,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqshl(cond, dt, rd, rm, operand);
   }
   void Vqshl(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -8905,7 +10824,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqshl(cond, dt, rd, rm, operand);
   }
   void Vqshl(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -8923,7 +10846,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqshlu(cond, dt, rd, rm, operand);
   }
   void Vqshlu(DataType dt,
@@ -8944,7 +10871,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqshlu(cond, dt, rd, rm, operand);
   }
   void Vqshlu(DataType dt,
@@ -8965,7 +10896,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqshrn(cond, dt, rd, rm, operand);
   }
   void Vqshrn(DataType dt,
@@ -8986,7 +10921,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqshrun(cond, dt, rd, rm, operand);
   }
   void Vqshrun(DataType dt,
@@ -9004,7 +10943,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqsub(cond, dt, rd, rn, rm);
   }
   void Vqsub(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -9019,7 +10962,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vqsub(cond, dt, rd, rn, rm);
   }
   void Vqsub(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -9034,7 +10981,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vraddhn(cond, dt, rd, rn, rm);
   }
   void Vraddhn(DataType dt, DRegister rd, QRegister rn, QRegister rm) {
@@ -9047,7 +10998,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrecpe(cond, dt, rd, rm);
   }
   void Vrecpe(DataType dt, DRegister rd, DRegister rm) {
@@ -9060,7 +11015,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrecpe(cond, dt, rd, rm);
   }
   void Vrecpe(DataType dt, QRegister rd, QRegister rm) {
@@ -9075,7 +11034,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrecps(cond, dt, rd, rn, rm);
   }
   void Vrecps(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -9090,7 +11053,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrecps(cond, dt, rd, rn, rm);
   }
   void Vrecps(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -9103,7 +11070,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrev16(cond, dt, rd, rm);
   }
   void Vrev16(DataType dt, DRegister rd, DRegister rm) {
@@ -9116,7 +11087,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrev16(cond, dt, rd, rm);
   }
   void Vrev16(DataType dt, QRegister rd, QRegister rm) {
@@ -9129,7 +11104,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrev32(cond, dt, rd, rm);
   }
   void Vrev32(DataType dt, DRegister rd, DRegister rm) {
@@ -9142,7 +11121,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrev32(cond, dt, rd, rm);
   }
   void Vrev32(DataType dt, QRegister rd, QRegister rm) {
@@ -9155,7 +11138,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrev64(cond, dt, rd, rm);
   }
   void Vrev64(DataType dt, DRegister rd, DRegister rm) {
@@ -9168,7 +11155,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrev64(cond, dt, rd, rm);
   }
   void Vrev64(DataType dt, QRegister rd, QRegister rm) {
@@ -9183,7 +11174,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrhadd(cond, dt, rd, rn, rm);
   }
   void Vrhadd(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -9198,7 +11193,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrhadd(cond, dt, rd, rn, rm);
   }
   void Vrhadd(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -9319,7 +11318,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrintr(cond, dt, rd, rm);
   }
   void Vrintr(DataType dt, SRegister rd, SRegister rm) {
@@ -9332,7 +11335,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrintr(cond, dt, rd, rm);
   }
   void Vrintr(DataType dt, DRegister rd, DRegister rm) {
@@ -9345,7 +11352,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrintx(cond, dt, rd, rm);
   }
   void Vrintx(DataType dt, DRegister rd, DRegister rm) {
@@ -9367,7 +11378,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrintx(cond, dt, rd, rm);
   }
   void Vrintx(DataType dt, SRegister rd, SRegister rm) {
@@ -9380,7 +11395,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrintz(cond, dt, rd, rm);
   }
   void Vrintz(DataType dt, DRegister rd, DRegister rm) {
@@ -9402,7 +11421,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrintz(cond, dt, rd, rm);
   }
   void Vrintz(DataType dt, SRegister rd, SRegister rm) {
@@ -9417,7 +11440,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrshl(cond, dt, rd, rm, rn);
   }
   void Vrshl(DataType dt, DRegister rd, DRegister rm, DRegister rn) {
@@ -9432,7 +11459,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrshl(cond, dt, rd, rm, rn);
   }
   void Vrshl(DataType dt, QRegister rd, QRegister rm, QRegister rn) {
@@ -9450,7 +11481,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrshr(cond, dt, rd, rm, operand);
   }
   void Vrshr(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9468,7 +11503,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrshr(cond, dt, rd, rm, operand);
   }
   void Vrshr(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9486,7 +11525,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrshrn(cond, dt, rd, rm, operand);
   }
   void Vrshrn(DataType dt,
@@ -9502,7 +11545,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsqrte(cond, dt, rd, rm);
   }
   void Vrsqrte(DataType dt, DRegister rd, DRegister rm) {
@@ -9515,7 +11562,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsqrte(cond, dt, rd, rm);
   }
   void Vrsqrte(DataType dt, QRegister rd, QRegister rm) {
@@ -9530,7 +11581,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsqrts(cond, dt, rd, rn, rm);
   }
   void Vrsqrts(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -9545,7 +11600,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsqrts(cond, dt, rd, rn, rm);
   }
   void Vrsqrts(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -9563,7 +11622,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsra(cond, dt, rd, rm, operand);
   }
   void Vrsra(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9581,7 +11644,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsra(cond, dt, rd, rm, operand);
   }
   void Vrsra(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9596,7 +11663,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vrsubhn(cond, dt, rd, rn, rm);
   }
   void Vrsubhn(DataType dt, DRegister rd, QRegister rn, QRegister rm) {
@@ -9694,7 +11765,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vshl(cond, dt, rd, rm, operand);
   }
   void Vshl(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9712,7 +11787,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vshl(cond, dt, rd, rm, operand);
   }
   void Vshl(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9730,7 +11809,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vshll(cond, dt, rd, rm, operand);
   }
   void Vshll(DataType dt, QRegister rd, DRegister rm, const DOperand& operand) {
@@ -9748,7 +11831,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vshr(cond, dt, rd, rm, operand);
   }
   void Vshr(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9766,7 +11853,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vshr(cond, dt, rd, rm, operand);
   }
   void Vshr(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9784,7 +11875,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vshrn(cond, dt, rd, rm, operand);
   }
   void Vshrn(DataType dt, DRegister rd, QRegister rm, const QOperand& operand) {
@@ -9802,7 +11897,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsli(cond, dt, rd, rm, operand);
   }
   void Vsli(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9820,7 +11919,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsli(cond, dt, rd, rm, operand);
   }
   void Vsli(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9833,7 +11936,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsqrt(cond, dt, rd, rm);
   }
   void Vsqrt(DataType dt, SRegister rd, SRegister rm) { Vsqrt(al, dt, rd, rm); }
@@ -9844,7 +11951,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsqrt(cond, dt, rd, rm);
   }
   void Vsqrt(DataType dt, DRegister rd, DRegister rm) { Vsqrt(al, dt, rd, rm); }
@@ -9860,7 +11971,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsra(cond, dt, rd, rm, operand);
   }
   void Vsra(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9878,7 +11993,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsra(cond, dt, rd, rm, operand);
   }
   void Vsra(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9896,7 +12015,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsri(cond, dt, rd, rm, operand);
   }
   void Vsri(DataType dt, DRegister rd, DRegister rm, const DOperand& operand) {
@@ -9914,7 +12037,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsri(cond, dt, rd, rm, operand);
   }
   void Vsri(DataType dt, QRegister rd, QRegister rm, const QOperand& operand) {
@@ -9930,7 +12057,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vst1(cond, dt, nreglist, operand);
   }
   void Vst1(DataType dt,
@@ -9948,7 +12079,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vst2(cond, dt, nreglist, operand);
   }
   void Vst2(DataType dt,
@@ -9966,7 +12101,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vst3(cond, dt, nreglist, operand);
   }
   void Vst3(DataType dt,
@@ -9984,7 +12123,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vst3(cond, dt, nreglist, operand);
   }
   void Vst3(DataType dt,
@@ -10002,7 +12145,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vst4(cond, dt, nreglist, operand);
   }
   void Vst4(DataType dt,
@@ -10021,7 +12168,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstm(cond, dt, rn, write_back, dreglist);
   }
   void Vstm(DataType dt,
@@ -10050,7 +12201,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstm(cond, dt, rn, write_back, sreglist);
   }
   void Vstm(DataType dt,
@@ -10079,7 +12234,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstmdb(cond, dt, rn, write_back, dreglist);
   }
   void Vstmdb(DataType dt,
@@ -10108,7 +12267,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstmdb(cond, dt, rn, write_back, sreglist);
   }
   void Vstmdb(DataType dt,
@@ -10137,7 +12300,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstmia(cond, dt, rn, write_back, dreglist);
   }
   void Vstmia(DataType dt,
@@ -10166,7 +12333,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstmia(cond, dt, rn, write_back, sreglist);
   }
   void Vstmia(DataType dt,
@@ -10194,7 +12365,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstr(cond, dt, rd, operand);
   }
   void Vstr(DataType dt, DRegister rd, const MemOperand& operand) {
@@ -10216,7 +12391,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vstr(cond, dt, rd, operand);
   }
   void Vstr(DataType dt, SRegister rd, const MemOperand& operand) {
@@ -10237,7 +12416,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsub(cond, dt, rd, rn, rm);
   }
   void Vsub(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -10252,7 +12435,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsub(cond, dt, rd, rn, rm);
   }
   void Vsub(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -10267,7 +12454,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsub(cond, dt, rd, rn, rm);
   }
   void Vsub(DataType dt, SRegister rd, SRegister rn, SRegister rm) {
@@ -10282,7 +12473,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsubhn(cond, dt, rd, rn, rm);
   }
   void Vsubhn(DataType dt, DRegister rd, QRegister rn, QRegister rm) {
@@ -10297,7 +12492,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsubl(cond, dt, rd, rn, rm);
   }
   void Vsubl(DataType dt, QRegister rd, DRegister rn, DRegister rm) {
@@ -10312,7 +12511,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vsubw(cond, dt, rd, rn, rm);
   }
   void Vsubw(DataType dt, QRegister rd, QRegister rn, DRegister rm) {
@@ -10325,7 +12528,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vswp(cond, dt, rd, rm);
   }
   void Vswp(DataType dt, DRegister rd, DRegister rm) { Vswp(al, dt, rd, rm); }
@@ -10342,7 +12549,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vswp(cond, dt, rd, rm);
   }
   void Vswp(DataType dt, QRegister rd, QRegister rm) { Vswp(al, dt, rd, rm); }
@@ -10364,7 +12575,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vtbl(cond, dt, rd, nreglist, rm);
   }
   void Vtbl(DataType dt,
@@ -10385,7 +12600,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vtbx(cond, dt, rd, nreglist, rm);
   }
   void Vtbx(DataType dt,
@@ -10401,7 +12620,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vtrn(cond, dt, rd, rm);
   }
   void Vtrn(DataType dt, DRegister rd, DRegister rm) { Vtrn(al, dt, rd, rm); }
@@ -10412,7 +12635,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vtrn(cond, dt, rd, rm);
   }
   void Vtrn(DataType dt, QRegister rd, QRegister rm) { Vtrn(al, dt, rd, rm); }
@@ -10425,7 +12652,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vtst(cond, dt, rd, rn, rm);
   }
   void Vtst(DataType dt, DRegister rd, DRegister rn, DRegister rm) {
@@ -10440,7 +12671,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vtst(cond, dt, rd, rn, rm);
   }
   void Vtst(DataType dt, QRegister rd, QRegister rn, QRegister rm) {
@@ -10453,7 +12688,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vuzp(cond, dt, rd, rm);
   }
   void Vuzp(DataType dt, DRegister rd, DRegister rm) { Vuzp(al, dt, rd, rm); }
@@ -10464,7 +12703,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vuzp(cond, dt, rd, rm);
   }
   void Vuzp(DataType dt, QRegister rd, QRegister rm) { Vuzp(al, dt, rd, rm); }
@@ -10475,7 +12718,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vzip(cond, dt, rd, rm);
   }
   void Vzip(DataType dt, DRegister rd, DRegister rm) { Vzip(al, dt, rd, rm); }
@@ -10486,7 +12733,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     vzip(cond, dt, rd, rm);
   }
   void Vzip(DataType dt, QRegister rd, QRegister rm) { Vzip(al, dt, rd, rm); }
@@ -10495,7 +12746,11 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(OutsideITBlock());
     MacroEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ITScope it_scope(this, &cond, guard);
+#else
+    ITScope it_scope(allocator_, this, &cond, guard);
+#endif
     yield(cond);
   }
   void Yield() { Yield(al); }
@@ -11080,7 +13335,9 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
   bool generate_simulator_code_;
   bool allow_macro_instructions_;
   Label* pool_end_;
-
+#ifdef PANDA_BUILD
+  panda::ArenaAllocator* allocator_;
+#endif
   friend class TestMacroAssembler;
 };
 
diff --git a/src/aarch64/assembler-aarch64.h b/src/aarch64/assembler-aarch64.h
index 65c55cc4..c8135974 100644
--- a/src/aarch64/assembler-aarch64.h
+++ b/src/aarch64/assembler-aarch64.h
@@ -43,10 +43,19 @@ class LabelTestHelper;  // Forward declaration.
 
 class Label {
  public:
+#ifndef PANDA_BUILD
   Label() : location_(kLocationUnbound) {}
-  ~Label() {
+#else
+  Label() = delete;
+  Label(panda::ArenaAllocator* allocator) : links_(allocator), location_(kLocationUnbound) {}
+#endif
+  virtual ~Label() {
     // All links to a label must have been resolved before it is destructed.
+#ifndef PANDA_BUILD
     VIXL_ASSERT(!IsLinked());
+#else
+    // Codegen may create unlinked labels
+#endif
   }
 
   bool IsBound() const { return location_ >= 0; }
@@ -74,7 +83,12 @@ class Label {
  private:
   class LinksSet : public LinksSetBase {
    public:
+#ifndef PANDA_BUILD
     LinksSet() : LinksSetBase() {}
+#else
+    LinksSet() = delete;
+    LinksSet(panda::ArenaAllocator* allocator) : LinksSetBase(allocator) {}
+#endif
   };
 
   // Allows iterating over the links of a label. The behaviour is undefined if
@@ -91,7 +105,11 @@ class Label {
 
   void Bind(ptrdiff_t location) {
     // Labels can only be bound once.
+#ifndef PANDA_BUILD
     VIXL_ASSERT(!IsBound());
+#else
+    // Disabled for unit-tests (it bind non-bound locs)
+#endif
     location_ = location;
   }
 
@@ -157,7 +175,6 @@ class Label {
   friend class VeneerPool;
 };
 
-
 class Assembler;
 class LiteralPool;
 
@@ -406,12 +423,19 @@ class Assembler : public vixl::internal::AssemblerBase {
   explicit Assembler(
       PositionIndependentCodeOption pic = PositionIndependentCode)
       : pic_(pic), cpu_features_(CPUFeatures::AArch64LegacyBaseline()) {}
+
+#ifdef PANDA_BUILD
+  explicit Assembler(
+      size_t capacity,
+      PositionIndependentCodeOption pic = PositionIndependentCode) = delete;
+#else
   explicit Assembler(
       size_t capacity,
       PositionIndependentCodeOption pic = PositionIndependentCode)
       : AssemblerBase(capacity),
         pic_(pic),
         cpu_features_(CPUFeatures::AArch64LegacyBaseline()) {}
+#endif
   Assembler(byte* buffer,
             size_t capacity,
             PositionIndependentCodeOption pic = PositionIndependentCode)
diff --git a/src/aarch64/decoder-aarch64.cc b/src/aarch64/decoder-aarch64.cc
index 0abea632..cec55f96 100644
--- a/src/aarch64/decoder-aarch64.cc
+++ b/src/aarch64/decoder-aarch64.cc
@@ -36,7 +36,12 @@ namespace vixl {
 namespace aarch64 {
 
 void Decoder::Decode(const Instruction* instr) {
-  std::list<DecoderVisitor*>::iterator it;
+#ifndef PANDA_BUILD
+    std::list<DecoderVisitor*>::iterator it;
+#else
+    panda::ArenaList<DecoderVisitor*>::iterator it;
+#endif
+
   for (it = visitors_.begin(); it != visitors_.end(); it++) {
     VIXL_ASSERT((*it)->IsConstVisitor());
   }
@@ -87,7 +92,11 @@ void Decoder::PrependVisitor(DecoderVisitor* new_visitor) {
 
 void Decoder::InsertVisitorBefore(DecoderVisitor* new_visitor,
                                   DecoderVisitor* registered_visitor) {
+#ifndef PANDA_BUILD
   std::list<DecoderVisitor*>::iterator it;
+#else
+  panda::ArenaList<DecoderVisitor*>::iterator it;
+#endif
   for (it = visitors_.begin(); it != visitors_.end(); it++) {
     if (*it == registered_visitor) {
       visitors_.insert(it, new_visitor);
@@ -103,7 +112,11 @@ void Decoder::InsertVisitorBefore(DecoderVisitor* new_visitor,
 
 void Decoder::InsertVisitorAfter(DecoderVisitor* new_visitor,
                                  DecoderVisitor* registered_visitor) {
+#ifndef PANDA_BUILD
   std::list<DecoderVisitor*>::iterator it;
+#else
+  panda::ArenaList<DecoderVisitor*>::iterator it;
+#endif
   for (it = visitors_.begin(); it != visitors_.end(); it++) {
     if (*it == registered_visitor) {
       it++;
@@ -122,6 +135,7 @@ void Decoder::RemoveVisitor(DecoderVisitor* visitor) {
   visitors_.remove(visitor);
 }
 
+#ifndef PANDA_BUILD
 #define DEFINE_VISITOR_CALLERS(A)                               \
   void Decoder::Visit_##A(const Instruction* instr) {           \
     std::list<DecoderVisitor*>::iterator it;                    \
@@ -130,6 +144,17 @@ void Decoder::RemoveVisitor(DecoderVisitor* visitor) {
       (*it)->Visit(&m, instr);                                  \
     }                                                           \
   }
+#else
+#define DEFINE_VISITOR_CALLERS(A)                               \
+  void Decoder::Visit_##A(const Instruction* instr) {           \
+    panda::ArenaList<DecoderVisitor*>::iterator it;             \
+    Metadata m = {{"form", #A}};                                \
+    for (it = visitors_.begin(); it != visitors_.end(); it++) { \
+      (*it)->Visit(&m, instr);                                  \
+    }                                                           \
+  }
+#endif
+
 INSTRUCTION_VISITOR_LIST(DEFINE_VISITOR_CALLERS)
 #undef DEFINE_VISITOR_CALLERS
 
diff --git a/src/aarch64/decoder-aarch64.h b/src/aarch64/decoder-aarch64.h
index af849ac8..5f33e4e6 100644
--- a/src/aarch64/decoder-aarch64.h
+++ b/src/aarch64/decoder-aarch64.h
@@ -2947,7 +2947,29 @@ class CompiledDecodeNode;
 // handles the instruction.
 class Decoder {
  public:
+#ifndef PANDA_BUILD
   Decoder() { ConstructDecodeGraph(); }
+#else
+  Decoder(panda::ArenaAllocator* allocator) :
+      allocator_(allocator),
+      visitors_(allocator->Adapter()),
+      decode_nodes_(allocator->Adapter()) {
+    ConstructDecodeGraph();
+  }
+#endif
+
+  Decoder(const Decoder&) = delete;
+  Decoder(Decoder&&) = delete;
+  Decoder& operator=(const Decoder&) = delete;
+  Decoder& operator=(Decoder&&) = delete;
+
+  ~Decoder() = default;
+
+#ifdef PANDA_BUILD
+  auto GetAllocator() {
+    return allocator_;
+  }
+#endif
 
   // Top-level wrappers around the actual decoding function.
   void Decode(const Instruction* instr);
@@ -3000,11 +3022,30 @@ class Decoder {
   // of visitors stored by the decoder.
   void RemoveVisitor(DecoderVisitor* visitor);
 
+  class ScopedVisitors {
+   public:
+    ScopedVisitors(Decoder& decoder, std::initializer_list<DecoderVisitor*> visitors)
+      : decoder_ {decoder} {
+        decoder_.visitors_.assign(visitors);
+    }
+
+    ~ScopedVisitors() {
+      decoder_.visitors_.clear();
+    }
+
+   private:
+    Decoder& decoder_;
+  };
+
 #define DECLARE(A) void Visit_##A(const Instruction* instr);
   INSTRUCTION_VISITOR_LIST(DECLARE)
 #undef DECLARE
 
+#ifndef PANDA_BUILD
   std::list<DecoderVisitor*>* visitors() { return &visitors_; }
+#else
+  panda::ArenaList<DecoderVisitor*>* visitors() { return &visitors_; }
+#endif
 
   // Get a DecodeNode by name from the Decoder's map.
   DecodeNode* GetDecodeNode(std::string name);
@@ -3017,8 +3058,17 @@ class Decoder {
   // Add an initialised DecodeNode to the decode_node_ map.
   void AddDecodeNode(const DecodeNode& node);
 
+#ifndef PANDA_BUILD
   // Visitors are registered in a list.
   std::list<DecoderVisitor*> visitors_;
+  // Map of node names to DecodeNodes.
+  std::map<std::string, DecodeNode> decode_nodes_;
+#else
+  panda::ArenaAllocator* allocator_ {nullptr};
+  panda::ArenaList<DecoderVisitor*> visitors_;
+  // Map of node names to DecodeNodes.
+  panda::ArenaMap<std::string, DecodeNode> decode_nodes_;
+#endif
 
   // Compile the dynamically generated decode graph based on the static
   // information in kDecodeMapping and kVisitorNodes.
@@ -3027,9 +3077,6 @@ class Decoder {
   // Root node for the compiled decoder graph, stored here to avoid a map lookup
   // for every instruction decoded.
   CompiledDecodeNode* compiled_decoder_root_;
-
-  // Map of node names to DecodeNodes.
-  std::map<std::string, DecodeNode> decode_nodes_;
 };
 
 const int kMaxDecodeSampledBits = 24;
@@ -3072,12 +3119,20 @@ class CompiledDecodeNode {
  public:
   // Constructor for decode node, containing a decode table and pointer to a
   // function that extracts the bits to be sampled.
+#ifndef PANDA_BUILD
   CompiledDecodeNode(BitExtractFn bit_extract_fn, size_t decode_table_size)
+#else
+  CompiledDecodeNode(BitExtractFn bit_extract_fn, size_t decode_table_size, panda::ArenaAllocator* allocator)
+#endif
       : bit_extract_fn_(bit_extract_fn),
         visitor_fn_(NULL),
         decode_table_size_(decode_table_size),
         decoder_(NULL) {
+#ifndef PANDA_BUILD
     decode_table_ = new CompiledDecodeNode*[decode_table_size_];
+#else
+    decode_table_ = allocator->New<CompiledDecodeNode*[]>(decode_table_size_);
+#endif
     memset(decode_table_, 0, decode_table_size_ * sizeof(decode_table_[0]));
   }
 
@@ -3094,7 +3149,9 @@ class CompiledDecodeNode {
     // Free the decode table, if this is a compiled, non-leaf node.
     if (decode_table_ != NULL) {
       VIXL_ASSERT(!IsLeafNode());
+#ifndef PANDA_BUILD
       delete[] decode_table_;
+#endif
     }
   }
 
@@ -3157,7 +3214,7 @@ class DecodeNode {
         compiled_node_(NULL) {}
 
   // Constructor for DecodeNodes that map bit patterns to other DecodeNodes.
-  explicit DecodeNode(const DecodeMapping& map, Decoder* decoder = NULL)
+  explicit DecodeNode(const DecodeMapping& map, Decoder* decoder)
       : name_(map.name),
         visitor_fn_(NULL),
         decoder_(decoder),
@@ -3173,10 +3230,12 @@ class DecodeNode {
   }
 
   ~DecodeNode() {
+#ifndef PANDA_BUILD
     // Delete the compiled version of this node, if one was created.
     if (compiled_node_ != NULL) {
       delete compiled_node_;
     }
+#endif
   }
 
   // Set the bits sampled from the instruction by this node.
@@ -3202,13 +3261,23 @@ class DecodeNode {
   void CreateCompiledNode(BitExtractFn bit_extract_fn, size_t table_size) {
     VIXL_ASSERT(bit_extract_fn != NULL);
     VIXL_ASSERT(table_size > 0);
+#ifndef PANDA_BUILD
     compiled_node_ = new CompiledDecodeNode(bit_extract_fn, table_size);
+#else
+    auto allocator{decoder_->GetAllocator()};
+    compiled_node_ = allocator->New<CompiledDecodeNode>(bit_extract_fn, table_size, allocator);
+#endif
   }
 
   // Create a CompiledDecodeNode wrapping a visitor function. No decoding is
   // required for this node; the visitor function is called instead.
   void CreateVisitorNode() {
+#ifndef PANDA_BUILD
     compiled_node_ = new CompiledDecodeNode(visitor_fn_, decoder_);
+#else
+    auto allocator{decoder_->GetAllocator()};
+    compiled_node_ = allocator->New<CompiledDecodeNode>(visitor_fn_, decoder_);
+#endif
   }
 
   // Find and compile the DecodeNode named "name", and set it as the node for
diff --git a/src/aarch64/disasm-aarch64.cc b/src/aarch64/disasm-aarch64.cc
index 15165b97..67b9a756 100644
--- a/src/aarch64/disasm-aarch64.cc
+++ b/src/aarch64/disasm-aarch64.cc
@@ -647,11 +647,19 @@ const Disassembler::FormToVisitorFnMap *Disassembler::GetFormToVisitorFnMap() {
   return &form_to_visitor;
 }  // NOLINT(readability/fn_size)
 
+#ifndef PANDA_BUILD
 Disassembler::Disassembler() {
-  buffer_size_ = 256;
+#else
+Disassembler::Disassembler(panda::ArenaAllocator* allocator) {
+#endif
+  buffer_size_ = static_cast<uint32_t>(kDefaultBufferSize);
+#ifndef PANDA_BUILD
   buffer_ = reinterpret_cast<char *>(malloc(buffer_size_));
-  buffer_pos_ = 0;
   own_buffer_ = true;
+#else
+  buffer_ = reinterpret_cast<char *>(allocator->Alloc(buffer_size_));
+#endif
+  buffer_pos_ = 0;
   code_address_offset_ = 0;
 }
 
@@ -659,14 +667,18 @@ Disassembler::Disassembler(char *text_buffer, int buffer_size) {
   buffer_size_ = buffer_size;
   buffer_ = text_buffer;
   buffer_pos_ = 0;
+#ifndef PANDA_BUILD
   own_buffer_ = false;
+#endif
   code_address_offset_ = 0;
 }
 
 Disassembler::~Disassembler() {
+#ifndef PANDA_BUILD
   if (own_buffer_) {
     free(buffer_);
   }
+#endif
 }
 
 char *Disassembler::GetOutput() { return buffer_; }
@@ -10594,7 +10606,11 @@ void Disassembler::AppendToOutput(const char *format, ...) {
 
 
 void PrintDisassembler::Disassemble(const Instruction *instr) {
+#ifndef PANDA_BUILD
   Decoder decoder;
+#else
+  Decoder decoder(allocator_);
+#endif
   if (cpu_features_auditor_ != NULL) {
     decoder.AppendVisitor(cpu_features_auditor_);
   }
@@ -10604,7 +10620,12 @@ void PrintDisassembler::Disassemble(const Instruction *instr) {
 
 void PrintDisassembler::DisassembleBuffer(const Instruction *start,
                                           const Instruction *end) {
+#ifndef PANDA_BUILD
   Decoder decoder;
+#else
+  Decoder decoder(allocator_);
+#endif
+
   if (cpu_features_auditor_ != NULL) {
     decoder.AppendVisitor(cpu_features_auditor_);
   }
diff --git a/src/aarch64/disasm-aarch64.h b/src/aarch64/disasm-aarch64.h
index 3c3d7449..008adfc2 100644
--- a/src/aarch64/disasm-aarch64.h
+++ b/src/aarch64/disasm-aarch64.h
@@ -45,11 +45,18 @@ namespace aarch64 {
 
 class Disassembler : public DecoderVisitor {
  public:
+#ifndef PANDA_BUILD
   Disassembler();
+#else
+  Disassembler() = delete;
+  Disassembler(panda::ArenaAllocator* allocator);
+#endif
   Disassembler(char* text_buffer, int buffer_size);
   virtual ~Disassembler();
   char* GetOutput();
 
+  static constexpr size_t GetDefaultBufferSize() { return kDefaultBufferSize; }
+
   // Declare all Visitor functions.
   virtual void Visit(Metadata* metadata,
                      const Instruction* instr) VIXL_OVERRIDE;
@@ -113,6 +120,8 @@ class Disassembler : public DecoderVisitor {
   int64_t CodeRelativeAddress(const void* instr);
 
  private:
+  static constexpr size_t kDefaultBufferSize {256U};
+
 #define DECLARE(A) virtual void Visit##A(const Instruction* instr);
   VISITOR_LIST(DECLARE)
 #undef DECLARE
@@ -287,7 +296,9 @@ class Disassembler : public DecoderVisitor {
   char* buffer_;
   uint32_t buffer_pos_;
   uint32_t buffer_size_;
+#ifndef PANDA_BUILD
   bool own_buffer_;
+#endif
 
   int64_t code_address_offset_;
 };
@@ -295,13 +306,20 @@ class Disassembler : public DecoderVisitor {
 
 class PrintDisassembler : public Disassembler {
  public:
+#ifndef PANDA_BUILD
   explicit PrintDisassembler(FILE* stream)
       : cpu_features_auditor_(NULL),
+#else
+  explicit PrintDisassembler(FILE* stream) = delete;
+  explicit PrintDisassembler(panda::ArenaAllocator* allocator, FILE* stream)
+      : Disassembler(allocator), cpu_features_auditor_(NULL), allocator_(allocator),
+#endif
         cpu_features_prefix_("// Needs: "),
         cpu_features_suffix_(""),
         signed_addresses_(false),
         stream_(stream) {}
 
+
   // Convenience helpers for quick disassembly, without having to manually
   // create a decoder.
   void DisassembleBuffer(const Instruction* start, uint64_t size);
@@ -342,6 +360,9 @@ class PrintDisassembler : public Disassembler {
   virtual void ProcessOutput(const Instruction* instr) VIXL_OVERRIDE;
 
   CPUFeaturesAuditor* cpu_features_auditor_;
+#ifdef PANDA_BUILD
+  panda::ArenaAllocator* allocator_;
+#endif
   const char* cpu_features_prefix_;
   const char* cpu_features_suffix_;
   bool signed_addresses_;
diff --git a/src/aarch64/macro-assembler-aarch64.cc b/src/aarch64/macro-assembler-aarch64.cc
index e18f846a..687fd0b7 100644
--- a/src/aarch64/macro-assembler-aarch64.cc
+++ b/src/aarch64/macro-assembler-aarch64.cc
@@ -46,32 +46,46 @@ void Pool::SetNextCheckpoint(ptrdiff_t checkpoint) {
 }
 
 
+#ifndef PANDA_BUILD
 LiteralPool::LiteralPool(MacroAssembler* masm)
     : Pool(masm),
       size_(0),
       first_use_(-1),
       recommended_checkpoint_(kNoCheckpointRequired) {}
-
+#else
+LiteralPool::LiteralPool(panda::ArenaAllocator* allocator, MacroAssembler* masm)
+    : Pool(masm),
+      entries_(allocator->Adapter()),
+      size_(0),
+      first_use_(-1),
+      recommended_checkpoint_(kNoCheckpointRequired),
+      deleted_on_destruction_(allocator->Adapter()),
+      allocator_(allocator) {}
+#endif
 
 LiteralPool::~LiteralPool() VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION {
-  VIXL_ASSERT(IsEmpty());
   VIXL_ASSERT(!IsBlocked());
+#ifndef PANDA_BUILD
+  VIXL_ASSERT(IsEmpty());
   for (std::vector<RawLiteral*>::iterator it = deleted_on_destruction_.begin();
        it != deleted_on_destruction_.end();
        it++) {
     delete *it;
   }
+#endif
 }
 
 
 void LiteralPool::Reset() {
-  std::vector<RawLiteral*>::iterator it, end;
+#ifndef PANDA_BUILD
+  std::vector<RawLiteral *>::iterator it, end;
   for (it = entries_.begin(), end = entries_.end(); it != end; ++it) {
     RawLiteral* literal = *it;
     if (literal->deletion_policy_ == RawLiteral::kDeletedOnPlacementByPool) {
       delete literal;
     }
   }
+#endif
   entries_.clear();
   size_ = 0;
   first_use_ = -1;
@@ -120,7 +134,11 @@ void LiteralPool::Emit(EmitOption option) {
   size_t pool_size = GetSize();
   size_t emit_size = pool_size;
   if (option == kBranchRequired) emit_size += kInstructionSize;
+#ifndef PANDA_BUILD
   Label end_of_pool;
+#else
+  Label end_of_pool(allocator_);
+#endif
 
   VIXL_ASSERT(emit_size % kInstructionSize == 0);
   {
@@ -145,7 +163,11 @@ void LiteralPool::Emit(EmitOption option) {
     }
 
     // Now populate the literal pool.
-    std::vector<RawLiteral*>::iterator it, end;
+#ifndef PANDA_BUILD
+    std::vector<RawLiteral *>::iterator it, end;
+#else
+    panda::ArenaVector<RawLiteral*>::iterator it, end;
+#endif
     for (it = entries_.begin(), end = entries_.end(); it != end; ++it) {
       VIXL_ASSERT((*it)->IsUsed());
       masm_->place(*it);
@@ -193,11 +215,16 @@ void VeneerPool::Reset() {
 
 
 void VeneerPool::Release() {
-  if (--monitor_ == 0) {
+  --monitor_;
+#ifndef PANDA_BUILD
+  if (monitor_ == 0) {
     VIXL_ASSERT(IsEmpty() ||
                 masm_->GetCursorOffset() <
                     unresolved_branches_.GetFirstLimit());
   }
+#else
+  // Assert disabled, because we use own allocator
+#endif
 }
 
 
@@ -248,8 +275,12 @@ bool VeneerPool::ShouldEmitVeneer(int64_t first_unreacheable_pc,
 void VeneerPool::CheckEmitFor(size_t amount, EmitOption option) {
   if (IsEmpty()) return;
 
+#ifndef PANDA_BUILD
   VIXL_ASSERT(masm_->GetCursorOffset() + kPoolNonVeneerCodeSize <
               unresolved_branches_.GetFirstLimit());
+#else
+  // In codegen may be generated unused Labels - to allocate them in one chunk
+#endif
 
   if (IsBlocked()) return;
 
@@ -266,7 +297,11 @@ void VeneerPool::Emit(EmitOption option, size_t amount) {
   VIXL_ASSERT(!IsBlocked());
   VIXL_ASSERT(!IsEmpty());
 
+#ifndef PANDA_BUILD
   Label end;
+#else
+  Label end(allocator_);
+#endif
   if (option == kBranchRequired) {
     ExactAssemblyScopeWithoutPoolsCheck guard(masm_, kInstructionSize);
     masm_->b(&end);
@@ -277,9 +312,13 @@ void VeneerPool::Emit(EmitOption option, size_t amount) {
   // range.
   static const size_t kVeneerEmissionMargin = 1 * KBytes;
 
+#ifndef PANDA_BUILD
   for (BranchInfoSetIterator it(&unresolved_branches_); !it.Done();) {
+#else
+  for (BranchInfoSetIterator it(allocator_, &unresolved_branches_); !it.Done();) {
+#endif
     BranchInfo* branch_info = it.Current();
-    if (ShouldEmitVeneer(branch_info->first_unreacheable_pc_,
+    if (branch_info && ShouldEmitVeneer(branch_info->first_unreacheable_pc_,
                          amount + kVeneerEmissionMargin)) {
       CodeBufferCheckScope scope(masm_,
                                  kVeneerCodeSize,
@@ -312,29 +351,41 @@ void VeneerPool::Emit(EmitOption option, size_t amount) {
   masm_->bind(&end);
 }
 
-
+#ifndef PANDA_BUILD
 MacroAssembler::MacroAssembler(PositionIndependentCodeOption pic)
+#else
+MacroAssembler::MacroAssembler(panda::ArenaAllocator* allocator,
+          PositionIndependentCodeOption pic)
+#endif
     : Assembler(pic),
 #ifdef VIXL_DEBUG
       allow_macro_instructions_(true),
 #endif
       generate_simulator_code_(VIXL_AARCH64_GENERATE_SIMULATOR_CODE),
       sp_(sp),
-      tmp_list_(ip0, ip1),
-      v_tmp_list_(d31),
+      tmp_list_(ip0, ip1, x20),
+      v_tmp_list_(d30, d31),
       p_tmp_list_(CPURegList::Empty(CPURegister::kPRegister)),
       current_scratch_scope_(NULL),
+#ifndef PANDA_BUILD
       literal_pool_(this),
       veneer_pool_(this),
       recommended_checkpoint_(Pool::kNoCheckpointRequired),
       fp_nan_propagation_(NoFPMacroNaNPropagationSelected) {
+#else
+      literal_pool_(allocator, this),
+      veneer_pool_(allocator, this),
+      recommended_checkpoint_(Pool::kNoCheckpointRequired),
+      fp_nan_propagation_(NoFPMacroNaNPropagationSelected),
+      allocator_(allocator) {
+#endif
   checkpoint_ = GetNextCheckPoint();
 #ifndef VIXL_DEBUG
   USE(allow_macro_instructions_);
 #endif
 }
 
-
+#ifndef PANDA_BUILD
 MacroAssembler::MacroAssembler(size_t capacity,
                                PositionIndependentCodeOption pic)
     : Assembler(capacity, pic),
@@ -343,8 +394,8 @@ MacroAssembler::MacroAssembler(size_t capacity,
 #endif
       generate_simulator_code_(VIXL_AARCH64_GENERATE_SIMULATOR_CODE),
       sp_(sp),
-      tmp_list_(ip0, ip1),
-      v_tmp_list_(d31),
+      tmp_list_(ip0, ip1, x20),
+      v_tmp_list_(d30, d31),
       p_tmp_list_(CPURegList::Empty(CPURegister::kPRegister)),
       current_scratch_scope_(NULL),
       literal_pool_(this),
@@ -353,8 +404,9 @@ MacroAssembler::MacroAssembler(size_t capacity,
       fp_nan_propagation_(NoFPMacroNaNPropagationSelected) {
   checkpoint_ = GetNextCheckPoint();
 }
+#endif
 
-
+#ifndef PANDA_BUILD
 MacroAssembler::MacroAssembler(byte* buffer,
                                size_t capacity,
                                PositionIndependentCodeOption pic)
@@ -364,8 +416,8 @@ MacroAssembler::MacroAssembler(byte* buffer,
 #endif
       generate_simulator_code_(VIXL_AARCH64_GENERATE_SIMULATOR_CODE),
       sp_(sp),
-      tmp_list_(ip0, ip1),
-      v_tmp_list_(d31),
+      tmp_list_(ip0, ip1, x20),
+      v_tmp_list_(d30, d31),
       p_tmp_list_(CPURegList::Empty(CPURegister::kPRegister)),
       current_scratch_scope_(NULL),
       literal_pool_(this),
@@ -374,7 +426,26 @@ MacroAssembler::MacroAssembler(byte* buffer,
       fp_nan_propagation_(NoFPMacroNaNPropagationSelected) {
   checkpoint_ = GetNextCheckPoint();
 }
-
+#else
+MacroAssembler::MacroAssembler(panda::ArenaAllocator* allocator, byte* buffer,
+                               size_t capacity,
+                               PositionIndependentCodeOption pic)
+    : Assembler(buffer, capacity, pic),
+#ifdef VIXL_DEBUG
+      allow_macro_instructions_(true),
+#endif
+      generate_simulator_code_(VIXL_AARCH64_GENERATE_SIMULATOR_CODE),
+      sp_(sp),
+      tmp_list_(ip0, ip1, x20),
+      v_tmp_list_(d30, d31),
+      p_tmp_list_(CPURegList::Empty(CPURegister::kPRegister)),
+      current_scratch_scope_(NULL),
+      literal_pool_(allocator, this),
+      veneer_pool_(allocator, this),
+      recommended_checkpoint_(Pool::kNoCheckpointRequired), allocator_(allocator) {
+  checkpoint_ = GetNextCheckPoint();
+}
+#endif
 
 MacroAssembler::~MacroAssembler() {}
 
@@ -563,7 +634,11 @@ void MacroAssembler::B(Label* label, Condition cond) {
   EmissionCheckScope guard(this, 2 * kInstructionSize);
 
   if (label->IsBound() && LabelIsOutOfRange(label, CondBranchType)) {
+#ifndef PANDA_BUILD
     Label done;
+#else
+    Label done(allocator_);
+#endif
     b(&done, InvertCondition(cond));
     b(label);
     bind(&done);
@@ -589,7 +664,11 @@ void MacroAssembler::Cbnz(const Register& rt, Label* label) {
   EmissionCheckScope guard(this, 2 * kInstructionSize);
 
   if (label->IsBound() && LabelIsOutOfRange(label, CondBranchType)) {
-    Label done;
+#ifndef PANDA_BUILD
+   Label done;
+#else
+   Label done(allocator_);
+#endif
     cbz(rt, &done);
     b(label);
     bind(&done);
@@ -615,7 +694,11 @@ void MacroAssembler::Cbz(const Register& rt, Label* label) {
   EmissionCheckScope guard(this, 2 * kInstructionSize);
 
   if (label->IsBound() && LabelIsOutOfRange(label, CondBranchType)) {
-    Label done;
+#ifndef PANDA_BUILD
+   Label done;
+#else
+   Label done(allocator_);
+#endif
     cbnz(rt, &done);
     b(label);
     bind(&done);
@@ -640,7 +723,11 @@ void MacroAssembler::Tbnz(const Register& rt, unsigned bit_pos, Label* label) {
   EmissionCheckScope guard(this, 2 * kInstructionSize);
 
   if (label->IsBound() && LabelIsOutOfRange(label, TestBranchType)) {
-    Label done;
+#ifndef PANDA_BUILD
+   Label done;
+#else
+   Label done(allocator_);
+#endif
     tbz(rt, bit_pos, &done);
     b(label);
     bind(&done);
@@ -665,7 +752,11 @@ void MacroAssembler::Tbz(const Register& rt, unsigned bit_pos, Label* label) {
   EmissionCheckScope guard(this, 2 * kInstructionSize);
 
   if (label->IsBound() && LabelIsOutOfRange(label, TestBranchType)) {
-    Label done;
+#ifndef PANDA_BUILD
+   Label done;
+#else
+   Label done(allocator_);
+#endif
     tbnz(rt, bit_pos, &done);
     b(label);
     bind(&done);
@@ -1495,7 +1586,11 @@ void MacroAssembler::Fmov(VRegister vd, double imm) {
         fmov(vd, xzr);
       } else {
         ldr(vd,
+#ifndef PANDA_BUILD
             new Literal<double>(imm,
+#else
+            allocator_->New<Literal<double>> (imm,
+#endif
                                 &literal_pool_,
                                 RawLiteral::kDeletedOnPlacementByPool));
       }
@@ -1532,7 +1627,11 @@ void MacroAssembler::Fmov(VRegister vd, float imm) {
         fmov(vd, wzr);
       } else {
         ldr(vd,
+#ifndef PANDA_BUILD
             new Literal<float>(imm,
+#else
+            allocator_->New<Literal<float>>(imm,
+#endif
                                &literal_pool_,
                                RawLiteral::kDeletedOnPlacementByPool));
       }
@@ -2579,7 +2678,11 @@ void MacroAssembler::PrintfNoPreserve(const char* format,
   // literal pool, but since Printf is usually used for debugging, it is
   // beneficial for it to be minimally dependent on other features.
   temps.Exclude(x0);
+#ifndef PANDA_BUILD
   Label format_address;
+#else
+  Label format_address(allocator_);
+#endif
   Adr(x0, &format_address);
 
   // Emit the format string directly in the instruction stream.
@@ -2593,7 +2696,11 @@ void MacroAssembler::PrintfNoPreserve(const char* format,
     EmissionCheckScope guard(this,
                              AlignUp(strlen(format) + 1, kInstructionSize) +
                                  2 * kInstructionSize);
+#ifndef PANDA_BUILD
     Label after_data;
+#else
+    Label after_data(allocator_);
+#endif
     B(&after_data);
     Bind(&format_address);
     EmitString(format);
@@ -2716,7 +2823,11 @@ void MacroAssembler::Trace(TraceParameters parameters, TraceCommand command) {
     // memory, so make sure we don't try to emit a literal pool.
     ExactAssemblyScope scope(this, kTraceLength);
 
+#ifndef PANDA_BUILD
     Label start;
+#else
+    Label start(allocator_);
+#endif
     bind(&start);
 
     // Refer to simulator-aarch64.h for a description of the marker and its
@@ -2743,7 +2854,11 @@ void MacroAssembler::Log(TraceParameters parameters) {
     // memory, so make sure we don't try to emit a literal pool.
     ExactAssemblyScope scope(this, kLogLength);
 
+#ifndef PANDA_BUILD
     Label start;
+#else
+    Label start(allocator_);
+#endif
     bind(&start);
 
     // Refer to simulator-aarch64.h for a description of the marker and its
diff --git a/src/aarch64/macro-assembler-aarch64.h b/src/aarch64/macro-assembler-aarch64.h
index b1e9ec5c..2f77358e 100644
--- a/src/aarch64/macro-assembler-aarch64.h
+++ b/src/aarch64/macro-assembler-aarch64.h
@@ -107,7 +107,12 @@ class Pool {
 
 class LiteralPool : public Pool {
  public:
+#ifndef PANDA_BUILD
   explicit LiteralPool(MacroAssembler* masm);
+#else
+  explicit LiteralPool(MacroAssembler* masm) = delete;
+  LiteralPool(panda::ArenaAllocator* allocator, MacroAssembler* masm);
+#endif
   ~LiteralPool() VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION;
   void Reset();
 
@@ -147,7 +152,11 @@ class LiteralPool : public Pool {
   static const ptrdiff_t kRecommendedLiteralPoolRange = 128 * KBytes;
 
  private:
+#ifndef PANDA_BUILD
   std::vector<RawLiteral*> entries_;
+#else
+  panda::ArenaVector<RawLiteral*> entries_;
+#endif
   size_t size_;
   ptrdiff_t first_use_;
   // The parent class `Pool` provides a `checkpoint_`, which is the buffer
@@ -157,7 +166,12 @@ class LiteralPool : public Pool {
   // checkpoint is reached.
   ptrdiff_t recommended_checkpoint_;
 
+#ifndef PANDA_BUILD
   std::vector<RawLiteral*> deleted_on_destruction_;
+#else
+  panda::ArenaVector<RawLiteral*> deleted_on_destruction_;
+  panda::ArenaAllocator* allocator_;
+#endif
 };
 
 
@@ -180,8 +194,12 @@ inline ptrdiff_t LiteralPool::GetNextRecommendedCheckpoint() {
 
 class VeneerPool : public Pool {
  public:
+#ifndef PANDA_BUILD
   explicit VeneerPool(MacroAssembler* masm) : Pool(masm) {}
-
+#else
+explicit VeneerPool(MacroAssembler* masm) = delete;
+VeneerPool(panda::ArenaAllocator* allocator, MacroAssembler* masm) : Pool(masm), unresolved_branches_(allocator), allocator_(allocator) {}
+#endif
   void Reset();
 
   void Block() { monitor_++; }
@@ -311,8 +329,13 @@ class VeneerPool : public Pool {
 
   class BranchInfoTypedSet : public BranchInfoTypedSetBase {
    public:
+#ifndef PANDA_BUILD
     BranchInfoTypedSet() : BranchInfoTypedSetBase() {}
-
+#else
+    BranchInfoTypedSet() = delete;
+    explicit BranchInfoTypedSet(panda::ArenaAllocator* alloc) : BranchInfoTypedSetBase(alloc) {}
+    BranchInfoTypedSet(BranchInfoTypedSet&&) = default;
+#endif
     ptrdiff_t GetFirstLimit() {
       if (empty()) {
         return kInvalidOffset;
@@ -337,6 +360,16 @@ class VeneerPool : public Pool {
 
   class BranchInfoSet {
    public:
+#ifdef PANDA_BUILD
+       BranchInfoSet() = delete;
+       BranchInfoSet(panda::ArenaAllocator* allocator) :
+              typed_set_(allocator->Adapter()) {
+                  typed_set_.reserve(3);
+                  typed_set_.emplace_back((allocator));
+                  typed_set_.emplace_back((allocator));
+                  typed_set_.emplace_back((allocator));
+              };
+#endif
     void insert(BranchInfo branch_info) {
       ImmBranchType type = branch_info.branch_type_;
       VIXL_ASSERT(IsValidBranchType(type));
@@ -421,20 +454,33 @@ class VeneerPool : public Pool {
 
    private:
     static const int kNumberOfTrackedBranchTypes = 3;
+#ifndef PANDA_BUILD
     BranchInfoTypedSet typed_set_[kNumberOfTrackedBranchTypes];
-
+#else
+    panda::ArenaVector<BranchInfoTypedSet> typed_set_;
+#endif
     friend class VeneerPool;
     friend class BranchInfoSetIterator;
   };
 
   class BranchInfoSetIterator {
    public:
+#ifndef PANDA_BUILD
     explicit BranchInfoSetIterator(BranchInfoSet* set) : set_(set) {
       for (int i = 0; i < BranchInfoSet::kNumberOfTrackedBranchTypes; i++) {
         new (&sub_iterator_[i])
             BranchInfoTypedSetIterator(&(set_->typed_set_[i]));
       }
     }
+#else
+    explicit BranchInfoSetIterator(BranchInfoSet* set) = delete;
+    BranchInfoSetIterator(panda::ArenaAllocator* allocator, BranchInfoSet* set) : set_(set), sub_iterator_(allocator->Adapter()) {
+      for (int i = 0; i < BranchInfoSet::kNumberOfTrackedBranchTypes; i++) {
+          sub_iterator_.emplace_back(&(set_->typed_set_[i]));
+      }
+    }
+
+#endif
 
     VeneerPool::BranchInfo* Current() {
       for (int i = 0; i < BranchInfoSet::kNumberOfTrackedBranchTypes; i++) {
@@ -486,8 +532,12 @@ class VeneerPool : public Pool {
 
    private:
     BranchInfoSet* set_;
+#ifndef PANDA_BUILD
     BranchInfoTypedSetIterator
         sub_iterator_[BranchInfoSet::kNumberOfTrackedBranchTypes];
+#else
+    panda::ArenaVector<BranchInfoTypedSetIterator> sub_iterator_;
+#endif
   };
 
   ptrdiff_t GetNextCheckPoint() {
@@ -503,6 +553,9 @@ class VeneerPool : public Pool {
 
   // Information about unresolved (forward) branches.
   BranchInfoSet unresolved_branches_;
+#ifdef PANDA_BUILD
+  panda::ArenaAllocator* allocator_;
+#endif
 };
 
 
@@ -664,13 +717,29 @@ enum FPMacroNaNPropagationOption {
 
 class MacroAssembler : public Assembler, public MacroAssemblerInterface {
  public:
+#ifdef PANDA_BUILD
+  explicit MacroAssembler(panda::ArenaAllocator* allocator,
+      PositionIndependentCodeOption pic = PositionIndependentCode);
+#else
   explicit MacroAssembler(
       PositionIndependentCodeOption pic = PositionIndependentCode);
+#endif
+#ifdef PANDA_BUILD
+  MacroAssembler(size_t capacity,
+                 PositionIndependentCodeOption pic = PositionIndependentCode) = delete;
+#else
   MacroAssembler(size_t capacity,
                  PositionIndependentCodeOption pic = PositionIndependentCode);
+#endif
+#ifndef PANDA_BUILD
   MacroAssembler(byte* buffer,
                  size_t capacity,
                  PositionIndependentCodeOption pic = PositionIndependentCode);
+#else
+MacroAssembler(panda::ArenaAllocator* allocator, byte* buffer,
+               size_t capacity,
+               PositionIndependentCodeOption pic = PositionIndependentCode);
+#endif
   ~MacroAssembler();
 
   enum FinalizeOption {
@@ -1920,6 +1989,7 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
     VIXL_ASSERT(allow_macro_instructions_);
     SingleEmissionCheckScope guard(this);
     RawLiteral* literal;
+#ifndef PANDA_BUILD
     if (vt.IsD()) {
       literal = new Literal<double>(imm,
                                     &literal_pool_,
@@ -1929,12 +1999,24 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
                                    &literal_pool_,
                                    RawLiteral::kDeletedOnPlacementByPool);
     }
+#else
+    if (vt.IsD()) {
+      literal = allocator_->New<Literal<double>>(imm,
+                                    &literal_pool_,
+                                    RawLiteral::kDeletedOnPlacementByPool);
+    } else {
+      literal = allocator_->New<Literal<float>>(static_cast<float>(imm),
+                                   &literal_pool_,
+                                   RawLiteral::kDeletedOnPlacementByPool);
+    }
+#endif
     ldr(vt, literal);
   }
   void Ldr(const VRegister& vt, float imm) {
     VIXL_ASSERT(allow_macro_instructions_);
     SingleEmissionCheckScope guard(this);
     RawLiteral* literal;
+#ifndef PANDA_BUILD
     if (vt.IsS()) {
       literal = new Literal<float>(imm,
                                    &literal_pool_,
@@ -1944,23 +2026,43 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
                                     &literal_pool_,
                                     RawLiteral::kDeletedOnPlacementByPool);
     }
+#else
+    if (vt.IsS()) {
+      literal = allocator_->New<Literal<float>>(imm,
+                                   &literal_pool_,
+                                   RawLiteral::kDeletedOnPlacementByPool);
+    } else {
+      literal = allocator_->New<Literal<double>>(static_cast<double>(imm),
+                                    &literal_pool_,
+                                    RawLiteral::kDeletedOnPlacementByPool);
+    }
+#endif
     ldr(vt, literal);
   }
   void Ldr(const VRegister& vt, uint64_t high64, uint64_t low64) {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(vt.IsQ());
     SingleEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ldr(vt,
         new Literal<uint64_t>(high64,
                               low64,
                               &literal_pool_,
                               RawLiteral::kDeletedOnPlacementByPool));
+#else
+    ldr(vt,
+        allocator_->New<Literal<uint64_t>>(high64,
+                              low64,
+                              &literal_pool_,
+                              RawLiteral::kDeletedOnPlacementByPool));
+#endif
   }
   void Ldr(const Register& rt, uint64_t imm) {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(!rt.IsZero());
     SingleEmissionCheckScope guard(this);
     RawLiteral* literal;
+#ifndef PANDA_BUILD
     if (rt.Is64Bits()) {
       literal = new Literal<uint64_t>(imm,
                                       &literal_pool_,
@@ -1972,16 +2074,36 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
                                       &literal_pool_,
                                       RawLiteral::kDeletedOnPlacementByPool);
     }
+#else
+    if (rt.Is64Bits()) {
+      literal = allocator_->New<Literal<uint64_t>>(imm,
+                                      &literal_pool_,
+                                      RawLiteral::kDeletedOnPlacementByPool);
+    } else {
+      VIXL_ASSERT(rt.Is32Bits());
+      VIXL_ASSERT(IsUint32(imm) || IsInt32(imm));
+      literal = allocator_->New<Literal<uint32_t>>(static_cast<uint32_t>(imm),
+                                      &literal_pool_,
+                                      RawLiteral::kDeletedOnPlacementByPool);
+    }
+#endif
     ldr(rt, literal);
   }
   void Ldrsw(const Register& rt, uint32_t imm) {
     VIXL_ASSERT(allow_macro_instructions_);
     VIXL_ASSERT(!rt.IsZero());
     SingleEmissionCheckScope guard(this);
+#ifndef PANDA_BUILD
     ldrsw(rt,
           new Literal<uint32_t>(imm,
                                 &literal_pool_,
                                 RawLiteral::kDeletedOnPlacementByPool));
+#else
+    ldrsw(rt,
+          allocator_->New<Literal<uint32_t>>(imm,
+                                &literal_pool_,
+                                RawLiteral::kDeletedOnPlacementByPool));
+#endif
   }
   void Ldr(const CPURegister& rt, RawLiteral* literal) {
     VIXL_ASSERT(allow_macro_instructions_);
@@ -7488,17 +7610,30 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
 
   template <typename T>
   Literal<T>* CreateLiteralDestroyedWithPool(T value) {
+#ifndef PANDA_BUILD
     return new Literal<T>(value,
                           &literal_pool_,
                           RawLiteral::kDeletedOnPoolDestruction);
+#else
+    return allocator_->New<Literal<T>>(value,
+                          &literal_pool_,
+                          RawLiteral::kDeletedOnPoolDestruction);
+#endif
   }
 
   template <typename T>
   Literal<T>* CreateLiteralDestroyedWithPool(T high64, T low64) {
+#ifndef PANDA_BUILD
     return new Literal<T>(high64,
                           low64,
                           &literal_pool_,
                           RawLiteral::kDeletedOnPoolDestruction);
+#else
+    return allocator_->New<Literal<T>>(high64,
+                          low64,
+                          &literal_pool_,
+                          RawLiteral::kDeletedOnPoolDestruction);
+#endif
   }
 
   // Push the system stack pointer (sp) down to allow the same to be done to
@@ -8097,6 +8232,9 @@ class MacroAssembler : public Assembler, public MacroAssemblerInterface {
 
   FPMacroNaNPropagationOption fp_nan_propagation_;
 
+#ifdef PANDA_BUILD
+  panda::ArenaAllocator* allocator_;
+#endif
   friend class Pool;
   friend class LiteralPool;
 };
@@ -8434,7 +8572,11 @@ void MacroAssembler::CallRuntimeHelper(R (*function)(P...),
     EmissionCheckScope guard(this,
                              kRuntimeCallLength,
                              CodeBufferCheckScope::kExactSize);
+#ifndef PANDA_BUILD
     Label start;
+#else
+    Label start(allocator_);
+#endif
     bind(&start);
     {
       ExactAssemblyScope scope(this, kInstructionSize);
diff --git a/src/aarch64/simulator-aarch64.cc b/src/aarch64/simulator-aarch64.cc
index 88675030..bc1811fa 100644
--- a/src/aarch64/simulator-aarch64.cc
+++ b/src/aarch64/simulator-aarch64.cc
@@ -410,10 +410,19 @@ const Simulator::FormToVisitorFnMap* Simulator::GetFormToVisitorFnMap() {
   return &form_to_visitor;
 }
 
+#ifndef PANDA_BUILD
 Simulator::Simulator(Decoder* decoder, FILE* stream, SimStack::Allocated stack)
     : memory_(std::move(stack)),
       last_instr_(NULL),
       cpu_features_auditor_(decoder, CPUFeatures::All()) {
+#else
+Simulator::Simulator(panda::ArenaAllocator* allocator, Decoder* decoder, SimStack::Allocated stack, FILE* stream)
+    : memory_(std::move(stack)),
+      last_instr_(NULL),
+      allocator_(allocator),
+      cpu_features_auditor_(decoder, CPUFeatures::All()),
+      saved_cpu_features_(allocator->Adapter()) {
+#endif
   // Ensure that shift operations act as the simulator expects.
   VIXL_ASSERT((static_cast<int32_t>(-1) >> 1) == -1);
   VIXL_ASSERT((static_cast<uint32_t>(-1) >> 1) == 0x7fffffff);
@@ -427,7 +436,11 @@ Simulator::Simulator(Decoder* decoder, FILE* stream, SimStack::Allocated stack)
 
   stream_ = stream;
 
+#ifndef PANDA_BUILD
   print_disasm_ = new PrintDisassembler(stream_);
+#else
+  print_disasm_ = allocator->New<PrintDisassembler>(allocator, stream_);
+#endif
   // The Simulator and Disassembler share the same available list, held by the
   // auditor. The Disassembler only annotates instructions with features that
   // are _not_ available, so registering the auditor should have no effect
@@ -558,7 +571,9 @@ void Simulator::SetVectorLengthInBits(unsigned vector_length) {
 Simulator::~Simulator() {
   // The decoder may outlive the simulator.
   decoder_->RemoveVisitor(print_disasm_);
+#ifndef PANDA_BUILD
   delete print_disasm_;
+#endif
   close(placeholder_pipe_fd_[0]);
   close(placeholder_pipe_fd_[1]);
 }
@@ -13892,8 +13907,11 @@ void Simulator::DoPrintf(const Instruction* instr) {
   const char* format_base = ReadRegister<const char*>(0);
   VIXL_ASSERT(format_base != NULL);
   size_t length = strlen(format_base) + 1;
+#ifndef PANDA_BUILD
   char* const format = new char[length + arg_count];
-
+#else
+  char* const format = reinterpret_cast<char*>(allocator_->Alloc((length + arg_count)* sizeof(char)));
+#endif
   // A list of chunks, each with exactly one format placeholder.
   const char* chunks[kPrintfMaxArgCount];
 
@@ -13974,8 +13992,9 @@ void Simulator::DoPrintf(const Instruction* instr) {
 
   // Set LR as if we'd just called a native printf function.
   WriteLr(ReadPc());
-
+#ifndef PANDA_BUILD
   delete[] format;
+#endif
 }
 
 
diff --git a/src/aarch64/simulator-aarch64.h b/src/aarch64/simulator-aarch64.h
index 7c403e24..07405723 100644
--- a/src/aarch64/simulator-aarch64.h
+++ b/src/aarch64/simulator-aarch64.h
@@ -1029,9 +1029,19 @@ class SimExclusiveGlobalMonitor {
 
 class Simulator : public DecoderVisitor {
  public:
+#ifndef PANDA_BUILD
   explicit Simulator(Decoder* decoder,
                      FILE* stream = stdout,
                      SimStack::Allocated stack = SimStack().Allocate());
+#else
+  explicit Simulator(Decoder* decoder,
+                     FILE* stream = stdout,
+                     SimStack::Allocated stack = SimStack().Allocate()) = delete;
+  Simulator(panda::ArenaAllocator* allocator,
+            Decoder* decoder,
+            SimStack::Allocated stack,
+            FILE* stream = stdout);
+#endif
   ~Simulator();
 
   void ResetState();
@@ -4846,6 +4856,9 @@ class Simulator : public DecoderVisitor {
   void ExtractFromSimVRegister(VectorFormat vform,
                                SimPRegister& pd,  // NOLINT(runtime/references)
                                SimVRegister vreg);
+#ifdef PANDA_BUILD
+    panda::ArenaAllocator* allocator_;
+#endif
 
   bool coloured_trace_;
 
@@ -4857,7 +4870,11 @@ class Simulator : public DecoderVisitor {
   void PrintExclusiveAccessWarning();
 
   CPUFeaturesAuditor cpu_features_auditor_;
+#ifndef PANDA_BUILD
   std::vector<CPUFeatures> saved_cpu_features_;
+#else
+  panda::ArenaVector<CPUFeatures>saved_cpu_features_;
+#endif
 
   // State for *rand48 functions, used to simulate randomness with repeatable
   // behaviour (so that tests are deterministic). This is used to simulate RNDR
diff --git a/src/code-buffer-vixl.cc b/src/code-buffer-vixl.cc
index 5c906c52..19a3c6c8 100644
--- a/src/code-buffer-vixl.cc
+++ b/src/code-buffer-vixl.cc
@@ -33,7 +33,6 @@ extern "C" {
 
 namespace vixl {
 
-
 CodeBuffer::CodeBuffer(size_t capacity)
     : buffer_(NULL),
       managed_(true),
@@ -58,9 +57,10 @@ CodeBuffer::CodeBuffer(size_t capacity)
   VIXL_CHECK(buffer_ != NULL);
   // Aarch64 instructions must be word aligned, we assert the default allocator
   // always returns word align memory.
-  VIXL_ASSERT(IsWordAligned(buffer_));
-
-  cursor_ = buffer_;
+  if (buffer_ != MAP_FAILED) {
+      VIXL_ASSERT(IsWordAligned(buffer_));
+      cursor_ = buffer_;
+  }
 }
 
 
@@ -75,12 +75,21 @@ CodeBuffer::CodeBuffer(byte* buffer, size_t capacity)
 
 
 CodeBuffer::~CodeBuffer() VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION {
-  VIXL_ASSERT(!IsDirty());
+  // VIXL_ASSERT(!IsDirty()); // Use own allocator - not applied
   if (managed_) {
 #ifdef VIXL_CODE_BUFFER_MALLOC
     free(buffer_);
 #elif defined(VIXL_CODE_BUFFER_MMAP)
-    munmap(buffer_, capacity_);
+    if (buffer_ != MAP_FAILED) {
+        [[maybe_unused]] int res = munmap(buffer_, capacity_);
+        // Success unmap position
+        VIXL_ASSERT(res == 0);
+        if ((mmap_max_ != 0) && (capacity_ > mmap_max_)) {
+          // Force crash - allocated too much
+          printf(" Allocated too much memory.\n");
+          VIXL_UNREACHABLE();
+        }
+    }
 #else
 #error Unknown code buffer allocator.
 #endif
@@ -167,6 +176,8 @@ void CodeBuffer::Grow(size_t new_capacity) {
   VIXL_ASSERT(managed_);
   VIXL_ASSERT(new_capacity > capacity_);
   ptrdiff_t cursor_offset = GetCursorOffset();
+    VIXL_ASSERT(false);
+    // Do not support grow with our allocators
 #ifdef VIXL_CODE_BUFFER_MALLOC
   buffer_ = static_cast<byte*>(realloc(buffer_, new_capacity));
   VIXL_CHECK(buffer_ != NULL);
@@ -174,10 +185,14 @@ void CodeBuffer::Grow(size_t new_capacity) {
   buffer_ = static_cast<byte*>(
       mremap(buffer_, capacity_, new_capacity, MREMAP_MAYMOVE));
   VIXL_CHECK(buffer_ != MAP_FAILED);
+  if ((mmap_max_ != 0) && (new_capacity > mmap_max_)) {
+    // Force crash - allocated too much
+    printf(" Allocated too much memory.\n");
+    VIXL_UNREACHABLE();
+  }
 #else
 #error Unknown code buffer allocator.
 #endif
-
   cursor_ = buffer_ + cursor_offset;
   capacity_ = new_capacity;
 }
diff --git a/src/code-buffer-vixl.h b/src/code-buffer-vixl.h
index 9a1efd44..a54d3c1b 100644
--- a/src/code-buffer-vixl.h
+++ b/src/code-buffer-vixl.h
@@ -36,7 +36,7 @@ namespace vixl {
 
 class CodeBuffer {
  public:
-  static const size_t kDefaultCapacity = 4 * KBytes;
+  static const size_t kDefaultCapacity = 4 * MBytes;
 
   explicit CodeBuffer(size_t capacity = kDefaultCapacity);
   CodeBuffer(byte* buffer, size_t capacity);
@@ -44,6 +44,7 @@ class CodeBuffer {
 
   void Reset();
 
+#ifdef VIXL_CODE_BUFFER_MMAP
   // Make the buffer executable or writable. These states are mutually
   // exclusive.
   // Note that these require page-aligned memory blocks, which we can only
@@ -51,6 +52,20 @@ class CodeBuffer {
   void SetExecutable();
   void SetWritable();
 
+  void SetMmapMaxBytes(size_t size) {
+    mmap_max_ = size;
+  }
+#else
+  // These require page-aligned memory blocks, which we can only guarantee with
+  // mmap.
+  VIXL_NO_RETURN_IN_DEBUG_MODE void SetExecutable() { VIXL_UNIMPLEMENTED(); }
+  VIXL_NO_RETURN_IN_DEBUG_MODE void SetWritable() { VIXL_UNIMPLEMENTED(); }
+#endif
+
+  bool IsValid() const {
+    return (buffer_ != MAP_FAILED);
+  }
+
   ptrdiff_t GetOffsetFrom(ptrdiff_t offset) const {
     ptrdiff_t cursor_offset = cursor_ - buffer_;
     VIXL_ASSERT((offset >= 0) && (offset <= cursor_offset));
@@ -146,7 +161,6 @@ class CodeBuffer {
   }
 
   bool IsManaged() const { return managed_; }
-
   void Grow(size_t new_capacity);
 
   bool IsDirty() const { return dirty_; }
@@ -181,6 +195,9 @@ class CodeBuffer {
   bool dirty_;
   // Capacity in bytes of the backing store.
   size_t capacity_;
+#ifdef VIXL_CODE_BUFFER_MMAP
+  size_t mmap_max_{0};
+#endif
 };
 
 }  // namespace vixl
diff --git a/src/invalset-vixl.h b/src/invalset-vixl.h
index 8bd6035e..af9c0113 100644
--- a/src/invalset-vixl.h
+++ b/src/invalset-vixl.h
@@ -34,6 +34,10 @@
 
 #include "globals-vixl.h"
 
+#ifdef PANDA_BUILD
+#include "utils/arena_containers.h"
+#endif
+
 namespace vixl {
 
 // We define a custom data structure template and its iterator as `std`
@@ -90,7 +94,13 @@ class InvalSetIterator;  // Forward declaration.
 template <TEMPLATE_INVALSET_P_DECL>
 class InvalSet {
  public:
+#ifndef PANDA_BUILD
   InvalSet();
+#else
+  InvalSet() = delete;
+  InvalSet(panda::ArenaAllocator* alocator);
+  InvalSet(InvalSet&&) {VIXL_ASSERT(false);}
+#endif
   ~InvalSet() VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION;
 
   static const size_t kNPreallocatedElements = N_PREALLOCATED_ELEMENTS;
@@ -213,7 +223,12 @@ class InvalSet {
   // Elements are only invalidated when using the vector. The preallocated
   // storage always only contains valid elements.
   ElementType preallocated_[kNPreallocatedElements];
+#ifdef PANDA_BUILD
+  panda::ArenaAllocator* allocator_;
+  panda::ArenaVector<ElementType>* vector_;
+#else
   std::vector<ElementType>* vector_;
+#endif
 
   // Iterators acquire and release this monitor. While a set is acquired,
   // certain operations are illegal to ensure that the iterator will
@@ -303,7 +318,11 @@ class InvalSetIterator : public std::iterator<std::forward_iterator_tag,
   // Used when looking at the preallocated elements, or in debug mode when using
   // the vector to track how many times the iterator has advanced.
   size_t index_;
+#ifdef PANDA_BUILD
+  typename panda::ArenaVector<ElementType>::iterator iterator_;
+#else
   typename std::vector<ElementType>::iterator iterator_;
+#endif
   S* inval_set_;
 
   // TODO: These helpers are deprecated and will be removed in future versions
@@ -312,7 +331,7 @@ class InvalSetIterator : public std::iterator<std::forward_iterator_tag,
   void Advance();
 };
 
-
+#ifndef PANDA_BUILD
 template <TEMPLATE_INVALSET_P_DECL>
 InvalSet<TEMPLATE_INVALSET_P_DEF>::InvalSet()
     : valid_cached_min_(false), sorted_(true), size_(0), vector_(NULL) {
@@ -320,13 +339,23 @@ InvalSet<TEMPLATE_INVALSET_P_DEF>::InvalSet()
   monitor_ = 0;
 #endif
 }
-
+#else
+template <TEMPLATE_INVALSET_P_DECL>
+InvalSet<TEMPLATE_INVALSET_P_DEF>::InvalSet(panda::ArenaAllocator* allocator)
+    : valid_cached_min_(false), sorted_(true), size_(0), allocator_(allocator), vector_(NULL) {
+#ifdef VIXL_DEBUG
+  monitor_ = 0;
+#endif
+}
+#endif
 
 template <TEMPLATE_INVALSET_P_DECL>
 InvalSet<TEMPLATE_INVALSET_P_DEF>::~InvalSet()
     VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION {
   VIXL_ASSERT(monitor_ == 0);
+#ifndef PANDA_BUILD
   delete vector_;
+#endif
 }
 
 
@@ -359,8 +388,13 @@ void InvalSet<TEMPLATE_INVALSET_P_DEF>::insert(const ElementType& element) {
       preallocated_[size_] = element;
     } else {
       // Transition to using the vector.
+#ifndef PANDA_BUILD
       vector_ =
           new std::vector<ElementType>(preallocated_, preallocated_ + size_);
+#else
+      vector_ = allocator_->New<panda::ArenaVector<ElementType>>(
+            preallocated_, preallocated_ + size_, allocator_->Adapter());
+#endif
       vector_->push_back(element);
     }
   }
@@ -620,7 +654,11 @@ const ElementType InvalSet<TEMPLATE_INVALSET_P_DEF>::CleanBack() {
   VIXL_ASSERT(monitor() == 0);
   if (IsUsingVector()) {
     // Delete the invalid trailing elements.
+#ifndef PANDA_BUILD
     typename std::vector<ElementType>::reverse_iterator it = vector_->rbegin();
+#else
+    typename panda::ArenaVector<ElementType>::reverse_iterator it = vector_->rbegin();
+#endif
     while (!IsValid(*it)) {
       it++;
     }
@@ -737,8 +775,13 @@ InvalSetIterator<S>::InvalSetIterator(S* inval_set)
     inval_set->Acquire();
 #endif
     if (using_vector_) {
+#ifndef PANDA_BUILD
       iterator_ = typename std::vector<ElementType>::iterator(
           inval_set_->vector_->begin());
+#else
+      iterator_ = typename panda::ArenaVector<ElementType>::iterator(
+            inval_set_->vector_->begin());
+#endif
     }
     MoveToValidElement();
   }
@@ -870,7 +913,11 @@ bool InvalSetIterator<S>::operator==(const InvalSetIterator<S>& rhs) const {
     equal = equal && (index_ == rhs.index_);
 #ifdef DEBUG
     // If not using_vector_, iterator_ should be default-initialised.
+#ifndef PANDA_BUILD
     typename std::vector<ElementType>::iterator default_iterator;
+#else
+    typename panda::ArenaVector<ElementType>::iterator default_iterator;
+#endif
     VIXL_ASSERT(iterator_ == default_iterator);
     VIXL_ASSERT(rhs.iterator_ == default_iterator);
 #endif
diff --git a/src/pool-manager-impl.h b/src/pool-manager-impl.h
index a1bcaaad..b6edb43f 100644
--- a/src/pool-manager-impl.h
+++ b/src/pool-manager-impl.h
@@ -431,7 +431,11 @@ typename PoolManager<T>::objects_iter PoolManager<T>::RemoveAndDelete(
   }
   if (label_base->ShouldBeDeletedOnPlacementByPoolManager()) {
     VIXL_ASSERT(!label_base->ShouldBeDeletedOnPoolManagerDestruction());
+#ifndef PANDA_BUILD
     delete label_base;
+#else
+    label_base = nullptr;
+#endif
   }
 
   return objects_.erase(iter);
@@ -496,6 +500,7 @@ PoolManager<T>::~PoolManager<T>() VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION {
     VIXL_ASSERT(!(*iter).label_base_->IsBound());
   }
 #endif
+#ifndef PANDA_BUILD
   // Delete objects the pool manager owns.
   for (typename std::vector<LocationBase<T>*>::iterator
            iter = delete_on_destruction_.begin(),
@@ -504,6 +509,7 @@ PoolManager<T>::~PoolManager<T>() VIXL_NEGATIVE_TESTING_ALLOW_EXCEPTION {
        ++iter) {
     delete *iter;
   }
+#endif
 }
 
 template <typename T>
diff --git a/src/pool-manager.h b/src/pool-manager.h
index 2e73f8ea..b60d8c43 100644
--- a/src/pool-manager.h
+++ b/src/pool-manager.h
@@ -38,6 +38,9 @@
 #include "macro-assembler-interface.h"
 #include "utils-vixl.h"
 
+#ifdef PANDA_BUILD
+#include "utils/arena_containers.h"
+#endif
 namespace vixl {
 
 class TestPoolManager;
@@ -389,8 +392,15 @@ class ForwardReference {
 template <typename T>
 class PoolManager {
  public:
+#ifdef PANDA_BUILD
+  PoolManager(panda::ArenaAllocator* allocator, int header_size, int alignment, int buffer_alignment)
+      : allocator_(allocator), objects_(allocator->Adapter()),
+      delete_on_destruction_(allocator->Adapter()),
+        header_size_(header_size),
+#else
   PoolManager(int header_size, int alignment, int buffer_alignment)
       : header_size_(header_size),
+#endif
         alignment_(alignment),
         buffer_alignment_(buffer_alignment),
         checkpoint_(std::numeric_limits<T>::max()),
@@ -445,9 +455,15 @@ class PoolManager {
   bool IsBlocked() const { return monitor_ != 0; }
 
  private:
+#ifndef PANDA_BUILD
   typedef typename std::vector<PoolObject<T> >::iterator objects_iter;
   typedef
       typename std::vector<PoolObject<T> >::const_iterator const_objects_iter;
+#else
+  typedef typename panda::ArenaVector<PoolObject<T> >::iterator objects_iter;
+  typedef
+    typename panda::ArenaVector<PoolObject<T> >::const_iterator const_objects_iter;
+#endif
 
   PoolObject<T>* GetObjectIfTracked(LocationBase<T>* label) {
     return const_cast<PoolObject<T>*>(
@@ -509,10 +525,18 @@ class PoolManager {
   // is sorted every time we add, delete or update a PoolObject.
   // TODO: Consider a more efficient data structure here, to allow us to delete
   // elements as we emit them.
+#ifndef PANDA_BUILD
   std::vector<PoolObject<T> > objects_;
 
   // Objects to be deleted on pool destruction.
   std::vector<LocationBase<T>*> delete_on_destruction_;
+#else
+  panda::ArenaAllocator* allocator_ = nullptr;
+  panda::ArenaVector<PoolObject<T> > objects_;
+
+// Objects to be deleted on pool destruction.
+  panda::ArenaVector<LocationBase<T>*> delete_on_destruction_;
+#endif
 
   // The header_size_ and alignment_ values are hardcoded for each instance of
   // PoolManager. The PoolManager does not know how to emit the header, and
diff --git a/src/utils-vixl.h b/src/utils-vixl.h
index 8a5f6b99..9a6d9ee5 100644
--- a/src/utils-vixl.h
+++ b/src/utils-vixl.h
@@ -35,6 +35,10 @@
 #include "compiler-intrinsics-vixl.h"
 #include "globals-vixl.h"
 
+#ifdef PANDA_BUILD
+#include "utils/arena_containers.h"
+#endif
+
 namespace vixl {
 
 // Macros for compile-time format checking.
@@ -771,7 +775,12 @@ class BitField {
   }
 
  public:
+#ifndef PANDA_BUILD
   explicit BitField(unsigned size) : bitfield_(size, 0) {}
+#else
+  explicit BitField(unsigned size) = delete;
+  explicit BitField(panda::ArenaAllocator* allocator, unsigned size) : bitfield_(size, 0, allocator->Adapter()) {}
+#endif
 
   void Set(int i) {
     VIXL_ASSERT((i >= 0) && (static_cast<size_t>(i) < bitfield_.size()));
@@ -805,7 +814,11 @@ class BitField {
   }
 
  private:
+#ifndef PANDA_BUILD
   std::vector<bool> bitfield_;
+#else
+  panda::ArenaVector<bool> bitfield_;
+#endif
 };
 
 namespace internal {
-- 
2.17.1

