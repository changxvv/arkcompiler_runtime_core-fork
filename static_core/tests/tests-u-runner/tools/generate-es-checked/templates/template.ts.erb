/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOTE autogenerated file

const RESULT: any = {}

interface String {
    isWellFormed(): boolean
}

String.prototype.isWellFormed ||= function(): boolean {
    const arr = new Array<number>()
    for (let i = 0; i < this.length; i++) {
        arr.push(this.charCodeAt(i))
    }
    let i = 0
    while (i < arr.length) {
        if (arr[i] < 0xd800) {
            i += 1
        } else if (arr[i] > 0xdc00 || i + 1 == arr.length || arr[i + 1] < 0xdc00) {
            return false
        } else {
            i += 2
        }
    }
    return true
}

function preparePersist(x: any): any {
% ESChecker::UNMANGLE.each { |k, v|
%   if v != "NaN"
  if (x === <%= v %>) {
    return "<%= k %>";
  }
%   end
% }
  if (typeof x === "number" && isNaN(x)) {
    return "#__NaN"
  }
  if (typeof x === "string") {
    if ((x as any).isWellFormed()) {
      return x;
    }
    const ret = []
    for (let i = 0; i < x.length; i++) {
      ret.push(x.charCodeAt(i))
    }
    return { "__kind": "str", "data": ret }
  }
  if (x instanceof Array) {
    return (x as Array<any>).map(preparePersist)
  }
  if (typeof x[Symbol.iterator] === 'function') {
    return Array.from<any>(x).map(preparePersist)
  }
  return x;
}

function persistValue(x: any): any {
  const y = preparePersist(x);
  if (typeof y === "number") {
    return y;
  }
  return JSON.parse(JSON.stringify(y));
}

{
% test_cases_current_chunk.each_with_index { |test_case_cur, idx|
{
  // <%= idx %>
%   if test_case_cur.self
  const self = <%= test_case_cur.ts.self %>;
%   end
  try {
    RESULT[<%= idx * 2 %>] = persistValue(<%= test_case_cur.ts.expr %>);
  } catch (e) {
    RESULT[<%= idx * 2 %>] = "#__threw " + String(e);
  }
%   if test_case_cur.self
    RESULT[<%= idx * 2 + 1 %>] = persistValue(self);
%   end
}
% }
}

const numPrec = (k: any, v: any) => {
  if (typeof v === "number") {
    if (Number.isInteger(v)) {
      return v;
    }
    const x = new DataView(new ArrayBuffer(8))
    x.setFloat64(0, v, true)
    return {
      "__kind": "num",
      "data": `0x${x.getBigUint64(0, true).toString(16).padStart(16, '0')}`,
      "dbg": v.toFixed(100).replace(/(\.[0-9]*[1-9]+)(0*)$/, '$1')
    }
  }
  return v;
}

console.log(JSON.stringify(RESULT, numPrec))
