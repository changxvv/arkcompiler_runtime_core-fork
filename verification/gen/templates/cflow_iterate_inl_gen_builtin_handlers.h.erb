/*
 * Copyright (c) 2021 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

% throwing_builtins = [ "monitorenter", "monitorexit" ]
% builtin_kinds = PandaBuiltins::builtins.map(&:insn).uniq
% builtin_mnemonics = PandaBuiltins::instructions.map { |instruction| instruction.sig.split(' ').at(0) }
% undefined_builtins = builtin_mnemonics.select { |mnemonic| not builtin_kinds.include?(mnemonic) }.uniq
% builtin_kinds.each do |kind|
%   mnemonic = kind.split('.').map { |p| p == '64' ? 'Wide' : p.capitalize }.join
%   builtins = PandaBuiltins::builtins.select { |builtin| builtin.insn == kind }.sort_by(&:id)
%   builtins.each do |builtin|
bool IsExceptionSourceBuiltin<%= builtin.mnemonic.capitalize %>() {
%       if throwing_builtins.include?(builtin.mnemonic)
    return true;
%       else
    return false;
%       end
}
%   end

template <BytecodeInstructionSafe::Format format>
bool IsExceptionSource<%= mnemonic %>() {
    const auto builtin_id = inst_.template GetImm<format>();
    switch (builtin_id) {
%       builtins.each do |builtin|
        case <%= builtin.id %>: return IsExceptionSourceBuiltin<%= builtin.mnemonic.capitalize %>();
%       end
        default:
            LOG(DEBUG, VERIFIER) << "Incorrect builtin id 0x" << std::hex << builtin_id << " for '<%= kind %>'";
    }
    return false;
}
% end
% undefined_builtins.each do |builtin|
template <BytecodeInstructionSafe::Format format>
bool IsExceptionSource<%= builtin.split('.').map { |p| p == '64' ? 'Wide' : p.capitalize }.join %>() {
    return false;
}
% end
